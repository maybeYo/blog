{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/k8s常见总结2.assets/K8S架构图-1628732856449.png","path":"images/k8s常见总结2.assets/K8S架构图-1628732856449.png","modified":1,"renderable":0},{"_id":"source/images/k8s常见总结2.assets/K8S架构图.png","path":"images/k8s常见总结2.assets/K8S架构图.png","modified":1,"renderable":0},{"_id":"source/images/k8s常见总结2.assets/创建pod流程图.png","path":"images/k8s常见总结2.assets/创建pod流程图.png","modified":1,"renderable":0},{"_id":"source/images/Kubernetes常见运维技巧.assets/image-20210720091116835.png","path":"images/Kubernetes常见运维技巧.assets/image-20210720091116835.png","modified":1,"renderable":0},{"_id":"source/images/Kubernetes常见运维技巧.assets/image-20210720091449537.png","path":"images/Kubernetes常见运维技巧.assets/image-20210720091449537.png","modified":1,"renderable":0},{"_id":"source/images/Kubernetes常见运维技巧.assets/image-20210720091554069.png","path":"images/Kubernetes常见运维技巧.assets/image-20210720091554069.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/01.jpg","path":"images/01.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/02.jpg","path":"images/02.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/03.jpg","path":"images/03.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/04.jpg","path":"images/04.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/07.jpg","path":"images/07.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/05.jpg","path":"images/05.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/06.jpg","path":"images/06.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/08.jpg","path":"images/08.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/09.jpg","path":"images/09.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/10.jpg","path":"images/10.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.png","path":"images/wechatpay.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechat_channel.jpg","path":"images/wechat_channel.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.png","path":"uploads/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/nprogress.js","path":"js/third-party/nprogress.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/post-body-end.njk","hash":"0bd1e2cebdf9c0e1152868f16ec024cc933a8f9f","modified":1624932165075},{"_id":"source/_data/styles.styl","hash":"e1aac31db328622f2297488a4672302d2ab20696","modified":1626398636419},{"_id":"source/_data/variables.styl","hash":"186378607a17fa1336c2c18f227ee49e1c02c4c3","modified":1626342701774},{"_id":"source/about/index.md","hash":"b270c69f1e561f9b2b29fd5910b8d2ed5124c49c","modified":1624176817635},{"_id":"source/_posts/Kubernetes常见运维技巧.md","hash":"8c8d85122e61d9cfc6f4774f3cb16730f1ac5bd5","modified":1627893294901},{"_id":"source/_posts/NEXT.md","hash":"208a6e5e064800889d832d5809c3434e164d6bbd","modified":1640056404383},{"_id":"source/_posts/NEXT-SEO.md","hash":"4d347d3a5878a1d3f1efee5bc00a9c5e2d03a338","modified":1627893822246},{"_id":"source/_posts/activemq.md","hash":"b849d6719cb7f9cb66574b427cdf2fe420f18ceb","modified":1640053940604},{"_id":"source/_posts/hello-world.md","hash":"7f6bc3383f0974b0890cb68f478fe7e612734f31","modified":1624174800586},{"_id":"source/_posts/gre.md","hash":"2e2e2932ed4ba1c68f41c5eb7ce4f0bf10b6e840","modified":1640142129936},{"_id":"source/_posts/hexo资源文件夹.md","hash":"9bda2a2b8fcc98903b8acd06240c13cfc2f17b27","modified":1626762463586},{"_id":"source/_posts/k8s常见总结.md","hash":"9937e602c09ca1e89cd0ff3119dc59b2cfb96703","modified":1628729416366},{"_id":"source/_posts/k8s常见总结2.md","hash":"02d4508f3e3634123e751845aeaa6fc845dec3d6","modified":1628749223668},{"_id":"source/_posts/k8s集群加入与删除.md","hash":"d1b54e58a627ca9d3f08c99caa5395ddcc4e8e7c","modified":1640053978365},{"_id":"source/_posts/kubeadm部署k8s.md","hash":"f5e36fbbdae4d6120c1e9310f36e458dd4d3f7db","modified":1640053626031},{"_id":"source/categories/index.md","hash":"a7dec3efce8fa48b55e5ef638519d62ac90d46da","modified":1624176826830},{"_id":"source/tags/index.md","hash":"6af3f6c6a731a6de879aaf7138422bc53ea8a657","modified":1624176835203},{"_id":"source/_posts/安装解释器.assets/image-20210915142945525.png","hash":"79a578e854199f1b8ea7df12692f1984e3e9b550","modified":1631687385551},{"_id":"source/_posts/Kubernetes常见运维技巧.assets/image-20210720091116835.png","hash":"10953a033f0133e22a2dd992fa304aa657870b65","modified":1626743476875},{"_id":"source/_posts/Kubernetes常见运维技巧.assets/image-20210720091449537.png","hash":"ac09f37785c333393d3068bca93b01f20b271afa","modified":1626743689574},{"_id":"source/_posts/k8s常见总结2.assets/创建pod流程图.png","hash":"55b035c839dd7e9d7b7a4210600e3c30018fabc1","modified":1628732875230},{"_id":"source/images/k8s常见总结2.assets/创建pod流程图.png","hash":"55b035c839dd7e9d7b7a4210600e3c30018fabc1","modified":1628732875230},{"_id":"source/_posts/安装解释器.assets/image-20210915134707262.png","hash":"2ec7267dea1edaa1e8c60aa890713ebb84a63adb","modified":1631684827303},{"_id":"source/_posts/安装解释器.assets/image-20210915145032102.png","hash":"5ba061e31128a2f86e693904c23d0042f27b23b4","modified":1631688632137},{"_id":"source/images/Kubernetes常见运维技巧.assets/image-20210720091116835.png","hash":"10953a033f0133e22a2dd992fa304aa657870b65","modified":1626743476875},{"_id":"source/images/Kubernetes常见运维技巧.assets/image-20210720091449537.png","hash":"ac09f37785c333393d3068bca93b01f20b271afa","modified":1626743689574},{"_id":"source/_posts/Kubernetes常见运维技巧.assets/image-20210720091554069.png","hash":"ccf8a153ddb141a33f925fef601f9c8b42b3a044","modified":1626743754113},{"_id":"source/_posts/安装解释器.assets/image-20210915102656486.png","hash":"9b79455a06eafbfbe9c0619427ff03d04d40dec6","modified":1631672816533},{"_id":"source/_posts/安装解释器.assets/image-20210915104312222.png","hash":"6d01d0df2068e9d3f08ae9b848d483ab7c2dc145","modified":1631673792277},{"_id":"source/_posts/安装解释器.assets/image-20210915134926471.png","hash":"e818a932cddd28aa214632cb75a3b4f054197e2e","modified":1631684966529},{"_id":"source/_posts/安装解释器.assets/image-20210915142421390.png","hash":"b1740e8d1cd7ee3128a6f48d2e2c330ddf34bca7","modified":1631687061444},{"_id":"source/_posts/安装解释器.assets/image-20210915143149463.png","hash":"c8964acf64a7d39c51309ae4396b0a34137660c6","modified":1631687509513},{"_id":"source/_posts/安装解释器.assets/image-20210915144357151.png","hash":"988870da1a775f8379448cb94f57d4f912417b62","modified":1631688237203},{"_id":"source/_posts/安装解释器.assets/image-20210915145603019.png","hash":"87683789465e2fac9660ec3150c5374127e886bb","modified":1631688963064},{"_id":"source/_posts/安装解释器.assets/image-20210915150517759-1631689518470.png","hash":"46cea2cf75950e9757e3bf65013c3cb07dfa192d","modified":1631689518484},{"_id":"source/_posts/安装解释器.assets/image-20210915150517759.png","hash":"46cea2cf75950e9757e3bf65013c3cb07dfa192d","modified":1631689517812},{"_id":"source/images/Kubernetes常见运维技巧.assets/image-20210720091554069.png","hash":"ccf8a153ddb141a33f925fef601f9c8b42b3a044","modified":1626743754113},{"_id":"source/_posts/安装解释器.assets/image-20210915101351433.png","hash":"229dd602c8d48b01863b7b446a77c2c659e140b9","modified":1631672031498},{"_id":"source/_posts/k8s常见总结2.assets/K8S架构图-1628732856449.png","hash":"019695d2832fff483189b252d7826ccb3d9bcaf7","modified":1628732856486},{"_id":"source/_posts/k8s常见总结2.assets/K8S架构图.png","hash":"019695d2832fff483189b252d7826ccb3d9bcaf7","modified":1628732139525},{"_id":"source/images/k8s常见总结2.assets/K8S架构图-1628732856449.png","hash":"019695d2832fff483189b252d7826ccb3d9bcaf7","modified":1628732856486},{"_id":"source/images/k8s常见总结2.assets/K8S架构图.png","hash":"019695d2832fff483189b252d7826ccb3d9bcaf7","modified":1628732139525},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1622477006000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1622477006000},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1622477006000},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1622477006000},{"_id":"themes/next/.gitignore","hash":"68d2f59b79fbc9edf358295ac38515c4b32126c1","modified":1622477006000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1622477006000},{"_id":"themes/next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":1622477006000},{"_id":"themes/next/_vendors.yml","hash":"b572c4647097420f254400164694ebf5199e325f","modified":1622477006000},{"_id":"themes/next/_config.yml","hash":"23f38100ff5491a2d3e97bc56596123d9f3c035f","modified":1640317074393},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1624154254535},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1622477006000},{"_id":"themes/next/package.json","hash":"a978308c0c5a5750ac1dae384ca973973203acb4","modified":1622477006000},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1622477006000},{"_id":"themes/next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1622477006000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1622477006000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"eefd073dfb68884cd946f7ec6d3b3619031d7650","modified":1622477006000},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1622477006000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1622477006000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1622477006000},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1622477006000},{"_id":"themes/next/.github/labeler.yml","hash":"e7033752b1f7c35adb61c2b38aad0a9202cdd19b","modified":1622477006000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1622477006000},{"_id":"themes/next/.github/release-drafter.yml","hash":"7662e31224a24154c4fe06b95ccbdff51ab8f2cc","modified":1622477006000},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1622477006000},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1622477006000},{"_id":"themes/next/layout/_layout.njk","hash":"27ec056f89cf848d9a96cdbe16123b46aafbf068","modified":1624154328087},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1622477006000},{"_id":"themes/next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":1622477006000},{"_id":"themes/next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":1622477006000},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1622477006000},{"_id":"themes/next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":1622477006000},{"_id":"themes/next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":1622477006000},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1622477006000},{"_id":"themes/next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1622477006000},{"_id":"themes/next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1622477006000},{"_id":"themes/next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1622477006000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1622477006000},{"_id":"themes/next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1622477006000},{"_id":"themes/next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":1622477006000},{"_id":"themes/next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1622477006000},{"_id":"themes/next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1622477006000},{"_id":"themes/next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1622477006000},{"_id":"themes/next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1622477006000},{"_id":"themes/next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1622477006000},{"_id":"themes/next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1622477006000},{"_id":"themes/next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1622477006000},{"_id":"themes/next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":1622477006000},{"_id":"themes/next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1622477006000},{"_id":"themes/next/languages/si.yml","hash":"2a9861db4547a524b2609c1e7e1061d2e9d48ee4","modified":1622477006000},{"_id":"themes/next/languages/tr.yml","hash":"55b38c7617c24bdc27c9de6cf39f4b191d154fb8","modified":1622477006000},{"_id":"themes/next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1622477006000},{"_id":"themes/next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1622477006000},{"_id":"themes/next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1622477006000},{"_id":"themes/next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1622477006000},{"_id":"themes/next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1622477006000},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1622477006000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1622477006000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1622477006000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1622477006000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1622477006000},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"44405477660289d4ed9beba1d054b15bb67bba06","modified":1622477006000},{"_id":"themes/next/.github/workflows/linter.yml","hash":"a2be8ad35051b82d80a780494813b28154583273","modified":1622477006000},{"_id":"themes/next/.github/workflows/lock.yml","hash":"70bd0be3f33774e4b0ada3a59c901f8f9cff1013","modified":1622477006000},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"8b73c439dc796be141d521a4546bcfb7a5485534","modified":1622477006000},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1622477006000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1622477006000},{"_id":"themes/next/.github/workflows/tester.yml","hash":"22aaaa3eba1a7ebcf0f78417fd9a7113ee7b6c6c","modified":1622477006000},{"_id":"themes/next/.github/workflows/stale.yml","hash":"17586ef86bfc264eb5587c9d8246b7fbcfdbcaa3","modified":1622477006000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":1622477006000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":1622477006000},{"_id":"themes/next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":1622477006000},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1622477006000},{"_id":"themes/next/layout/_macro/post.njk","hash":"b106599106285ecd4c0c1e0ed11c46a36b5a69d5","modified":1622477006000},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"ccc4337f086e17f41669c05591d52cfe5c7953e0","modified":1625120780210},{"_id":"themes/next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":1622477006000},{"_id":"themes/next/layout/_partials/footer.njk","hash":"a63c164da6b47b71c5f4aeb598bc9b545506aa6d","modified":1624115190306},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1622477006000},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1622477006000},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1622477006000},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1622477006000},{"_id":"themes/next/layout/_third-party/index.njk","hash":"467b45a4912369bcba77908151e76a3f3ad0fed2","modified":1622477006000},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1622477006000},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1622477006000},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1622477006000},{"_id":"themes/next/layout/_third-party/nprogress.njk","hash":"80fd1a45e91207fc16df1136e12b8b71b4f65dea","modified":1622477006000},{"_id":"themes/next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":1622477006000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1622477006000},{"_id":"themes/next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":1622477006000},{"_id":"themes/next/scripts/filters/minify.js","hash":"7793c9f7e268c0fca46ad86bf522deb83c2e4a5c","modified":1622477006000},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1622477006000},{"_id":"themes/next/scripts/filters/post.js","hash":"42a9b81c5449afa9d67770604478168333c93804","modified":1622477006000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1622477006000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1622477006000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":1622477006000},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1622477006000},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1622477006000},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1622477006000},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1622477006000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1622477006000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1622477006000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1622477006000},{"_id":"themes/next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1622477006000},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1622477006000},{"_id":"themes/next/source/css/_mixins.styl","hash":"8b0c0353d360b984d285860697b2ccbec78da462","modified":1622477006000},{"_id":"themes/next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1622477006000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d072dbd6c0782c22877d6fae9675942f6fd1f80a","modified":1622477006000},{"_id":"themes/next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1622477006000},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1622477006000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"454ed1fac07be972c7ec911092f0995cd925aab3","modified":1622477006000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1622477006000},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1622477006000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"a30e2051449aeebba1156dc9e78fc0d69a46ec71","modified":1624239547369},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1622477006000},{"_id":"themes/next/source/images/avatar.png","hash":"4cb968e59e21afbdd7a977a1c626284276cb6da3","modified":1625014610206},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"3cc5f8e2c000bb2c355ef960e181410fcbd7f1cd","modified":1624239530034},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1622477006000},{"_id":"themes/next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1622477006000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"82c37d93c071860560183dc643ae07af9501e1f9","modified":1624239491843},{"_id":"themes/next/source/images/wechat_channel.jpg","hash":"44f52e92be776c12cf32135e9310d9c61fc3fd39","modified":1625212825481},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1622477006000},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1622477006000},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1622477006000},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1622477006000},{"_id":"themes/next/source/js/config.js","hash":"77dcb364e1a84d298854c6e4c5626ebacdb01a28","modified":1622477006000},{"_id":"themes/next/source/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":1622477006000},{"_id":"themes/next/source/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1622477006000},{"_id":"themes/next/source/js/next-boot.js","hash":"873e52a851a6ce8dc61b870fa7083da4d2304b7b","modified":1622477006000},{"_id":"themes/next/source/uploads/avatar.png","hash":"198616a7c900bd26059b23f3c7612157da067db4","modified":1624044685656},{"_id":"themes/next/source/js/utils.js","hash":"dda4cb85d7f68a93753dd2ec237637689a52ede7","modified":1622477006000},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1622477006000},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1622477006000},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1622477006000},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1622477006000},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1622477006000},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1622477006000},{"_id":"themes/next/test/tags/group-pictures.js","hash":"f41640e5d0f552c0b0c4ac8876a2edb0fcf54e56","modified":1622477006000},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1622477006000},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1622477006000},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1622477006000},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1622477006000},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1622477006000},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1622477006000},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1622477006000},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1622477006000},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1622477006000},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"113e2a6411ef6479b8901437495f3543d4d03b68","modified":1640318961510},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"49aa8de07918a11399131dfd703418af3f0a1a19","modified":1622477006000},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1622477006000},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1622477006000},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1622477006000},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":1622477006000},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1622477006000},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":1622477006000},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1622477006000},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1622477006000},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1622477006000},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1622477006000},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1622477006000},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1622477006000},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"cc1a11190b1a55ae8d4252d296803bc19db90bc5","modified":1622477006000},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1622477006000},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1622477006000},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"a9bb52d0537d27cfe670d80e716da6780786ab8a","modified":1622477006000},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1622477006000},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1622477006000},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1622477006000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"a2250458c0621dde85daadfd3ff6292f532fb77f","modified":1622477006000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1622477006000},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1622477006000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1622477006000},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1622477006000},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":1622477006000},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1622477006000},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"5c54ef9060195c6bdcb3bbd4cc1af938a443fb23","modified":1622477006000},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1622477006000},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1622477006000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1622477006000},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1622477006000},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1622477006000},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1622477006000},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1622477006000},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1622477006000},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1622477006000},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1622477006000},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1622477006000},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"3fc91aba5b17a5ae60b8e04707a7da87db4d0340","modified":1622477006000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1622477006000},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1622477006000},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1622477006000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1622477006000},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1622477006000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"92ab6bb3c3122980699f0613dac27a7cabfedecc","modified":1622477006000},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1622477006000},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1622477006000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"ecc93ba67af26b6715fc75001fa0c3131b726241","modified":1622477006000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"7b0ea8d28ced63977dc6539920eb044b1098adcb","modified":1622477006000},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":1622477006000},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"13b3301aa9b613975630502d93e6ae82c5293aa8","modified":1622477006000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1622477006000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1622477006000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"32a1d9ad50621a78d0243e176c8b05ff7866fd5b","modified":1622477006000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"cc1e2d5921c6990f94f3cf11b1ff7533a21da9b7","modified":1622477006000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7c0533bac4400689a0d5ab3a188ce42b9375de46","modified":1622477006000},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1622477006000},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1622477006000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"60be56c9ba590e5bcb80d1607ca7eeedde9fdfaa","modified":1622477006000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1622477006000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"3a651690fd7109ec2e936ee4d82cd2ffed3e5b5c","modified":1626342903650},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1622477006000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1622477006000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":1622477006000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":1622477006000},{"_id":"themes/next/source/js/third-party/nprogress.js","hash":"7d56b18a2bdece5468470c70c5f3eb79d4120964","modified":1622477006000},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1622477006000},{"_id":"themes/next/source/js/third-party/rating.js","hash":"51a35e9ce91567bfc5efa31007ae694bfdfb68b5","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ece860218125bdb2578f373ed4f5040c9670e4b1","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"8d7ad58c9086161b05843aa7e44973148be33611","modified":1624237291386},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"3c7ae405dd30b9b46494a6b9a6cb1b7ec6138ba9","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"1cffb9c24eea18090b21b9cb908fe07cfeac0c03","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"9f88d350df8115d26c6adbc2025a27ef9a42d7ff","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"2d337a12c5c668ee64447bda5a9ed64eaed5b29e","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1622477006000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1622477006000},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1622477006000},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1622477006000},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1622477006000},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"6d9ca074f1df9e9527ec06c2963b1ad6079d821e","modified":1622477006000},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"106f3f89f46ec96a08df5f14c31dca88a0b9b82f","modified":1622477006000},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1622477006000},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1622477006000},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1622477006000},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1622477006000},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1622477006000},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1622477006000},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1622477006000},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"87406572e6781c79146c217adc46f9199c952bbb","modified":1622477006000},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1622477006000},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"e1194984b7b41ae232b57bd423c97f36bc7bdd61","modified":1622477006000},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":1622477006000},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"2847a80fa248c9341a049fab3205953460aedefd","modified":1622477006000},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1622477006000},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"34c1f2dbf5c3d4f6e9dad73addb22b648c2053c1","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"5d61dedb3bec1021d52894f9b379e4d0953f6a35","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"2ca4dea5e7785c9b77566d95cabf896d20a42741","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b1181c5f12a70b8bf710586fcb0d7959841ee512","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":1622477006000},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"4f482514230c941c9475e1272188e53a54975463","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"08e79881d58d01afab6dbed37ab4f52356564d7e","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"2421500e447822ef1b6826403a3e1df3345641d7","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"f53e6c12bd4805888f696386d00668f23cd335e7","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1622477006000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"cf194bea1c9e67fde871a04de3bc81df72c54277","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"d180871d4440090241fc988736c1f3a7efb4b1ba","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"ab715dbf2b98bfeb5e7b7c43e92e5c02496cc2ea","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"6394340c28a21f6aa90e786f3bfe24fb26595653","modified":1622477006000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":1622477006000},{"_id":"themes/next/source/images/wechatpay.png","hash":"48cebee78469b4b2ea5d2ab3d137248d2f48bd1f","modified":1624241837839},{"_id":"themes/next/source/images/01.jpg","hash":"8516737717201c07e0afa3566704e83ffaeb8095","modified":1624702233463},{"_id":"themes/next/source/images/03.jpg","hash":"2c10ab812a24b97feb3fe3efcdeba7734867996e","modified":1624717332153},{"_id":"themes/next/source/images/02.jpg","hash":"4132329189303f1123f3290f3e4140ff11b3baa5","modified":1624701735688},{"_id":"themes/next/source/images/04.jpg","hash":"90737b8c87f9c169768928c35eb160238fe94164","modified":1624702144159},{"_id":"themes/next/source/images/06.jpg","hash":"ea1d7ca8c6b3f3beb56427e5eb569c479df9fe10","modified":1624717209936},{"_id":"themes/next/source/images/10.jpg","hash":"b975315bb6dc16aeaa39ac79dd7c0f633d48e30b","modified":1624717531815},{"_id":"themes/next/source/images/07.jpg","hash":"8f1e99c4a1b90ed65ea04caf4e9a8d3e6f991e7a","modified":1624717479203},{"_id":"themes/next/source/images/09.jpg","hash":"7ea64a2e0a2c93e3c92c98c4528c08e612ef10d8","modified":1624717267613},{"_id":"themes/next/source/images/05.jpg","hash":"88de793719552aeafea8834b35105d3910502cb3","modified":1624716974712},{"_id":"themes/next/source/images/08.jpg","hash":"bfd84256540643edd235d6ee537ec1e07e3dbd79","modified":1624716771119},{"_id":"public/lib/three.js","hash":"03f0632e8b682b9be99bd6cafda82eaf374e0e8e","modified":1640319690698},{"_id":"public/lib/sphere.js","hash":"20fd2d6fe7af90e6ec6104a6955d76a8feb26e5e","modified":1640319690698},{"_id":"public/lib/lines.js","hash":"a26c5a1badd61eb35baf0ea1011f052064d05cc5","modified":1640319690698},{"_id":"public/lib/waves.js","hash":"b17a6a396ff888fa5a1edf91c92c3f67e5b461ae","modified":1640319690698},{"_id":"public/search.xml","hash":"c743829e7ccb9f283e94a780fa791bdd05584579","modified":1640319690698},{"_id":"public/baidusitemap.xml","hash":"defd56562c17644f833783e267693ec35adc86e4","modified":1640319690698},{"_id":"public/sitemap.xml","hash":"8bdca9c1829f13cf3458677ac4c6e5e07f6f4b68","modified":1640319690698},{"_id":"public/about/index.html","hash":"60441fb0b5f3f3d5742aca26a5528337310fc264","modified":1640319690698},{"_id":"public/categories/index.html","hash":"1b0f59dbb6bb84d0d797907a96ac3be6029e50d3","modified":1640319690698},{"_id":"public/tags/index.html","hash":"d9ed0f8f1528a1089615fcdc211c6155f54c8a5f","modified":1640319690698},{"_id":"public/2021/07/28/activemq/index.html","hash":"a27804a7654238e9dd2981d7064eaec0cec8076e","modified":1640319690698},{"_id":"public/2021/08/02/k8s集群加入与删除/index.html","hash":"5951a6f6ded8d9d7b2106a73303a9763741e9b9f","modified":1640319690698},{"_id":"public/2021/09/18/gre/index.html","hash":"3aca634ab4ec15d7a877584ea1b80492aeaf5863","modified":1640319690698},{"_id":"public/2021/07/20/hexo资源文件夹/index.html","hash":"0ac663dad3d35ba24abc90899237ee67569704e3","modified":1640319690698},{"_id":"public/2021/07/20/Kubernetes常见运维技巧/index.html","hash":"e6cc5be042ad720809a00867d106655463788736","modified":1640319690698},{"_id":"public/2021/07/17/k8s常见总结/index.html","hash":"fc3dc1bdb6497b6c059dc7d0f5c131550a52fec0","modified":1640319690698},{"_id":"public/2021/07/17/k8s常见总结2/index.html","hash":"c9ab4373748118506cec91cab6e45a2809119af8","modified":1640319690698},{"_id":"public/2021/07/16/NEXT-SEO/index.html","hash":"75349c3957f4d34b1c193238fdf356a5e9f248eb","modified":1640319690698},{"_id":"public/2021/06/20/kubeadm部署k8s/index.html","hash":"e5e892a4a4e0671414a85d316c1c6e4f0b7e2836","modified":1640319690698},{"_id":"public/archives/index.html","hash":"896746dd0a93052be7f485a394e39702e979b038","modified":1640319690698},{"_id":"public/2021/06/19/hello-world/index.html","hash":"08e97dae94a285a51f9689cd3accfdb053757798","modified":1640319690698},{"_id":"public/2021/06/20/NEXT/index.html","hash":"3a36e2994236f55795c585e9f0bace774c406dce","modified":1640319690698},{"_id":"public/archives/2021/page/2/index.html","hash":"e1f22667d761faa33c2a26e9fab4968488655660","modified":1640319690698},{"_id":"public/archives/page/2/index.html","hash":"cff8d41596d914eadf9dfb4ab3cbeb3a47e0a248","modified":1640319690698},{"_id":"public/archives/2021/index.html","hash":"82e6bbf65cc0b3f9fb28a78d4991737ccdb6018d","modified":1640319690698},{"_id":"public/archives/2021/06/index.html","hash":"44aa34576eae85a264c5da180f1ee0ad23d2999e","modified":1640319690698},{"_id":"public/archives/2021/07/index.html","hash":"44c52862b8b3fe3b0e1452b5804bde122c378855","modified":1640319690698},{"_id":"public/archives/2021/08/index.html","hash":"9a31a8e37261b6b8cf770d15a238786f13ff553e","modified":1640319690698},{"_id":"public/archives/2021/09/index.html","hash":"6bc69feaa5e6fcccf5dbee4ad519db2bf814b580","modified":1640319690698},{"_id":"public/categories/NEXT/index.html","hash":"14b9cac37c209e61176dc7b03ac08750a28dfe6a","modified":1640319690698},{"_id":"public/categories/Linux/index.html","hash":"4b2b4816008101b14dd94cf2955b1d7f18d368e5","modified":1640319690698},{"_id":"public/categories/hexo/index.html","hash":"1d294e1cc95b3aece430209384510a6fd5dfa772","modified":1640319690698},{"_id":"public/categories/k8s/index.html","hash":"cddeb9c9f129d912f62a5c76f357a93636f03de2","modified":1640319690698},{"_id":"public/page/2/index.html","hash":"c7f4369e50eb29fdc5ca980f14f26d8fe4601158","modified":1640319690698},{"_id":"public/index.html","hash":"fedf1828eb88a45fbc0ea39804d01c9aa6385912","modified":1640319690698},{"_id":"public/tags/NEXT/index.html","hash":"f2a53d4becd10e38a2fe80087bc1c83e49aa8c61","modified":1640319690698},{"_id":"public/tags/Linux/index.html","hash":"89972eacd7879362d48a4f8eee069f4d5aa357d9","modified":1640319690698},{"_id":"public/tags/activemq/index.html","hash":"eb099170f45329c8412303bf574858ee6e6711df","modified":1640319690698},{"_id":"public/tags/k8s/index.html","hash":"64808f02f43bb2c2d32b0d9fd29ea851ce0b9732","modified":1640319690698},{"_id":"public/tags/hexo/index.html","hash":"02f9b4747323ee7685dca3d679182b4419f6d9b4","modified":1640319690698},{"_id":"public/images/apple-touch-icon-next.png","hash":"a30e2051449aeebba1156dc9e78fc0d69a46ec71","modified":1640319690698},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1640319690698},{"_id":"public/images/favicon-32x32-next.png","hash":"3cc5f8e2c000bb2c355ef960e181410fcbd7f1cd","modified":1640319690698},{"_id":"public/images/avatar.png","hash":"4cb968e59e21afbdd7a977a1c626284276cb6da3","modified":1640319690698},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1640319690698},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1640319690698},{"_id":"public/images/favicon-16x16-next.png","hash":"82c37d93c071860560183dc643ae07af9501e1f9","modified":1640319690698},{"_id":"public/images/wechat_channel.jpg","hash":"44f52e92be776c12cf32135e9310d9c61fc3fd39","modified":1640319690698},{"_id":"public/uploads/avatar.png","hash":"198616a7c900bd26059b23f3c7612157da067db4","modified":1640319690698},{"_id":"public/images/k8s常见总结2.assets/创建pod流程图.png","hash":"55b035c839dd7e9d7b7a4210600e3c30018fabc1","modified":1640319690698},{"_id":"public/images/Kubernetes常见运维技巧.assets/image-20210720091449537.png","hash":"ac09f37785c333393d3068bca93b01f20b271afa","modified":1640319690698},{"_id":"public/images/Kubernetes常见运维技巧.assets/image-20210720091116835.png","hash":"10953a033f0133e22a2dd992fa304aa657870b65","modified":1640319690698},{"_id":"public/images/wechatpay.png","hash":"48cebee78469b4b2ea5d2ab3d137248d2f48bd1f","modified":1640319690698},{"_id":"public/images/Kubernetes常见运维技巧.assets/image-20210720091554069.png","hash":"ccf8a153ddb141a33f925fef601f9c8b42b3a044","modified":1640319690698},{"_id":"public/images/01.jpg","hash":"8516737717201c07e0afa3566704e83ffaeb8095","modified":1640319690698},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1640319690698},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1640319690698},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1640319690698},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1640319690698},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1640319690698},{"_id":"public/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":1640319690698},{"_id":"public/js/config.js","hash":"77dcb364e1a84d298854c6e4c5626ebacdb01a28","modified":1640319690698},{"_id":"public/js/next-boot.js","hash":"873e52a851a6ce8dc61b870fa7083da4d2304b7b","modified":1640319690698},{"_id":"public/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1640319690698},{"_id":"public/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":1640319690698},{"_id":"public/js/utils.js","hash":"dda4cb85d7f68a93753dd2ec237637689a52ede7","modified":1640319690698},{"_id":"public/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1640319690698},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1640319690698},{"_id":"public/js/third-party/nprogress.js","hash":"7d56b18a2bdece5468470c70c5f3eb79d4120964","modified":1640319690698},{"_id":"public/js/third-party/rating.js","hash":"51a35e9ce91567bfc5efa31007ae694bfdfb68b5","modified":1640319690698},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1640319690698},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1640319690698},{"_id":"public/js/third-party/comments/changyan.js","hash":"6d9ca074f1df9e9527ec06c2963b1ad6079d821e","modified":1640319690698},{"_id":"public/js/third-party/chat/chatra.js","hash":"106f3f89f46ec96a08df5f14c31dca88a0b9b82f","modified":1640319690698},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1640319690698},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1640319690698},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1640319690698},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1640319690698},{"_id":"public/js/third-party/math/mathjax.js","hash":"87406572e6781c79146c217adc46f9199c952bbb","modified":1640319690698},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1640319690698},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1640319690698},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1640319690698},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1640319690698},{"_id":"public/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":1640319690698},{"_id":"public/js/third-party/tags/mermaid.js","hash":"2847a80fa248c9341a049fab3205953460aedefd","modified":1640319690698},{"_id":"public/js/third-party/statistics/firestore.js","hash":"e1194984b7b41ae232b57bd423c97f36bc7bdd61","modified":1640319690698},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"34c1f2dbf5c3d4f6e9dad73addb22b648c2053c1","modified":1640319690698},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1640319690698},{"_id":"public/css/main.css","hash":"350fec45470362e5c67317149019c5817f64d1fa","modified":1640319690698},{"_id":"public/images/03.jpg","hash":"2c10ab812a24b97feb3fe3efcdeba7734867996e","modified":1640319690698},{"_id":"public/images/k8s常见总结2.assets/K8S架构图-1628732856449.png","hash":"019695d2832fff483189b252d7826ccb3d9bcaf7","modified":1640319690698},{"_id":"public/images/k8s常见总结2.assets/K8S架构图.png","hash":"019695d2832fff483189b252d7826ccb3d9bcaf7","modified":1640319690698},{"_id":"public/images/02.jpg","hash":"4132329189303f1123f3290f3e4140ff11b3baa5","modified":1640319690698},{"_id":"public/images/04.jpg","hash":"90737b8c87f9c169768928c35eb160238fe94164","modified":1640319690698},{"_id":"public/images/06.jpg","hash":"ea1d7ca8c6b3f3beb56427e5eb569c479df9fe10","modified":1640319690698},{"_id":"public/images/10.jpg","hash":"b975315bb6dc16aeaa39ac79dd7c0f633d48e30b","modified":1640319690698},{"_id":"public/images/07.jpg","hash":"8f1e99c4a1b90ed65ea04caf4e9a8d3e6f991e7a","modified":1640319690698},{"_id":"public/images/09.jpg","hash":"7ea64a2e0a2c93e3c92c98c4528c08e612ef10d8","modified":1640319690698},{"_id":"public/images/05.jpg","hash":"88de793719552aeafea8834b35105d3910502cb3","modified":1640319690698},{"_id":"public/images/08.jpg","hash":"bfd84256540643edd235d6ee537ec1e07e3dbd79","modified":1640319690698}],"Category":[{"name":"NEXT","_id":"ckxjvzrn800040gu61mbdflp2"},{"name":"Linux","_id":"ckxjvzrni000f0gu6gm9parhe"},{"name":"hexo","_id":"ckxjvzrnn000n0gu64qpict9i"},{"name":"k8s","_id":"ckxjvzrno000t0gu6f3hzg2a7"}],"Data":[{"_id":"post-body-end","data":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n"},{"_id":"styles","data":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n"},{"_id":"variables","data":""}],"Page":[{"title":"关于","date":"2021-06-20T06:52:13.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-06-20 14:52:13\n---\n","updated":"2021-06-20T08:13:37.635Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckxjvzrmx00000gu66gy7c2bg","content":"","site":{"data":{"post-body-end":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n","variables":""}},"length":0,"excerpt":"","more":""},{"title":"分类","date":"2021-06-19T06:47:03.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-06-19 14:47:03\ntype: \"categories\"\n---\n","updated":"2021-06-20T08:13:46.830Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckxjvzrn300020gu61wsu7c71","content":"","site":{"data":{"post-body-end":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n","variables":""}},"length":0,"excerpt":"","more":""},{"title":"标签","date":"2021-06-19T06:42:32.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-06-19 14:42:32\ntype: \"tags\"\n---\n","updated":"2021-06-20T08:13:55.203Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckxjvzrnb00060gu68aoy4wij","content":"","site":{"data":{"post-body-end":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n","variables":""}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"NEXT","date":"2021-06-20T13:17:50.000Z","_content":"NEXT 配置修改\n<!--more-->\n参考地址\nhttp://theme-next.iissnan.com/theme-settings.html#rss\n\n\n\n# 1.Next主题风格\n\nNext提供了四中主题风格scheme，可以在主题配置文件_config.yml文件中进行选择\n\n分别是`Muse`、`Mist`、`Pisces`、`Gemini`\n\n默认时Muse主题，我用的是Gemini主题，所以把Muse注释掉，Gemini去掉注释\n\n```shell\n# Schemes\n#scheme: Muse\n#scheme: Mist\n#scheme: Pisces\nscheme: Gemini\n```\n\n\n\n# 2.设置菜单栏\n\n## 取消菜单栏注释\n\n```shell\nmenu:\n  home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n\n```\n\n\n\n**在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 tags ：**\n\n```shell\ncd \\hexoblog\\maybe\nhexo new page tags\n```\n\n\n\n**编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：**\n\n```shell\n---\ntitle: 标签\ndate: 2021-06-19 14:42:32\ntype: \"tags\"\n---\n```\n\n\n\n****注意：**如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 `comments` 并将值设置为 `false`，如：**\n\n```shell\n---\ntitle: 标签\ndate: 2021-06-19 14:42:32\ntype: \"tags\"\ncomments: false\n---\n```\n\n\n\n# 3.头像修改\n\n```shell\navatar:\n  url: /images/avatar.png\n```\n\n\n\n# 4.动态背景\n\n```shell\ncanvas_ribbon:\n  enable: true\n```\n\n\n\n# 5.添加顶部加载条\n\n\n\n```shell\nnprogress:\n  enable: true\n  spinner: true\n```\n\n\n\n\n\n# 6.为博客加上萌萌的宠物\n\n**在终端切换到你的博客的路径里，然后输入如下代码：**\n\n```shell\nnpm install --save hexo-helper-live2d\n```\n\n\n\n# 7.添加搜索功能\n\n**1、安装 hexo-generator-searchdb 插件**\n\n```shell\nnpm install hexo-generator-searchdb --save\n```\n**2、打开 主题配置文件 找到Local search，将enable设置为true**\n\n\n\n# 8.显示当然浏览进度\n\n```shell\nback2top:\n  enable: true\t\t\t\t\t\t\t\n  # Back to top in sidebar.\n  sidebar: false\n  # Scroll percent label in b2t button.\n  scrollpercent: true\t\t\t\t\t\n```\n\n\n\n# 9.设置已读进度条\n\n```shell\n# Reading progress bar\nreading_progress:\n  enable: true\n  # Available values: left | right\n  startAt: left\n  # Available values: top | bottom\n  position: top\n  reversed: false\n  color: \"#37c6c0\"\n  height: 3px\n```\n\n\n\n# 10.打赏设置\n\n```shell\nreward_settings:\n  # If true, a donate button will be displayed in every article by default.\n  enable: true\n  animation: true\n  comment: 请作者喝杯茶吧\n  #comment: Buy me a coffee\n\nreward:\n  wechatpay: /images/wechatpay.png\n  #alipay: /images/alipay.png\n  #paypal: /images/paypal.png\n  #bitcoin: /images/bitcoin.png\n \n自己获取自己的支付收款码，放置在next/source/images中\n```\n\n\n\n# 11.自定义博客图标\n\n**博客网站的图标可以在iconfont等网站选择和制作图标**\n\n**文件路径：`\\themes\\next\\source`，images修改主题images下文件替换**\n\n```shell\nfavicon:\n  small: /images/favicon-16x16-next.png\n  medium: /images/favicon-32x32-next.png\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n  #android_manifest: /manifest.json\n```\n\n\n\n# 12.开启站点阅读时间\n\n```yaml\nnpm install hexo-word-counter\nhexo clean\n\nsymbols_count_time:\n  separated_meta: true\n  item_text_total: true\n```\n\n\n\n## 12.1 页面阅读统计 不蒜子统计\n\n```yaml\nbusuanzi_count:\n  enable: false              \t   # 设true 开启\n  total_visitors: true      \t   # 总阅读人数（uv数）\n  total_visitors_icon: fa fa-user  # 阅读总人数的图标\n  total_views: true         \t   # 总阅读次数（pv数）\n  total_views_icon: fa fa-eye      # 阅读总次数的图标\n  post_views: true         \t\t   # 开启内容阅读次数\n  post_views_icon: far fa-eye      # 内容页阅读数的图标\n```\n\n\n\n# 13.文章原创声明\n\n```yaml\n# Creative Commons 4.0 International License.\n# See: https://creativecommons.org/about/cclicenses/\ncreative_commons:\n  # Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero\n  license: by-nc-sa\n  # Available values: big | small\n  size: small\n  sidebar: false\n  post: false\n  # You can set a language value if you prefer a translated version of CC license, e.g. deed.zh\n  # CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org\n  language:\n```\n\n\n\n\n\n# 14.修改底部标签样式\n\n```yaml\n# Use icon instead of the symbol # to indicate the tag at the bottom of the post\ntag_icon: true\n```\n\n\n\n# 15.开启代码复制\n\n```shell\ncodeblock:\n  copy_button:\n    enable: true\n```\n\n\n\n# 16.鼠标点击特效\n\n```shell\nnpm install next-theme/hexo-next-fireworks\n```\n\n\n\n# 17.GitHub Fork Me\n\n```yaml\n# `Follow me on GitHub` banner in the top-right corner.\ngithub_banner:\n  enable: true\n  permalink: https://github.com/maybeYo\n  title: Follow me on GitHub\n```\n\n\n\n# 18.bookmark\n\nBookmark是一个插件，允许用户保存他们的阅读进度。用户只需单击页面左上角的书签图标即可保存滚动位置。当他们下次访问您的博客时，他们可以自动恢复每个页面的最后滚动位置。\n\n```yaml\n# Bookmark Support\nbookmark:\n  enable: false\n  # Customize the color of the bookmark.\n  color: \"#222\"\n  # If auto, save the reading progress when closing the page or clicking the bookmark-icon.\n  # If manual, only save it by clicking the bookmark-icon.\n  save: auto\n```\n\n\n\n# 19.添加lazyload\n\n对于图片进行延迟加载，访问到图片位置时才去请求图片资源，这样可以提高博客的访问速度，节省流量。\n\n```shell\ngit clone https://github.com/theme-next/theme-next-jquery-lazyload source/lib/jquery_laz\n```\n\n\n\n主题配置文件:\n\n```yaml\n# Vanilla JavaScript plugin for lazyloading images.\n# For more information: https://apoorv.pro/lozad.js/demo/\nlazyload: false\n```\n\n\n\n# 20.主题及标题栏背景图\n\n> 首先主题配置文件取消注释\n\n```yaml\ncustom_file_path:\n  style: source/_data/styles.styl\n```\n\n\n\n> 在路径`~/hexo_blog/source/_data`创建/修改 styles.styl文件，并添加以下内容\n\n参考链接：[博客参考：bella722.github.io](https://bella722.github.io/post/4f44d92e.html)\n\n\n\n```css\n// 添加背景图片\nbody {\n      background: url(https://source.unsplash.com/random/1600x900?wallpapers);//自己喜欢的图片地址\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-attachment: fixed;\n      background-position: 50% 50%;\n}\n\n\n//首页banner渐变色\n.site-brand-container {\n    background: linear-gradient(200deg, #f58220, #f58220 );\n}\n\n// 修改主体透明度\n.main-inner{\n    background: #fff;\n    opacity: 0.95;\n}\n\n// 修改菜单栏透明度，会引起本地搜索菜单bug\n//.header-inner {\n//    opacity: 0.95;\n//}\n\n// 主页文章添加阴影效果\n.post {\n   margin-top: 60px;\n   margin-bottom: 60px;\n   padding: 25px;\n   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n}\n```\n\n\n\n## **设置所有边框为圆角**\n\n打开文件，路径：`\\themes\\next\\source\\css_variables\\Gemini.styl `，添加以下代码：\n\n```yaml\n// 修改主题页面布局为圆角\n$border-radius-inner = 15px 15px 15px 15px;\n$border-radius = 15px;\n```\n\n\n\n\n\n# 21.开启文章目录\n\n```yaml\ntoc:\n  enable: true\n  # Automatically add list number to toc.\n  number: false\n  # If true, all words will placed on next lines if header width longer then sidebar width.\n  wrap: false\n  # If true, all level of TOC in a post will be displayed, rather than the activated part of it.\n  expand_all: false\n  # Maximum heading depth of generated toc.\n  max_depth: 6\n```\n\n\n\n# 22.foot页脚设置\n\n```yaml\nfooter:\n  # Specify the year when the site was setup. If not defined, current year will be used.\n  #since: 2020\n\n  # Icon between year and copyright info.\n  icon:\n    # Icon name in Font Awesome. See: https://fontawesome.com/icons\n    name: fa fa-heart\n    # If you want to animate the icon, set it to true.\n    ## 图标的一个动画效果，类似于心跳\n    animated: true\n    # Change the color of icon, using Hex Code.\n    # 图标颜色，可格局需要自行修改\n    color: \"#ff0000\"\n\n  # If not defined, `author` from Hexo `_config.yml` will be used.\n  copyright:\n\n  # Powered by Hexo & NexT\n  # Powered by Hexo 字样，不喜欢可以设置为 false\n  powered: false\n\n  # Beian ICP and gongan information for Chinese users. See: https://beian.miit.gov.cn, http://www.beian.gov.cn\n #备案信息，如果网站有备案号，可以在这里填写备案号\n  beian:\n    enable: false\n    icp:\n    # The digit in the num of gongan beian.\n    gongan_id:\n    # The full num of gongan beian.\n    gongan_num:\n    # The icon for gongan beian. See: http://www.beian.gov.cn/portal/download\n    gongan_icon_url:\n```\n\n\n\n# 23.标签云\n\n参考地址：\n\n[hexo-tag-cloud]:https://github.com/D0n9X1n/hexo-tag-cloud\n\n[github参考](https://github.com/D0n9X1n/hexo-tag-cloud)\n\n**下载插件**\n\n```shell\nnpm install hexo-tag-cloud --save\n```\n\n\n\n**将以下代码插入到`next/layout/_macro/sidebar.swig`**\n\n```css\n{% if site.tags.length > 1 %}\n  <script type=\"text/javascript\" charset=\"utf-8\" src=\"{{ url_for('/js/tagcloud.js') }}\"></script>\n  <script type=\"text/javascript\" charset=\"utf-8\" src=\"{{ url_for('/js/tagcanvas.js') }}\"></script>\n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Tag Cloud</h3>\n    <div id=\"myCanvasContainer\" class=\"widget tagcloud\">\n      <canvas width=\"250\" height=\"250\" id=\"resCanvas\" style=\"width:100%\">\n        {{ list_tags() }}\n      </canvas>\n    </div>\n  </div>\n{% endif %}\n\n```\n\n\n\n# 24.侧边栏社交链接\n\n**修改 `themes\\next\\_config.yml `主题配置文件**\n\n```yaml\n# Social Links\n# Usage: `Key: permalink || icon`\n# Key is the link label showing to end users.\n# Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.\nsocial:\n  #GitHub: https://github.com/yourname || fab fa-github\n  #E-Mail: mailto:yourname@gmail.com || fa fa-envelope\n  #Weibo: https://weibo.com/yourname || fab fa-weibo\n  #Google: https://plus.google.com/yourname || fab fa-google\n  #Twitter: https://twitter.com/yourname || fab fa-twitter\n  #FB Page: https://www.facebook.com/yourname || fab fa-facebook\n  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow\n  #YouTube: https://youtube.com/yourname || fab fa-youtube\n  #Instagram: https://instagram.com/yourname || fab fa-instagram\n  #Skype: skype:yourname?call|chat || fab fa-skype\n  QQ: http://wpa.qq.com/msgrd?v=3&uin=此处填写qq账号&site=qq&menu=yes || fab fa-qq\n  GitHub: https://github.com/maybeYo || fab fa-github\n\nsocial_icons:\n  enable: true\n  icons_only: false\n  transition: false\n\n###设置友情链接\n# Blog rolls\nlinks_settings:\n  icon: fa fa-globe\n  title: Links\n  # Available values: block | inline\n  layout: block\n\n#设置网址\nlinks:\n  #Title: https://example.com\n```\n\n\n\n# 25.点击图片放大\n\n```yaml\n# FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.\n# For more information: https://fancyapps.com/fancybox/\nfancybox: true\n```\n\n","source":"_posts/NEXT.md","raw":"---\ntitle: NEXT\ndate: 2021-06-20 21:17:50\ntags: \n  - NEXT\ncategories: \n  - NEXT\n---\nNEXT 配置修改\n<!--more-->\n参考地址\nhttp://theme-next.iissnan.com/theme-settings.html#rss\n\n\n\n# 1.Next主题风格\n\nNext提供了四中主题风格scheme，可以在主题配置文件_config.yml文件中进行选择\n\n分别是`Muse`、`Mist`、`Pisces`、`Gemini`\n\n默认时Muse主题，我用的是Gemini主题，所以把Muse注释掉，Gemini去掉注释\n\n```shell\n# Schemes\n#scheme: Muse\n#scheme: Mist\n#scheme: Pisces\nscheme: Gemini\n```\n\n\n\n# 2.设置菜单栏\n\n## 取消菜单栏注释\n\n```shell\nmenu:\n  home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n\n```\n\n\n\n**在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 tags ：**\n\n```shell\ncd \\hexoblog\\maybe\nhexo new page tags\n```\n\n\n\n**编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：**\n\n```shell\n---\ntitle: 标签\ndate: 2021-06-19 14:42:32\ntype: \"tags\"\n---\n```\n\n\n\n****注意：**如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 `comments` 并将值设置为 `false`，如：**\n\n```shell\n---\ntitle: 标签\ndate: 2021-06-19 14:42:32\ntype: \"tags\"\ncomments: false\n---\n```\n\n\n\n# 3.头像修改\n\n```shell\navatar:\n  url: /images/avatar.png\n```\n\n\n\n# 4.动态背景\n\n```shell\ncanvas_ribbon:\n  enable: true\n```\n\n\n\n# 5.添加顶部加载条\n\n\n\n```shell\nnprogress:\n  enable: true\n  spinner: true\n```\n\n\n\n\n\n# 6.为博客加上萌萌的宠物\n\n**在终端切换到你的博客的路径里，然后输入如下代码：**\n\n```shell\nnpm install --save hexo-helper-live2d\n```\n\n\n\n# 7.添加搜索功能\n\n**1、安装 hexo-generator-searchdb 插件**\n\n```shell\nnpm install hexo-generator-searchdb --save\n```\n**2、打开 主题配置文件 找到Local search，将enable设置为true**\n\n\n\n# 8.显示当然浏览进度\n\n```shell\nback2top:\n  enable: true\t\t\t\t\t\t\t\n  # Back to top in sidebar.\n  sidebar: false\n  # Scroll percent label in b2t button.\n  scrollpercent: true\t\t\t\t\t\n```\n\n\n\n# 9.设置已读进度条\n\n```shell\n# Reading progress bar\nreading_progress:\n  enable: true\n  # Available values: left | right\n  startAt: left\n  # Available values: top | bottom\n  position: top\n  reversed: false\n  color: \"#37c6c0\"\n  height: 3px\n```\n\n\n\n# 10.打赏设置\n\n```shell\nreward_settings:\n  # If true, a donate button will be displayed in every article by default.\n  enable: true\n  animation: true\n  comment: 请作者喝杯茶吧\n  #comment: Buy me a coffee\n\nreward:\n  wechatpay: /images/wechatpay.png\n  #alipay: /images/alipay.png\n  #paypal: /images/paypal.png\n  #bitcoin: /images/bitcoin.png\n \n自己获取自己的支付收款码，放置在next/source/images中\n```\n\n\n\n# 11.自定义博客图标\n\n**博客网站的图标可以在iconfont等网站选择和制作图标**\n\n**文件路径：`\\themes\\next\\source`，images修改主题images下文件替换**\n\n```shell\nfavicon:\n  small: /images/favicon-16x16-next.png\n  medium: /images/favicon-32x32-next.png\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n  #android_manifest: /manifest.json\n```\n\n\n\n# 12.开启站点阅读时间\n\n```yaml\nnpm install hexo-word-counter\nhexo clean\n\nsymbols_count_time:\n  separated_meta: true\n  item_text_total: true\n```\n\n\n\n## 12.1 页面阅读统计 不蒜子统计\n\n```yaml\nbusuanzi_count:\n  enable: false              \t   # 设true 开启\n  total_visitors: true      \t   # 总阅读人数（uv数）\n  total_visitors_icon: fa fa-user  # 阅读总人数的图标\n  total_views: true         \t   # 总阅读次数（pv数）\n  total_views_icon: fa fa-eye      # 阅读总次数的图标\n  post_views: true         \t\t   # 开启内容阅读次数\n  post_views_icon: far fa-eye      # 内容页阅读数的图标\n```\n\n\n\n# 13.文章原创声明\n\n```yaml\n# Creative Commons 4.0 International License.\n# See: https://creativecommons.org/about/cclicenses/\ncreative_commons:\n  # Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero\n  license: by-nc-sa\n  # Available values: big | small\n  size: small\n  sidebar: false\n  post: false\n  # You can set a language value if you prefer a translated version of CC license, e.g. deed.zh\n  # CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org\n  language:\n```\n\n\n\n\n\n# 14.修改底部标签样式\n\n```yaml\n# Use icon instead of the symbol # to indicate the tag at the bottom of the post\ntag_icon: true\n```\n\n\n\n# 15.开启代码复制\n\n```shell\ncodeblock:\n  copy_button:\n    enable: true\n```\n\n\n\n# 16.鼠标点击特效\n\n```shell\nnpm install next-theme/hexo-next-fireworks\n```\n\n\n\n# 17.GitHub Fork Me\n\n```yaml\n# `Follow me on GitHub` banner in the top-right corner.\ngithub_banner:\n  enable: true\n  permalink: https://github.com/maybeYo\n  title: Follow me on GitHub\n```\n\n\n\n# 18.bookmark\n\nBookmark是一个插件，允许用户保存他们的阅读进度。用户只需单击页面左上角的书签图标即可保存滚动位置。当他们下次访问您的博客时，他们可以自动恢复每个页面的最后滚动位置。\n\n```yaml\n# Bookmark Support\nbookmark:\n  enable: false\n  # Customize the color of the bookmark.\n  color: \"#222\"\n  # If auto, save the reading progress when closing the page or clicking the bookmark-icon.\n  # If manual, only save it by clicking the bookmark-icon.\n  save: auto\n```\n\n\n\n# 19.添加lazyload\n\n对于图片进行延迟加载，访问到图片位置时才去请求图片资源，这样可以提高博客的访问速度，节省流量。\n\n```shell\ngit clone https://github.com/theme-next/theme-next-jquery-lazyload source/lib/jquery_laz\n```\n\n\n\n主题配置文件:\n\n```yaml\n# Vanilla JavaScript plugin for lazyloading images.\n# For more information: https://apoorv.pro/lozad.js/demo/\nlazyload: false\n```\n\n\n\n# 20.主题及标题栏背景图\n\n> 首先主题配置文件取消注释\n\n```yaml\ncustom_file_path:\n  style: source/_data/styles.styl\n```\n\n\n\n> 在路径`~/hexo_blog/source/_data`创建/修改 styles.styl文件，并添加以下内容\n\n参考链接：[博客参考：bella722.github.io](https://bella722.github.io/post/4f44d92e.html)\n\n\n\n```css\n// 添加背景图片\nbody {\n      background: url(https://source.unsplash.com/random/1600x900?wallpapers);//自己喜欢的图片地址\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-attachment: fixed;\n      background-position: 50% 50%;\n}\n\n\n//首页banner渐变色\n.site-brand-container {\n    background: linear-gradient(200deg, #f58220, #f58220 );\n}\n\n// 修改主体透明度\n.main-inner{\n    background: #fff;\n    opacity: 0.95;\n}\n\n// 修改菜单栏透明度，会引起本地搜索菜单bug\n//.header-inner {\n//    opacity: 0.95;\n//}\n\n// 主页文章添加阴影效果\n.post {\n   margin-top: 60px;\n   margin-bottom: 60px;\n   padding: 25px;\n   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n}\n```\n\n\n\n## **设置所有边框为圆角**\n\n打开文件，路径：`\\themes\\next\\source\\css_variables\\Gemini.styl `，添加以下代码：\n\n```yaml\n// 修改主题页面布局为圆角\n$border-radius-inner = 15px 15px 15px 15px;\n$border-radius = 15px;\n```\n\n\n\n\n\n# 21.开启文章目录\n\n```yaml\ntoc:\n  enable: true\n  # Automatically add list number to toc.\n  number: false\n  # If true, all words will placed on next lines if header width longer then sidebar width.\n  wrap: false\n  # If true, all level of TOC in a post will be displayed, rather than the activated part of it.\n  expand_all: false\n  # Maximum heading depth of generated toc.\n  max_depth: 6\n```\n\n\n\n# 22.foot页脚设置\n\n```yaml\nfooter:\n  # Specify the year when the site was setup. If not defined, current year will be used.\n  #since: 2020\n\n  # Icon between year and copyright info.\n  icon:\n    # Icon name in Font Awesome. See: https://fontawesome.com/icons\n    name: fa fa-heart\n    # If you want to animate the icon, set it to true.\n    ## 图标的一个动画效果，类似于心跳\n    animated: true\n    # Change the color of icon, using Hex Code.\n    # 图标颜色，可格局需要自行修改\n    color: \"#ff0000\"\n\n  # If not defined, `author` from Hexo `_config.yml` will be used.\n  copyright:\n\n  # Powered by Hexo & NexT\n  # Powered by Hexo 字样，不喜欢可以设置为 false\n  powered: false\n\n  # Beian ICP and gongan information for Chinese users. See: https://beian.miit.gov.cn, http://www.beian.gov.cn\n #备案信息，如果网站有备案号，可以在这里填写备案号\n  beian:\n    enable: false\n    icp:\n    # The digit in the num of gongan beian.\n    gongan_id:\n    # The full num of gongan beian.\n    gongan_num:\n    # The icon for gongan beian. See: http://www.beian.gov.cn/portal/download\n    gongan_icon_url:\n```\n\n\n\n# 23.标签云\n\n参考地址：\n\n[hexo-tag-cloud]:https://github.com/D0n9X1n/hexo-tag-cloud\n\n[github参考](https://github.com/D0n9X1n/hexo-tag-cloud)\n\n**下载插件**\n\n```shell\nnpm install hexo-tag-cloud --save\n```\n\n\n\n**将以下代码插入到`next/layout/_macro/sidebar.swig`**\n\n```css\n{% if site.tags.length > 1 %}\n  <script type=\"text/javascript\" charset=\"utf-8\" src=\"{{ url_for('/js/tagcloud.js') }}\"></script>\n  <script type=\"text/javascript\" charset=\"utf-8\" src=\"{{ url_for('/js/tagcanvas.js') }}\"></script>\n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Tag Cloud</h3>\n    <div id=\"myCanvasContainer\" class=\"widget tagcloud\">\n      <canvas width=\"250\" height=\"250\" id=\"resCanvas\" style=\"width:100%\">\n        {{ list_tags() }}\n      </canvas>\n    </div>\n  </div>\n{% endif %}\n\n```\n\n\n\n# 24.侧边栏社交链接\n\n**修改 `themes\\next\\_config.yml `主题配置文件**\n\n```yaml\n# Social Links\n# Usage: `Key: permalink || icon`\n# Key is the link label showing to end users.\n# Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.\nsocial:\n  #GitHub: https://github.com/yourname || fab fa-github\n  #E-Mail: mailto:yourname@gmail.com || fa fa-envelope\n  #Weibo: https://weibo.com/yourname || fab fa-weibo\n  #Google: https://plus.google.com/yourname || fab fa-google\n  #Twitter: https://twitter.com/yourname || fab fa-twitter\n  #FB Page: https://www.facebook.com/yourname || fab fa-facebook\n  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow\n  #YouTube: https://youtube.com/yourname || fab fa-youtube\n  #Instagram: https://instagram.com/yourname || fab fa-instagram\n  #Skype: skype:yourname?call|chat || fab fa-skype\n  QQ: http://wpa.qq.com/msgrd?v=3&uin=此处填写qq账号&site=qq&menu=yes || fab fa-qq\n  GitHub: https://github.com/maybeYo || fab fa-github\n\nsocial_icons:\n  enable: true\n  icons_only: false\n  transition: false\n\n###设置友情链接\n# Blog rolls\nlinks_settings:\n  icon: fa fa-globe\n  title: Links\n  # Available values: block | inline\n  layout: block\n\n#设置网址\nlinks:\n  #Title: https://example.com\n```\n\n\n\n# 25.点击图片放大\n\n```yaml\n# FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.\n# For more information: https://fancyapps.com/fancybox/\nfancybox: true\n```\n\n","slug":"NEXT","published":1,"updated":"2021-12-21T03:13:24.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxjvzrn000010gu62cmm7lqz","content":"<p>NEXT 配置修改</p>\n<span id=\"more\"></span>\n<p>参考地址<br><a href=\"http://theme-next.iissnan.com/theme-settings.html#rss\">http://theme-next.iissnan.com/theme-settings.html#rss</a></p>\n<h1 id=\"1-Next主题风格\"><a href=\"#1-Next主题风格\" class=\"headerlink\" title=\"1.Next主题风格\"></a>1.Next主题风格</h1><p>Next提供了四中主题风格scheme，可以在主题配置文件_config.yml文件中进行选择</p>\n<p>分别是<code>Muse</code>、<code>Mist</code>、<code>Pisces</code>、<code>Gemini</code></p>\n<p>默认时Muse主题，我用的是Gemini主题，所以把Muse注释掉，Gemini去掉注释</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Schemes</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">scheme: Muse</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">scheme: Mist</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">scheme: Pisces</span></span><br><span class=\"line\">scheme: Gemini</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-设置菜单栏\"><a href=\"#2-设置菜单栏\" class=\"headerlink\" title=\"2.设置菜单栏\"></a>2.设置菜单栏</h1><h2 id=\"取消菜单栏注释\"><a href=\"#取消菜单栏注释\" class=\"headerlink\" title=\"取消菜单栏注释\"></a>取消菜单栏注释</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: / || fa fa-home</span><br><span class=\"line\">  about: /about/ || fa fa-user</span><br><span class=\"line\">  tags: /tags/ || fa fa-tags</span><br><span class=\"line\">  categories: /categories/ || fa fa-th</span><br><span class=\"line\">  archives: /archives/ || fa fa-archive</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">commonweal: /404/ || fa fa-heartbeat</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 tags ：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd \\hexoblog\\maybe</span><br><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2021-06-19 14:42:32</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n\n<p>*<em><strong>注意：</strong>如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 <code>comments</code> 并将值设置为 <code>false</code>，如：</em>*</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2021-06-19 14:42:32</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"3-头像修改\"><a href=\"#3-头像修改\" class=\"headerlink\" title=\"3.头像修改\"></a>3.头像修改</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avatar:</span><br><span class=\"line\">  url: /images/avatar.png</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"4-动态背景\"><a href=\"#4-动态背景\" class=\"headerlink\" title=\"4.动态背景\"></a>4.动态背景</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas_ribbon:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"5-添加顶部加载条\"><a href=\"#5-添加顶部加载条\" class=\"headerlink\" title=\"5.添加顶部加载条\"></a>5.添加顶部加载条</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nprogress:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  spinner: true</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"6-为博客加上萌萌的宠物\"><a href=\"#6-为博客加上萌萌的宠物\" class=\"headerlink\" title=\"6.为博客加上萌萌的宠物\"></a>6.为博客加上萌萌的宠物</h1><p><strong>在终端切换到你的博客的路径里，然后输入如下代码：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"7-添加搜索功能\"><a href=\"#7-添加搜索功能\" class=\"headerlink\" title=\"7.添加搜索功能\"></a>7.添加搜索功能</h1><p><strong>1、安装 hexo-generator-searchdb 插件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n<p><strong>2、打开 主题配置文件 找到Local search，将enable设置为true</strong></p>\n<h1 id=\"8-显示当然浏览进度\"><a href=\"#8-显示当然浏览进度\" class=\"headerlink\" title=\"8.显示当然浏览进度\"></a>8.显示当然浏览进度</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">back2top:</span><br><span class=\"line\">  enable: true\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> Back to top <span class=\"keyword\">in</span> sidebar.</span></span><br><span class=\"line\">  sidebar: false</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> Scroll percent label <span class=\"keyword\">in</span> b2t button.</span></span><br><span class=\"line\">  scrollpercent: true\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"9-设置已读进度条\"><a href=\"#9-设置已读进度条\" class=\"headerlink\" title=\"9.设置已读进度条\"></a>9.设置已读进度条</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Reading progress bar</span></span><br><span class=\"line\">reading_progress:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> Available values: left | right</span></span><br><span class=\"line\">  startAt: left</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> Available values: top | bottom</span></span><br><span class=\"line\">  position: top</span><br><span class=\"line\">  reversed: false</span><br><span class=\"line\">  color: &quot;#37c6c0&quot;</span><br><span class=\"line\">  height: 3px</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"10-打赏设置\"><a href=\"#10-打赏设置\" class=\"headerlink\" title=\"10.打赏设置\"></a>10.打赏设置</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reward_settings:</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> If <span class=\"literal\">true</span>, a donate button will be displayed <span class=\"keyword\">in</span> every article by default.</span></span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  animation: true</span><br><span class=\"line\">  comment: 请作者喝杯茶吧</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">comment: Buy me a coffee</span></span><br><span class=\"line\"></span><br><span class=\"line\">reward:</span><br><span class=\"line\">  wechatpay: /images/wechatpay.png</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">alipay: /images/alipay.png</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">paypal: /images/paypal.png</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">bitcoin: /images/bitcoin.png</span></span><br><span class=\"line\"> </span><br><span class=\"line\">自己获取自己的支付收款码，放置在next/source/images中</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"11-自定义博客图标\"><a href=\"#11-自定义博客图标\" class=\"headerlink\" title=\"11.自定义博客图标\"></a>11.自定义博客图标</h1><p><strong>博客网站的图标可以在iconfont等网站选择和制作图标</strong></p>\n<p><strong>文件路径：<code>\\themes\\next\\source</code>，images修改主题images下文件替换</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">favicon:</span><br><span class=\"line\">  small: /images/favicon-16x16-next.png</span><br><span class=\"line\">  medium: /images/favicon-32x32-next.png</span><br><span class=\"line\">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class=\"line\">  safari_pinned_tab: /images/logo.svg</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">android_manifest: /manifest.json</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"12-开启站点阅读时间\"><a href=\"#12-开启站点阅读时间\" class=\"headerlink\" title=\"12.开启站点阅读时间\"></a>12.开启站点阅读时间</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-word-counter</span></span><br><span class=\"line\"><span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">separated_meta:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">item_text_total:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"12-1-页面阅读统计-不蒜子统计\"><a href=\"#12-1-页面阅读统计-不蒜子统计\" class=\"headerlink\" title=\"12.1 页面阅读统计 不蒜子统计\"></a>12.1 页面阅读统计 不蒜子统计</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi_count:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span>              \t   <span class=\"comment\"># 设true 开启</span></span><br><span class=\"line\">  <span class=\"attr\">total_visitors:</span> <span class=\"literal\">true</span>      \t   <span class=\"comment\"># 总阅读人数（uv数）</span></span><br><span class=\"line\">  <span class=\"attr\">total_visitors_icon:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span>  <span class=\"comment\"># 阅读总人数的图标</span></span><br><span class=\"line\">  <span class=\"attr\">total_views:</span> <span class=\"literal\">true</span>         \t   <span class=\"comment\"># 总阅读次数（pv数）</span></span><br><span class=\"line\">  <span class=\"attr\">total_views_icon:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-eye</span>      <span class=\"comment\"># 阅读总次数的图标</span></span><br><span class=\"line\">  <span class=\"attr\">post_views:</span> <span class=\"literal\">true</span>         \t\t   <span class=\"comment\"># 开启内容阅读次数</span></span><br><span class=\"line\">  <span class=\"attr\">post_views_icon:</span> <span class=\"string\">far</span> <span class=\"string\">fa-eye</span>      <span class=\"comment\"># 内容页阅读数的图标</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"13-文章原创声明\"><a href=\"#13-文章原创声明\" class=\"headerlink\" title=\"13.文章原创声明\"></a>13.文章原创声明</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Creative Commons 4.0 International License.</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://creativecommons.org/about/cclicenses/</span></span><br><span class=\"line\"><span class=\"attr\">creative_commons:</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero</span></span><br><span class=\"line\">  <span class=\"attr\">license:</span> <span class=\"string\">by-nc-sa</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: big | small</span></span><br><span class=\"line\">  <span class=\"attr\">size:</span> <span class=\"string\">small</span></span><br><span class=\"line\">  <span class=\"attr\">sidebar:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">post:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class=\"line\">  <span class=\"comment\"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"14-修改底部标签样式\"><a href=\"#14-修改底部标签样式\" class=\"headerlink\" title=\"14.修改底部标签样式\"></a>14.修改底部标签样式</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span></span><br><span class=\"line\"><span class=\"attr\">tag_icon:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"15-开启代码复制\"><a href=\"#15-开启代码复制\" class=\"headerlink\" title=\"15.开启代码复制\"></a>15.开启代码复制</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeblock:</span><br><span class=\"line\">  copy_button:</span><br><span class=\"line\">    enable: true</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"16-鼠标点击特效\"><a href=\"#16-鼠标点击特效\" class=\"headerlink\" title=\"16.鼠标点击特效\"></a>16.鼠标点击特效</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install next-theme/hexo-next-fireworks</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"17-GitHub-Fork-Me\"><a href=\"#17-GitHub-Fork-Me\" class=\"headerlink\" title=\"17.GitHub Fork Me\"></a>17.GitHub Fork Me</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class=\"line\"><span class=\"attr\">github_banner:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">permalink:</span> <span class=\"string\">https://github.com/maybeYo</span></span><br><span class=\"line\">  <span class=\"attr\">title:</span> <span class=\"string\">Follow</span> <span class=\"string\">me</span> <span class=\"string\">on</span> <span class=\"string\">GitHub</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"18-bookmark\"><a href=\"#18-bookmark\" class=\"headerlink\" title=\"18.bookmark\"></a>18.bookmark</h1><p>Bookmark是一个插件，允许用户保存他们的阅读进度。用户只需单击页面左上角的书签图标即可保存滚动位置。当他们下次访问您的博客时，他们可以自动恢复每个页面的最后滚动位置。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Bookmark Support</span></span><br><span class=\"line\"><span class=\"attr\">bookmark:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Customize the color of the bookmark.</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span> <span class=\"string\">&quot;#222&quot;</span></span><br><span class=\"line\">  <span class=\"comment\"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class=\"line\">  <span class=\"comment\"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class=\"line\">  <span class=\"attr\">save:</span> <span class=\"string\">auto</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"19-添加lazyload\"><a href=\"#19-添加lazyload\" class=\"headerlink\" title=\"19.添加lazyload\"></a>19.添加lazyload</h1><p>对于图片进行延迟加载，访问到图片位置时才去请求图片资源，这样可以提高博客的访问速度，节省流量。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/theme-next/theme-next-jquery-lazyload source/lib/jquery_laz</span><br></pre></td></tr></table></figure>\n\n\n\n<p>主题配置文件:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Vanilla JavaScript plugin for lazyloading images.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information: https://apoorv.pro/lozad.js/demo/</span></span><br><span class=\"line\"><span class=\"attr\">lazyload:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"20-主题及标题栏背景图\"><a href=\"#20-主题及标题栏背景图\" class=\"headerlink\" title=\"20.主题及标题栏背景图\"></a>20.主题及标题栏背景图</h1><blockquote>\n<p>首先主题配置文件取消注释</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>在路径<code>~/hexo_blog/source/_data</code>创建/修改 styles.styl文件，并添加以下内容</p>\n</blockquote>\n<p>参考链接：<a href=\"https://bella722.github.io/post/4f44d92e.html\">博客参考：bella722.github.io</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 添加背景图片</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">https://source.unsplash.com/random/1600x900?wallpapers</span>);//自己喜欢的图片地址</span><br><span class=\"line\">      <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">      <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">      <span class=\"attribute\">background-attachment</span>: fixed;</span><br><span class=\"line\">      <span class=\"attribute\">background-position</span>: <span class=\"number\">50%</span> <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//首页banner渐变色</span><br><span class=\"line\"><span class=\"selector-class\">.site-brand-container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">200deg</span>, <span class=\"number\">#f58220</span>, <span class=\"number\">#f58220</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改主体透明度</span><br><span class=\"line\"><span class=\"selector-class\">.main-inner</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.95</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改菜单栏透明度，会引起本地搜索菜单bug</span><br><span class=\"line\">//<span class=\"selector-class\">.header-inner</span> &#123;</span><br><span class=\"line\">//    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.95</span>;</span><br><span class=\"line\">//&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 主页文章添加阴影效果</span><br><span class=\"line\"><span class=\"selector-class\">.post</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">margin-top</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">padding</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">   -webkit-<span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">203</span>, .<span class=\"number\">5</span>);</span><br><span class=\"line\">   -moz-<span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">204</span>, .<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"设置所有边框为圆角\"><a href=\"#设置所有边框为圆角\" class=\"headerlink\" title=\"设置所有边框为圆角\"></a><strong>设置所有边框为圆角</strong></h2><p>打开文件，路径：<code>\\themes\\next\\source\\css_variables\\Gemini.styl </code>，添加以下代码：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">修改主题页面布局为圆角</span></span><br><span class=\"line\"><span class=\"string\">$border-radius-inner</span> <span class=\"string\">=</span> <span class=\"string\">15px</span> <span class=\"string\">15px</span> <span class=\"string\">15px</span> <span class=\"string\">15px;</span></span><br><span class=\"line\"><span class=\"string\">$border-radius</span> <span class=\"string\">=</span> <span class=\"string\">15px;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"21-开启文章目录\"><a href=\"#21-开启文章目录\" class=\"headerlink\" title=\"21.开启文章目录\"></a>21.开启文章目录</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">toc:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Automatically add list number to toc.</span></span><br><span class=\"line\">  <span class=\"attr\">number:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class=\"line\">  <span class=\"attr\">wrap:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class=\"line\">  <span class=\"attr\">expand_all:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Maximum heading depth of generated toc.</span></span><br><span class=\"line\">  <span class=\"attr\">max_depth:</span> <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"22-foot页脚设置\"><a href=\"#22-foot页脚设置\" class=\"headerlink\" title=\"22.foot页脚设置\"></a>22.foot页脚设置</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"comment\"># Specify the year when the site was setup. If not defined, current year will be used.</span></span><br><span class=\"line\">  <span class=\"comment\">#since: 2020</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Icon between year and copyright info.</span></span><br><span class=\"line\">  <span class=\"attr\">icon:</span></span><br><span class=\"line\">    <span class=\"comment\"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-heart</span></span><br><span class=\"line\">    <span class=\"comment\"># If you want to animate the icon, set it to true.</span></span><br><span class=\"line\">    <span class=\"comment\">## 图标的一个动画效果，类似于心跳</span></span><br><span class=\"line\">    <span class=\"attr\">animated:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># Change the color of icon, using Hex Code.</span></span><br><span class=\"line\">    <span class=\"comment\"># 图标颜色，可格局需要自行修改</span></span><br><span class=\"line\">    <span class=\"attr\">color:</span> <span class=\"string\">&quot;#ff0000&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class=\"line\">  <span class=\"attr\">copyright:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Powered by Hexo &amp; NexT</span></span><br><span class=\"line\">  <span class=\"comment\"># Powered by Hexo 字样，不喜欢可以设置为 false</span></span><br><span class=\"line\">  <span class=\"attr\">powered:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Beian ICP and gongan information for Chinese users. See: https://beian.miit.gov.cn, http://www.beian.gov.cn</span></span><br><span class=\"line\"> <span class=\"comment\">#备案信息，如果网站有备案号，可以在这里填写备案号</span></span><br><span class=\"line\">  <span class=\"attr\">beian:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">icp:</span></span><br><span class=\"line\">    <span class=\"comment\"># The digit in the num of gongan beian.</span></span><br><span class=\"line\">    <span class=\"attr\">gongan_id:</span></span><br><span class=\"line\">    <span class=\"comment\"># The full num of gongan beian.</span></span><br><span class=\"line\">    <span class=\"attr\">gongan_num:</span></span><br><span class=\"line\">    <span class=\"comment\"># The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span></span><br><span class=\"line\">    <span class=\"attr\">gongan_icon_url:</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"23-标签云\"><a href=\"#23-标签云\" class=\"headerlink\" title=\"23.标签云\"></a>23.标签云</h1><p>参考地址：</p>\n<p><a href=\"https://github.com/D0n9X1n/hexo-tag-cloud\">github参考</a></p>\n<p><strong>下载插件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-tag-cloud --save</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>将以下代码插入到<code>next/layout/_macro/sidebar.swig</code></strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if site<span class=\"selector-class\">.tags</span><span class=\"selector-class\">.length</span> &gt; <span class=\"number\">1</span> %&#125;</span><br><span class=\"line\">  &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-<span class=\"number\">8</span>&quot; <span class=\"attribute\">src</span>=&quot;&#123;&#123; url_for(&#x27;/js/tagcloud<span class=\"selector-class\">.js</span>&#x27;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-<span class=\"number\">8</span>&quot; <span class=\"attribute\">src</span>=&quot;&#123;&#123; url_for(&#x27;/js/tagcanvas<span class=\"selector-class\">.js</span>&#x27;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;<span class=\"selector-tag\">div</span> class=&quot;widget-wrap&quot;&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">h3</span> class=&quot;widget-title&quot;&gt;Tag Cloud&lt;/<span class=\"selector-tag\">h3</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span> id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">canvas</span> <span class=\"attribute\">width</span>=&quot;<span class=\"number\">250</span>&quot; <span class=\"attribute\">height</span>=&quot;<span class=\"number\">250</span>&quot; id=&quot;resCanvas&quot; style=&quot;<span class=\"attribute\">width</span>:<span class=\"number\">100%</span><span class=\"string\">&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;&#123; list_tags() &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/canvas&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#123;% endif %&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"24-侧边栏社交链接\"><a href=\"#24-侧边栏社交链接\" class=\"headerlink\" title=\"24.侧边栏社交链接\"></a>24.侧边栏社交链接</h1><p><strong>修改 <code>themes\\next\\_config.yml </code>主题配置文件</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Social Links</span></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: permalink || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># Key is the link label showing to end users.</span></span><br><span class=\"line\"><span class=\"comment\"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\">  <span class=\"comment\">#GitHub: https://github.com/yourname || fab fa-github</span></span><br><span class=\"line\">  <span class=\"comment\">#E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span></span><br><span class=\"line\">  <span class=\"comment\">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class=\"line\">  <span class=\"comment\">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class=\"line\">  <span class=\"comment\">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class=\"line\">  <span class=\"comment\">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class=\"line\">  <span class=\"comment\">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class=\"line\">  <span class=\"comment\">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class=\"line\">  <span class=\"comment\">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class=\"line\">  <span class=\"comment\">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class=\"line\">  <span class=\"attr\">QQ:</span> <span class=\"string\">http://wpa.qq.com/msgrd?v=3&amp;uin=此处填写qq账号&amp;site=qq&amp;menu=yes</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-qq</span></span><br><span class=\"line\">  <span class=\"attr\">GitHub:</span> <span class=\"string\">https://github.com/maybeYo</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-github</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">social_icons:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">icons_only:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">transition:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###设置友情链接</span></span><br><span class=\"line\"><span class=\"comment\"># Blog rolls</span></span><br><span class=\"line\"><span class=\"attr\">links_settings:</span></span><br><span class=\"line\">  <span class=\"attr\">icon:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-globe</span></span><br><span class=\"line\">  <span class=\"attr\">title:</span> <span class=\"string\">Links</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: block | inline</span></span><br><span class=\"line\">  <span class=\"attr\">layout:</span> <span class=\"string\">block</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置网址</span></span><br><span class=\"line\"><span class=\"attr\">links:</span></span><br><span class=\"line\">  <span class=\"comment\">#Title: https://example.com</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"25-点击图片放大\"><a href=\"#25-点击图片放大\" class=\"headerlink\" title=\"25.点击图片放大\"></a>25.点击图片放大</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information: https://fancyapps.com/fancybox/</span></span><br><span class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"post-body-end":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n","variables":""}},"length":8052,"excerpt":"<p>NEXT 配置修改</p>","more":"<p>参考地址<br><a href=\"http://theme-next.iissnan.com/theme-settings.html#rss\">http://theme-next.iissnan.com/theme-settings.html#rss</a></p>\n<h1 id=\"1-Next主题风格\"><a href=\"#1-Next主题风格\" class=\"headerlink\" title=\"1.Next主题风格\"></a>1.Next主题风格</h1><p>Next提供了四中主题风格scheme，可以在主题配置文件_config.yml文件中进行选择</p>\n<p>分别是<code>Muse</code>、<code>Mist</code>、<code>Pisces</code>、<code>Gemini</code></p>\n<p>默认时Muse主题，我用的是Gemini主题，所以把Muse注释掉，Gemini去掉注释</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Schemes</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">scheme: Muse</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">scheme: Mist</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">scheme: Pisces</span></span><br><span class=\"line\">scheme: Gemini</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-设置菜单栏\"><a href=\"#2-设置菜单栏\" class=\"headerlink\" title=\"2.设置菜单栏\"></a>2.设置菜单栏</h1><h2 id=\"取消菜单栏注释\"><a href=\"#取消菜单栏注释\" class=\"headerlink\" title=\"取消菜单栏注释\"></a>取消菜单栏注释</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: / || fa fa-home</span><br><span class=\"line\">  about: /about/ || fa fa-user</span><br><span class=\"line\">  tags: /tags/ || fa fa-tags</span><br><span class=\"line\">  categories: /categories/ || fa fa-th</span><br><span class=\"line\">  archives: /archives/ || fa fa-archive</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">commonweal: /404/ || fa fa-heartbeat</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 tags ：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd \\hexoblog\\maybe</span><br><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2021-06-19 14:42:32</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n\n<p>*<em><strong>注意：</strong>如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 <code>comments</code> 并将值设置为 <code>false</code>，如：</em>*</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2021-06-19 14:42:32</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"3-头像修改\"><a href=\"#3-头像修改\" class=\"headerlink\" title=\"3.头像修改\"></a>3.头像修改</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avatar:</span><br><span class=\"line\">  url: /images/avatar.png</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"4-动态背景\"><a href=\"#4-动态背景\" class=\"headerlink\" title=\"4.动态背景\"></a>4.动态背景</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas_ribbon:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"5-添加顶部加载条\"><a href=\"#5-添加顶部加载条\" class=\"headerlink\" title=\"5.添加顶部加载条\"></a>5.添加顶部加载条</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nprogress:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  spinner: true</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"6-为博客加上萌萌的宠物\"><a href=\"#6-为博客加上萌萌的宠物\" class=\"headerlink\" title=\"6.为博客加上萌萌的宠物\"></a>6.为博客加上萌萌的宠物</h1><p><strong>在终端切换到你的博客的路径里，然后输入如下代码：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"7-添加搜索功能\"><a href=\"#7-添加搜索功能\" class=\"headerlink\" title=\"7.添加搜索功能\"></a>7.添加搜索功能</h1><p><strong>1、安装 hexo-generator-searchdb 插件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n<p><strong>2、打开 主题配置文件 找到Local search，将enable设置为true</strong></p>\n<h1 id=\"8-显示当然浏览进度\"><a href=\"#8-显示当然浏览进度\" class=\"headerlink\" title=\"8.显示当然浏览进度\"></a>8.显示当然浏览进度</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">back2top:</span><br><span class=\"line\">  enable: true\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> Back to top <span class=\"keyword\">in</span> sidebar.</span></span><br><span class=\"line\">  sidebar: false</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> Scroll percent label <span class=\"keyword\">in</span> b2t button.</span></span><br><span class=\"line\">  scrollpercent: true\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"9-设置已读进度条\"><a href=\"#9-设置已读进度条\" class=\"headerlink\" title=\"9.设置已读进度条\"></a>9.设置已读进度条</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Reading progress bar</span></span><br><span class=\"line\">reading_progress:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> Available values: left | right</span></span><br><span class=\"line\">  startAt: left</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> Available values: top | bottom</span></span><br><span class=\"line\">  position: top</span><br><span class=\"line\">  reversed: false</span><br><span class=\"line\">  color: &quot;#37c6c0&quot;</span><br><span class=\"line\">  height: 3px</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"10-打赏设置\"><a href=\"#10-打赏设置\" class=\"headerlink\" title=\"10.打赏设置\"></a>10.打赏设置</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reward_settings:</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> If <span class=\"literal\">true</span>, a donate button will be displayed <span class=\"keyword\">in</span> every article by default.</span></span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  animation: true</span><br><span class=\"line\">  comment: 请作者喝杯茶吧</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">comment: Buy me a coffee</span></span><br><span class=\"line\"></span><br><span class=\"line\">reward:</span><br><span class=\"line\">  wechatpay: /images/wechatpay.png</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">alipay: /images/alipay.png</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">paypal: /images/paypal.png</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">bitcoin: /images/bitcoin.png</span></span><br><span class=\"line\"> </span><br><span class=\"line\">自己获取自己的支付收款码，放置在next/source/images中</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"11-自定义博客图标\"><a href=\"#11-自定义博客图标\" class=\"headerlink\" title=\"11.自定义博客图标\"></a>11.自定义博客图标</h1><p><strong>博客网站的图标可以在iconfont等网站选择和制作图标</strong></p>\n<p><strong>文件路径：<code>\\themes\\next\\source</code>，images修改主题images下文件替换</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">favicon:</span><br><span class=\"line\">  small: /images/favicon-16x16-next.png</span><br><span class=\"line\">  medium: /images/favicon-32x32-next.png</span><br><span class=\"line\">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class=\"line\">  safari_pinned_tab: /images/logo.svg</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">android_manifest: /manifest.json</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"12-开启站点阅读时间\"><a href=\"#12-开启站点阅读时间\" class=\"headerlink\" title=\"12.开启站点阅读时间\"></a>12.开启站点阅读时间</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-word-counter</span></span><br><span class=\"line\"><span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">separated_meta:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">item_text_total:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"12-1-页面阅读统计-不蒜子统计\"><a href=\"#12-1-页面阅读统计-不蒜子统计\" class=\"headerlink\" title=\"12.1 页面阅读统计 不蒜子统计\"></a>12.1 页面阅读统计 不蒜子统计</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi_count:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span>              \t   <span class=\"comment\"># 设true 开启</span></span><br><span class=\"line\">  <span class=\"attr\">total_visitors:</span> <span class=\"literal\">true</span>      \t   <span class=\"comment\"># 总阅读人数（uv数）</span></span><br><span class=\"line\">  <span class=\"attr\">total_visitors_icon:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span>  <span class=\"comment\"># 阅读总人数的图标</span></span><br><span class=\"line\">  <span class=\"attr\">total_views:</span> <span class=\"literal\">true</span>         \t   <span class=\"comment\"># 总阅读次数（pv数）</span></span><br><span class=\"line\">  <span class=\"attr\">total_views_icon:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-eye</span>      <span class=\"comment\"># 阅读总次数的图标</span></span><br><span class=\"line\">  <span class=\"attr\">post_views:</span> <span class=\"literal\">true</span>         \t\t   <span class=\"comment\"># 开启内容阅读次数</span></span><br><span class=\"line\">  <span class=\"attr\">post_views_icon:</span> <span class=\"string\">far</span> <span class=\"string\">fa-eye</span>      <span class=\"comment\"># 内容页阅读数的图标</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"13-文章原创声明\"><a href=\"#13-文章原创声明\" class=\"headerlink\" title=\"13.文章原创声明\"></a>13.文章原创声明</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Creative Commons 4.0 International License.</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://creativecommons.org/about/cclicenses/</span></span><br><span class=\"line\"><span class=\"attr\">creative_commons:</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero</span></span><br><span class=\"line\">  <span class=\"attr\">license:</span> <span class=\"string\">by-nc-sa</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: big | small</span></span><br><span class=\"line\">  <span class=\"attr\">size:</span> <span class=\"string\">small</span></span><br><span class=\"line\">  <span class=\"attr\">sidebar:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">post:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class=\"line\">  <span class=\"comment\"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"14-修改底部标签样式\"><a href=\"#14-修改底部标签样式\" class=\"headerlink\" title=\"14.修改底部标签样式\"></a>14.修改底部标签样式</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span></span><br><span class=\"line\"><span class=\"attr\">tag_icon:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"15-开启代码复制\"><a href=\"#15-开启代码复制\" class=\"headerlink\" title=\"15.开启代码复制\"></a>15.开启代码复制</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeblock:</span><br><span class=\"line\">  copy_button:</span><br><span class=\"line\">    enable: true</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"16-鼠标点击特效\"><a href=\"#16-鼠标点击特效\" class=\"headerlink\" title=\"16.鼠标点击特效\"></a>16.鼠标点击特效</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install next-theme/hexo-next-fireworks</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"17-GitHub-Fork-Me\"><a href=\"#17-GitHub-Fork-Me\" class=\"headerlink\" title=\"17.GitHub Fork Me\"></a>17.GitHub Fork Me</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class=\"line\"><span class=\"attr\">github_banner:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">permalink:</span> <span class=\"string\">https://github.com/maybeYo</span></span><br><span class=\"line\">  <span class=\"attr\">title:</span> <span class=\"string\">Follow</span> <span class=\"string\">me</span> <span class=\"string\">on</span> <span class=\"string\">GitHub</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"18-bookmark\"><a href=\"#18-bookmark\" class=\"headerlink\" title=\"18.bookmark\"></a>18.bookmark</h1><p>Bookmark是一个插件，允许用户保存他们的阅读进度。用户只需单击页面左上角的书签图标即可保存滚动位置。当他们下次访问您的博客时，他们可以自动恢复每个页面的最后滚动位置。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Bookmark Support</span></span><br><span class=\"line\"><span class=\"attr\">bookmark:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Customize the color of the bookmark.</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span> <span class=\"string\">&quot;#222&quot;</span></span><br><span class=\"line\">  <span class=\"comment\"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class=\"line\">  <span class=\"comment\"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class=\"line\">  <span class=\"attr\">save:</span> <span class=\"string\">auto</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"19-添加lazyload\"><a href=\"#19-添加lazyload\" class=\"headerlink\" title=\"19.添加lazyload\"></a>19.添加lazyload</h1><p>对于图片进行延迟加载，访问到图片位置时才去请求图片资源，这样可以提高博客的访问速度，节省流量。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/theme-next/theme-next-jquery-lazyload source/lib/jquery_laz</span><br></pre></td></tr></table></figure>\n\n\n\n<p>主题配置文件:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Vanilla JavaScript plugin for lazyloading images.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information: https://apoorv.pro/lozad.js/demo/</span></span><br><span class=\"line\"><span class=\"attr\">lazyload:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"20-主题及标题栏背景图\"><a href=\"#20-主题及标题栏背景图\" class=\"headerlink\" title=\"20.主题及标题栏背景图\"></a>20.主题及标题栏背景图</h1><blockquote>\n<p>首先主题配置文件取消注释</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>在路径<code>~/hexo_blog/source/_data</code>创建/修改 styles.styl文件，并添加以下内容</p>\n</blockquote>\n<p>参考链接：<a href=\"https://bella722.github.io/post/4f44d92e.html\">博客参考：bella722.github.io</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 添加背景图片</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">https://source.unsplash.com/random/1600x900?wallpapers</span>);//自己喜欢的图片地址</span><br><span class=\"line\">      <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">      <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">      <span class=\"attribute\">background-attachment</span>: fixed;</span><br><span class=\"line\">      <span class=\"attribute\">background-position</span>: <span class=\"number\">50%</span> <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//首页banner渐变色</span><br><span class=\"line\"><span class=\"selector-class\">.site-brand-container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">200deg</span>, <span class=\"number\">#f58220</span>, <span class=\"number\">#f58220</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改主体透明度</span><br><span class=\"line\"><span class=\"selector-class\">.main-inner</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.95</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改菜单栏透明度，会引起本地搜索菜单bug</span><br><span class=\"line\">//<span class=\"selector-class\">.header-inner</span> &#123;</span><br><span class=\"line\">//    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.95</span>;</span><br><span class=\"line\">//&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 主页文章添加阴影效果</span><br><span class=\"line\"><span class=\"selector-class\">.post</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">margin-top</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">padding</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">   -webkit-<span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">203</span>, .<span class=\"number\">5</span>);</span><br><span class=\"line\">   -moz-<span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">204</span>, .<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"设置所有边框为圆角\"><a href=\"#设置所有边框为圆角\" class=\"headerlink\" title=\"设置所有边框为圆角\"></a><strong>设置所有边框为圆角</strong></h2><p>打开文件，路径：<code>\\themes\\next\\source\\css_variables\\Gemini.styl </code>，添加以下代码：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">修改主题页面布局为圆角</span></span><br><span class=\"line\"><span class=\"string\">$border-radius-inner</span> <span class=\"string\">=</span> <span class=\"string\">15px</span> <span class=\"string\">15px</span> <span class=\"string\">15px</span> <span class=\"string\">15px;</span></span><br><span class=\"line\"><span class=\"string\">$border-radius</span> <span class=\"string\">=</span> <span class=\"string\">15px;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"21-开启文章目录\"><a href=\"#21-开启文章目录\" class=\"headerlink\" title=\"21.开启文章目录\"></a>21.开启文章目录</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">toc:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Automatically add list number to toc.</span></span><br><span class=\"line\">  <span class=\"attr\">number:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class=\"line\">  <span class=\"attr\">wrap:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class=\"line\">  <span class=\"attr\">expand_all:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Maximum heading depth of generated toc.</span></span><br><span class=\"line\">  <span class=\"attr\">max_depth:</span> <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"22-foot页脚设置\"><a href=\"#22-foot页脚设置\" class=\"headerlink\" title=\"22.foot页脚设置\"></a>22.foot页脚设置</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"comment\"># Specify the year when the site was setup. If not defined, current year will be used.</span></span><br><span class=\"line\">  <span class=\"comment\">#since: 2020</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Icon between year and copyright info.</span></span><br><span class=\"line\">  <span class=\"attr\">icon:</span></span><br><span class=\"line\">    <span class=\"comment\"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-heart</span></span><br><span class=\"line\">    <span class=\"comment\"># If you want to animate the icon, set it to true.</span></span><br><span class=\"line\">    <span class=\"comment\">## 图标的一个动画效果，类似于心跳</span></span><br><span class=\"line\">    <span class=\"attr\">animated:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># Change the color of icon, using Hex Code.</span></span><br><span class=\"line\">    <span class=\"comment\"># 图标颜色，可格局需要自行修改</span></span><br><span class=\"line\">    <span class=\"attr\">color:</span> <span class=\"string\">&quot;#ff0000&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class=\"line\">  <span class=\"attr\">copyright:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Powered by Hexo &amp; NexT</span></span><br><span class=\"line\">  <span class=\"comment\"># Powered by Hexo 字样，不喜欢可以设置为 false</span></span><br><span class=\"line\">  <span class=\"attr\">powered:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Beian ICP and gongan information for Chinese users. See: https://beian.miit.gov.cn, http://www.beian.gov.cn</span></span><br><span class=\"line\"> <span class=\"comment\">#备案信息，如果网站有备案号，可以在这里填写备案号</span></span><br><span class=\"line\">  <span class=\"attr\">beian:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">icp:</span></span><br><span class=\"line\">    <span class=\"comment\"># The digit in the num of gongan beian.</span></span><br><span class=\"line\">    <span class=\"attr\">gongan_id:</span></span><br><span class=\"line\">    <span class=\"comment\"># The full num of gongan beian.</span></span><br><span class=\"line\">    <span class=\"attr\">gongan_num:</span></span><br><span class=\"line\">    <span class=\"comment\"># The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span></span><br><span class=\"line\">    <span class=\"attr\">gongan_icon_url:</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"23-标签云\"><a href=\"#23-标签云\" class=\"headerlink\" title=\"23.标签云\"></a>23.标签云</h1><p>参考地址：</p>\n<p><a href=\"https://github.com/D0n9X1n/hexo-tag-cloud\">github参考</a></p>\n<p><strong>下载插件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-tag-cloud --save</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>将以下代码插入到<code>next/layout/_macro/sidebar.swig</code></strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if site<span class=\"selector-class\">.tags</span><span class=\"selector-class\">.length</span> &gt; <span class=\"number\">1</span> %&#125;</span><br><span class=\"line\">  &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-<span class=\"number\">8</span>&quot; <span class=\"attribute\">src</span>=&quot;&#123;&#123; url_for(&#x27;/js/tagcloud<span class=\"selector-class\">.js</span>&#x27;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-<span class=\"number\">8</span>&quot; <span class=\"attribute\">src</span>=&quot;&#123;&#123; url_for(&#x27;/js/tagcanvas<span class=\"selector-class\">.js</span>&#x27;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;<span class=\"selector-tag\">div</span> class=&quot;widget-wrap&quot;&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">h3</span> class=&quot;widget-title&quot;&gt;Tag Cloud&lt;/<span class=\"selector-tag\">h3</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span> id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt;</span><br><span class=\"line\">      &lt;<span class=\"selector-tag\">canvas</span> <span class=\"attribute\">width</span>=&quot;<span class=\"number\">250</span>&quot; <span class=\"attribute\">height</span>=&quot;<span class=\"number\">250</span>&quot; id=&quot;resCanvas&quot; style=&quot;<span class=\"attribute\">width</span>:<span class=\"number\">100%</span><span class=\"string\">&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;&#123; list_tags() &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/canvas&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#123;% endif %&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"24-侧边栏社交链接\"><a href=\"#24-侧边栏社交链接\" class=\"headerlink\" title=\"24.侧边栏社交链接\"></a>24.侧边栏社交链接</h1><p><strong>修改 <code>themes\\next\\_config.yml </code>主题配置文件</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Social Links</span></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: permalink || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># Key is the link label showing to end users.</span></span><br><span class=\"line\"><span class=\"comment\"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\">  <span class=\"comment\">#GitHub: https://github.com/yourname || fab fa-github</span></span><br><span class=\"line\">  <span class=\"comment\">#E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span></span><br><span class=\"line\">  <span class=\"comment\">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class=\"line\">  <span class=\"comment\">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class=\"line\">  <span class=\"comment\">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class=\"line\">  <span class=\"comment\">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class=\"line\">  <span class=\"comment\">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class=\"line\">  <span class=\"comment\">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class=\"line\">  <span class=\"comment\">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class=\"line\">  <span class=\"comment\">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class=\"line\">  <span class=\"attr\">QQ:</span> <span class=\"string\">http://wpa.qq.com/msgrd?v=3&amp;uin=此处填写qq账号&amp;site=qq&amp;menu=yes</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-qq</span></span><br><span class=\"line\">  <span class=\"attr\">GitHub:</span> <span class=\"string\">https://github.com/maybeYo</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-github</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">social_icons:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">icons_only:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">transition:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###设置友情链接</span></span><br><span class=\"line\"><span class=\"comment\"># Blog rolls</span></span><br><span class=\"line\"><span class=\"attr\">links_settings:</span></span><br><span class=\"line\">  <span class=\"attr\">icon:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-globe</span></span><br><span class=\"line\">  <span class=\"attr\">title:</span> <span class=\"string\">Links</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: block | inline</span></span><br><span class=\"line\">  <span class=\"attr\">layout:</span> <span class=\"string\">block</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置网址</span></span><br><span class=\"line\"><span class=\"attr\">links:</span></span><br><span class=\"line\">  <span class=\"comment\">#Title: https://example.com</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"25-点击图片放大\"><a href=\"#25-点击图片放大\" class=\"headerlink\" title=\"25.点击图片放大\"></a>25.点击图片放大</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information: https://fancyapps.com/fancybox/</span></span><br><span class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>"},{"title":"NEXT-SEO","date":"2021-07-16T09:18:18.000Z","_content":"\nNEXT-SEO\n\n<!--more-->\n\n\n\n参考链接：[百度链接：jingyan.baidu.com](https://jingyan.baidu.com/article/a3761b2bf716631576f9aa3a.html)\n\n参考链接：[博客链接：www.himmy.cn](https://www.himmy.cn/2019/07/06/hexo%E5%8D%9A%E5%AE%A2%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/)\n\n### 链接提交给百度\n\n在百度中搜索自己博客的域名，如：[mabeyo.github.io](https://maybeyo.github.io//)，或者[site:mabeyo.github.io](https://maybeyo.github.io/)，如果百度找不到该博客的相关信息就说明你的博客地址还未被百度收录，会有如下提示，按提示点击提交网站到相关页面就可以提交我们的博客地址\n\n\n\n- 没有找到该URL。您可以直接访问 [mabeyo.github.io](https://maybeyo.github.io/)，还可[提交网址](https://ziyuan.baidu.com/linksubmit/url)给我们。\n\n\n\n### 添加网站及验证所有权\n\n登录百度搜索资源平台，然后进入[站点管理](https://ziyuan.baidu.com/site)页面，点击添加网站按钮添加我们的博客\n\n- 第一步：输入网站地址，如 [mabeyo.github.io](https://maybeyo.github.io//)\n- 第二步：选择站点属性，最多可选三项，如影视动漫、信息技术等\n- 第三步：验证网站，就是验证网站的所有权，说明该网站是我们的，这是重点，下面详细说明\n\n验证网站有三种方式：文件验证、HTML标签验证、CNAME验证\n\n\n\n**文件验证**\n\n为保持验证通过的状态,成功验证后请不要删除HTML文件\n\n此处用的HTML标签验证\n\n在next主题配置文件中`\\themes\\next\\layout\\_partials\\head\\head.njk`粘贴验证标签\n\n```css\n{%- if theme.baidu_site_verification %}\n    <meta name=\"baidu-site-verification\" content=\"code-Z5xxxxx\" />\n{%- endif %}\n```\n\n\n\n在next主题配置文件`\\themes\\next\\_config.yaml`中修改\n\n```yaml\n# Baidu Webmaster tools verification.\n# See: https://ziyuan.baidu.com/site\nbaidu_site_verification: Z5sxxxxxx\n```\n\n\n\n\n\n重新部署\n\n```shell\nhexo clean all\nhexo g\nhexo d\n```\n\n\n\n访问是否添加成功 [view-source:https://maybeyo.github.io/](view-source:https://maybeyo.github.io/)\n\n完成验证\n\n\n\n### 链接提交：sitemap\n\n安装sitemap生成器插件\n\n```shell\nnpm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save\n```\n\n\n\n重新generate，会在public目录下生成`sitemap.xml`、`baidusitemap.xml`两个文件\n\nsitemap.xml文件内容\n\n\n\n重新部署\n\n```shell\nhexo clean all\nhexo g\nhexo d\n```\n\n\n\n最后在自动提交->sitemap页面填入sitemap的地址\n\n```css\nmaybeyo.github.io/sitemap.xml\nmaybeyo.github.io/baidusitemap.xml\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/NEXT-SEO.md","raw":"---\ntitle: NEXT-SEO\ndate: 2021-07-16 17:18:18\ntags: \n  - NEXT\ncategories: \n  - NEXT\n---\n\nNEXT-SEO\n\n<!--more-->\n\n\n\n参考链接：[百度链接：jingyan.baidu.com](https://jingyan.baidu.com/article/a3761b2bf716631576f9aa3a.html)\n\n参考链接：[博客链接：www.himmy.cn](https://www.himmy.cn/2019/07/06/hexo%E5%8D%9A%E5%AE%A2%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/)\n\n### 链接提交给百度\n\n在百度中搜索自己博客的域名，如：[mabeyo.github.io](https://maybeyo.github.io//)，或者[site:mabeyo.github.io](https://maybeyo.github.io/)，如果百度找不到该博客的相关信息就说明你的博客地址还未被百度收录，会有如下提示，按提示点击提交网站到相关页面就可以提交我们的博客地址\n\n\n\n- 没有找到该URL。您可以直接访问 [mabeyo.github.io](https://maybeyo.github.io/)，还可[提交网址](https://ziyuan.baidu.com/linksubmit/url)给我们。\n\n\n\n### 添加网站及验证所有权\n\n登录百度搜索资源平台，然后进入[站点管理](https://ziyuan.baidu.com/site)页面，点击添加网站按钮添加我们的博客\n\n- 第一步：输入网站地址，如 [mabeyo.github.io](https://maybeyo.github.io//)\n- 第二步：选择站点属性，最多可选三项，如影视动漫、信息技术等\n- 第三步：验证网站，就是验证网站的所有权，说明该网站是我们的，这是重点，下面详细说明\n\n验证网站有三种方式：文件验证、HTML标签验证、CNAME验证\n\n\n\n**文件验证**\n\n为保持验证通过的状态,成功验证后请不要删除HTML文件\n\n此处用的HTML标签验证\n\n在next主题配置文件中`\\themes\\next\\layout\\_partials\\head\\head.njk`粘贴验证标签\n\n```css\n{%- if theme.baidu_site_verification %}\n    <meta name=\"baidu-site-verification\" content=\"code-Z5xxxxx\" />\n{%- endif %}\n```\n\n\n\n在next主题配置文件`\\themes\\next\\_config.yaml`中修改\n\n```yaml\n# Baidu Webmaster tools verification.\n# See: https://ziyuan.baidu.com/site\nbaidu_site_verification: Z5sxxxxxx\n```\n\n\n\n\n\n重新部署\n\n```shell\nhexo clean all\nhexo g\nhexo d\n```\n\n\n\n访问是否添加成功 [view-source:https://maybeyo.github.io/](view-source:https://maybeyo.github.io/)\n\n完成验证\n\n\n\n### 链接提交：sitemap\n\n安装sitemap生成器插件\n\n```shell\nnpm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save\n```\n\n\n\n重新generate，会在public目录下生成`sitemap.xml`、`baidusitemap.xml`两个文件\n\nsitemap.xml文件内容\n\n\n\n重新部署\n\n```shell\nhexo clean all\nhexo g\nhexo d\n```\n\n\n\n最后在自动提交->sitemap页面填入sitemap的地址\n\n```css\nmaybeyo.github.io/sitemap.xml\nmaybeyo.github.io/baidusitemap.xml\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"NEXT-SEO","published":1,"updated":"2021-08-02T08:43:42.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxjvzrn400030gu6eqzb74gl","content":"<p>NEXT-SEO</p>\n<span id=\"more\"></span>\n\n\n\n<p>参考链接：<a href=\"https://jingyan.baidu.com/article/a3761b2bf716631576f9aa3a.html\">百度链接：jingyan.baidu.com</a></p>\n<p>参考链接：<a href=\"https://www.himmy.cn/2019/07/06/hexo%E5%8D%9A%E5%AE%A2%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/\">博客链接：www.himmy.cn</a></p>\n<h3 id=\"链接提交给百度\"><a href=\"#链接提交给百度\" class=\"headerlink\" title=\"链接提交给百度\"></a>链接提交给百度</h3><p>在百度中搜索自己博客的域名，如：<a href=\"https://maybeyo.github.io//\">mabeyo.github.io</a>，或者<a href=\"https://maybeyo.github.io/\">site:mabeyo.github.io</a>，如果百度找不到该博客的相关信息就说明你的博客地址还未被百度收录，会有如下提示，按提示点击提交网站到相关页面就可以提交我们的博客地址</p>\n<ul>\n<li>没有找到该URL。您可以直接访问 <a href=\"https://maybeyo.github.io/\">mabeyo.github.io</a>，还可<a href=\"https://ziyuan.baidu.com/linksubmit/url\">提交网址</a>给我们。</li>\n</ul>\n<h3 id=\"添加网站及验证所有权\"><a href=\"#添加网站及验证所有权\" class=\"headerlink\" title=\"添加网站及验证所有权\"></a>添加网站及验证所有权</h3><p>登录百度搜索资源平台，然后进入<a href=\"https://ziyuan.baidu.com/site\">站点管理</a>页面，点击添加网站按钮添加我们的博客</p>\n<ul>\n<li>第一步：输入网站地址，如 <a href=\"https://maybeyo.github.io//\">mabeyo.github.io</a></li>\n<li>第二步：选择站点属性，最多可选三项，如影视动漫、信息技术等</li>\n<li>第三步：验证网站，就是验证网站的所有权，说明该网站是我们的，这是重点，下面详细说明</li>\n</ul>\n<p>验证网站有三种方式：文件验证、HTML标签验证、CNAME验证</p>\n<p><strong>文件验证</strong></p>\n<p>为保持验证通过的状态,成功验证后请不要删除HTML文件</p>\n<p>此处用的HTML标签验证</p>\n<p>在next主题配置文件中<code>\\themes\\next\\layout\\_partials\\head\\head.njk</code>粘贴验证标签</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%- if theme<span class=\"selector-class\">.baidu_site_verification</span> %&#125;</span><br><span class=\"line\">    &lt;meta name=&quot;baidu-site-verification&quot; <span class=\"attribute\">content</span>=&quot;<span class=\"selector-tag\">code</span>-Z5xxxxx&quot; /&gt;</span><br><span class=\"line\">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在next主题配置文件<code>\\themes\\next\\_config.yaml</code>中修改</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Baidu Webmaster tools verification.</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://ziyuan.baidu.com/site</span></span><br><span class=\"line\"><span class=\"attr\">baidu_site_verification:</span> <span class=\"string\">Z5sxxxxxx</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>重新部署</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean all</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n\n\n<p>访问是否添加成功 <a href=\"view-source:https://maybeyo.github.io/\">view-source:https://maybeyo.github.io/</a></p>\n<p>完成验证</p>\n<h3 id=\"链接提交：sitemap\"><a href=\"#链接提交：sitemap\" class=\"headerlink\" title=\"链接提交：sitemap\"></a>链接提交：sitemap</h3><p>安装sitemap生成器插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n\n\n\n<p>重新generate，会在public目录下生成<code>sitemap.xml</code>、<code>baidusitemap.xml</code>两个文件</p>\n<p>sitemap.xml文件内容</p>\n<p>重新部署</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean all</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n\n\n<p>最后在自动提交-&gt;sitemap页面填入sitemap的地址</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maybeyo<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span>/sitemap<span class=\"selector-class\">.xml</span></span><br><span class=\"line\">maybeyo<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span>/baidusitemap<span class=\"selector-class\">.xml</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{"post-body-end":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n","variables":""}},"length":1192,"excerpt":"<p>NEXT-SEO</p>","more":"<p>参考链接：<a href=\"https://jingyan.baidu.com/article/a3761b2bf716631576f9aa3a.html\">百度链接：jingyan.baidu.com</a></p>\n<p>参考链接：<a href=\"https://www.himmy.cn/2019/07/06/hexo%E5%8D%9A%E5%AE%A2%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/\">博客链接：www.himmy.cn</a></p>\n<h3 id=\"链接提交给百度\"><a href=\"#链接提交给百度\" class=\"headerlink\" title=\"链接提交给百度\"></a>链接提交给百度</h3><p>在百度中搜索自己博客的域名，如：<a href=\"https://maybeyo.github.io//\">mabeyo.github.io</a>，或者<a href=\"https://maybeyo.github.io/\">site:mabeyo.github.io</a>，如果百度找不到该博客的相关信息就说明你的博客地址还未被百度收录，会有如下提示，按提示点击提交网站到相关页面就可以提交我们的博客地址</p>\n<ul>\n<li>没有找到该URL。您可以直接访问 <a href=\"https://maybeyo.github.io/\">mabeyo.github.io</a>，还可<a href=\"https://ziyuan.baidu.com/linksubmit/url\">提交网址</a>给我们。</li>\n</ul>\n<h3 id=\"添加网站及验证所有权\"><a href=\"#添加网站及验证所有权\" class=\"headerlink\" title=\"添加网站及验证所有权\"></a>添加网站及验证所有权</h3><p>登录百度搜索资源平台，然后进入<a href=\"https://ziyuan.baidu.com/site\">站点管理</a>页面，点击添加网站按钮添加我们的博客</p>\n<ul>\n<li>第一步：输入网站地址，如 <a href=\"https://maybeyo.github.io//\">mabeyo.github.io</a></li>\n<li>第二步：选择站点属性，最多可选三项，如影视动漫、信息技术等</li>\n<li>第三步：验证网站，就是验证网站的所有权，说明该网站是我们的，这是重点，下面详细说明</li>\n</ul>\n<p>验证网站有三种方式：文件验证、HTML标签验证、CNAME验证</p>\n<p><strong>文件验证</strong></p>\n<p>为保持验证通过的状态,成功验证后请不要删除HTML文件</p>\n<p>此处用的HTML标签验证</p>\n<p>在next主题配置文件中<code>\\themes\\next\\layout\\_partials\\head\\head.njk</code>粘贴验证标签</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%- if theme<span class=\"selector-class\">.baidu_site_verification</span> %&#125;</span><br><span class=\"line\">    &lt;meta name=&quot;baidu-site-verification&quot; <span class=\"attribute\">content</span>=&quot;<span class=\"selector-tag\">code</span>-Z5xxxxx&quot; /&gt;</span><br><span class=\"line\">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在next主题配置文件<code>\\themes\\next\\_config.yaml</code>中修改</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Baidu Webmaster tools verification.</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://ziyuan.baidu.com/site</span></span><br><span class=\"line\"><span class=\"attr\">baidu_site_verification:</span> <span class=\"string\">Z5sxxxxxx</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>重新部署</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean all</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n\n\n<p>访问是否添加成功 <a href=\"view-source:https://maybeyo.github.io/\">view-source:https://maybeyo.github.io/</a></p>\n<p>完成验证</p>\n<h3 id=\"链接提交：sitemap\"><a href=\"#链接提交：sitemap\" class=\"headerlink\" title=\"链接提交：sitemap\"></a>链接提交：sitemap</h3><p>安装sitemap生成器插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n\n\n\n<p>重新generate，会在public目录下生成<code>sitemap.xml</code>、<code>baidusitemap.xml</code>两个文件</p>\n<p>sitemap.xml文件内容</p>\n<p>重新部署</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean all</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n\n\n<p>最后在自动提交-&gt;sitemap页面填入sitemap的地址</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maybeyo<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span>/sitemap<span class=\"selector-class\">.xml</span></span><br><span class=\"line\">maybeyo<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span>/baidusitemap<span class=\"selector-class\">.xml</span></span><br></pre></td></tr></table></figure>"},{"title":"activemq","date":"2021-07-28T09:34:30.000Z","_content":"\nactivemq配置文件\n\n<!--more-->\n\n​\t在使用ActiveMQ的时候，一般会对其分配用户和角色来做基本的权限验证，本博文选择自带的JAAS Plugin来完成。本文中ActiveMQ版本选择5.16.0\n\n​\t在LINUX上下载解压完ActiveMQ之后进入到conf目录下，其中有四个文件需要特别关注：\n\n- login.config  - 登录配置\n- users.properties - 用户密码配置\n- groups.properties - 用户组配置\n- activemq.xml - ActiveMQ实例配置\n\n# login.config\n\n```shell\nactivemq {\n    org.apache.activemq.jaas.PropertiesLoginModule required\n        org.apache.activemq.jaas.properties.user=\"users.properties\"\n        org.apache.activemq.jaas.properties.group=\"groups.properties\"\n\treload=true;\n};\n```\n\n---\n\n​\t在没有设置`java.security.auth.login.config`属性时，会默认读取这个文件作为配置；可以看到该文件中，先是定义了一个节点名`activemq`，第二行表示使用的是`PropertiesLoginModule`来获取认证信息（其他的方式请参考官网），顾名思义就是从配置文件中读取，所以下面就配置了使用`users.properties`文件作为用户密码配置，使用`groups.properties`文件作为用户组配置。默认在当前文件同一目录中查找这两个文件。`reload=true`，表示可以在运行过程中更改`users.properties`，`groups.properties`文件内容，并动态刷新；**不要忘了最后的** `\";\"`。\n\n---\n\n\n\n# users.properties\n\n```shell\n## username = password\nadmin=admin\nwuser=wuser\nruser=ruser\n```\n\n在该文件中定义用户，格式：用户名=密码；\n\n# groups.properties\n\n```shell\n## rolename = username1,username2\nadmins=admin\nwrites=wuser\nreads=ruser\n```\n\n在该文件中定义角色，格式：角色名=用户1，用户2...\n\n\n\n# activemq.xml\n\n```shell\n    <persistenceAdapter>\n        <kahaDB directory=\"${activemq.data}/kahadb\"/>\n    </persistenceAdapter>\n \n\t<plugins>\n \n\t<!--  use JAAS to authenticate using the login.config file on the classpath to configure JAAS -->\n\t\t<jaasAuthenticationPlugin configuration=\"activemq\" />\n\t<!--  lets configure a destination based authorization mechanism -->\n\t\t<authorizationPlugin>\n\t\t   <map>\n\t\t\t<authorizationMap>\n\t\t\t\t<authorizationEntries>\n\t\t\t\t\t<authorizationEntry topic=\">\" read=\"reads,writes\" write=\"writes\" admin=\"writes,admins\" />\n\t\t\t\t\t<authorizationEntry queue=\">\" read=\"reads,writes\" write=\"writes\" admin=\"writes,admins\" />\n\t\t\t\t\t<authorizationEntry topic=\"ActiveMQ.Advisory.>\" read=\"reads,writes,admins\" write=\"reads,writes,admins\" admin=\"reads,writes,admins\"/>\n\t\t\t\t\t<authorizationEntry queue=\"ActiveMQ.Advisory.>\" read=\"reads,writes,admins\" write=\"reads,writes,admins\" admin=\"reads,writes,admins\"/>\n\t\t\t\t</authorizationEntries>\n\t\t\t</authorizationMap>\n\t\t   </map>\n\t\t</authorizationPlugin>\n\t</plugins>\n```\n\n---\n\n​\t主要是`plugins`节点，将其放置在persistenceAdapter节点下面，用于配置权限映射。\n\n​\t其中`jaasAuthenticationPlugin`的`configuration`属性必须要在`login.config`文件中存在，上面介绍`login.config`文件时，定义了一个`activemq`的节点，所以此处同样需要设置为`activemq`。\n\n​\t下面的authorizationEntry节点中\n\n---\n\n## queue/topic\n\n​\t代表权限是作用在queue还是topic上，其值是一个通配符表达式，通配符表达式如下，用于匹配queue/topic的名字。\n\n| .    | 分隔符;分隔名字,*,> |\n| ---- | ------------------- |\n| *    | 匹配任何字符        |\n| >    | 任何字符直到末尾    |\n\n例如:\n\n​\t仅单个\">\" 和单个\"*\"都表示匹配全部\n\n​\t\"PREFIX.>\"或\"PREFIX.*\"都表示以PREFIX开头的中间以\".\"分隔；可以匹配： PREFIX , PREFIX.1 , PREFIX.1.2 ；无法匹配： PREFIX1\n\n​\t\"PREFIX.*.SUFFIX\"表示以PREFIX开头，以SUFFIX结尾；可以匹配：PREFIX.1.SUFFIX；无法匹配：PREFIX.1.2.SUFFIX，PREFIX.1.SUFFIX.2\n\n​\t注意，如果要使用\">\"，那么一定要将其放在表达式的最后。具体信息可以访问[官网](https://activemq.apache.org/wildcards)。\n\n\n\n## read/write/admin\n\n| 属性  | 描述                 |\n| ----- | -------------------- |\n| read  | 查看和消费目的地数据 |\n| write | 往目的地发送数据     |\n| admin | 创建目的地           |\n\n\n​\tread/write/admin 其值是角色名，多个使用\",\"分隔，角色名在groups.properties文件中配置。**注意：如果目的地还没创建出来的话，拥有write权限的角色是无法往该目的地发送数据的。**\n\n---\n\n​\t以上，就是ActiveMQ的权限验证配置。如果是配置ActiveMQ WEB端的权限，则需要在jetty.xml 和 jetty-realm.xml中进行配置\n\n\n\n## 1. jetty.xml 配置 ActiveMQ 的web Console 控制台端口:\n\n在`jetty.xml`文件中:\n\n```shell\n<bean id=\"jettyPort\" class=\"org.apache.activemq.web.WebConsolePort\" init-method=\"start\">\n             <!-- the default port number for the web console -->\n        <property name=\"host\" value=\"0.0.0.0\"/>\n        <property name=\"port\" value=\"8161\"/></bean>\n```\n\n\n\n## 2. jetty-realm.properties ActiveMQ 的 web Console 控制台用户名密码配置:\n\n当登录 http://localhost:8161 进入管理界面时,输入用户名密码配置在文件`jetty-realm.properties`中,添加一个用户为\"aries\"密码为\"123\"的管理员如下:\n\n```shell\n# Defines users that can access the web (console, demo, etc.)\n# username: password [,rolename ...]\nadmin: admin, admin\nuser: user, user\naries: 123, admin\n```\n\n---\n\n第一列为用户名,第二列是密码,第三列表示角色。\n\n---\n\n\n\n## 3.设置MQ的持久化方式:\n\nActiveMQ 默认使用 `KaHadb` 进行持久化消息存储, 配置在 `ActiveMQ.xml` 文件中:\n\n```shell\n<persistenceAdapter>\n            <kahaDB directory=\"${activemq.data}/kahadb\"/>\n</persistenceAdapter>\n```\n\n\n\n 现在我们将持久化存储方式修改为 `mysql` ,则修改上面的配置文件如下:\n\n```shell\n<persistenceAdapter>\n\n         <jdbcPersistenceAdapter  dataSource=\"#derby-ds\"/>\n\n</persistenceAdapter>\n```\n\n\n\n同时添加`mysq数据源`的配置:\n\n```shell\n<bean id=\"derby-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n　　<property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\n　　<property name=\"url\" value=\"jdbc:mysql://localhost:3306/activemq?relaxAutoCommit=true\"/>\n　　<property name=\"username\" value=\"root\"/>\n　　<property name=\"password\" value=\"123\"/>\n　　<property name=\"maxActive\" value=\"200\"/>\n　　<property name=\"poolPreparedStatements\" value=\"true\"/>\n</bean>\n```\n\n\n\n添加mysql驱动等依赖包到ActiveMQ的lib目录下:\n\n- mysql-connector-[Java](http://lib.csdn.net/base/javase)-5.1.30-bin.jar\n\n- commons-dbcp-1.4.jar\n- commons-pool-1.6.jar\n\n\n\n​\t在 mysql 中创建  activemq  数据库,然后启动 ActiveMQ，如果数据test库中生成 `activemq_acks`，`activemq_lock`，`activemq_msgs`三张表,则证明mysql持久化存储配置完成。\n\n### 3.配置消息接收发送顺序按照优先级进行:\n\n​\t在发送消息的时候我们可以设置消息的优先级,来确定消息的接收顺序(对于单个MQ来说,如果是集群就不能确定优先级顺序了),优先级的使用需要在ActiveMQ.xml配置文件中进行开启:\n\n```shell\n <policyEntry queue=\">\"  prioritizedMessages=\"true\" />  \n```\n\n\n\n参考连接：[CSDN    https://blog.csdn.net](https://blog.csdn.net/qq_38167579/article/details/115530052)\n\n","source":"_posts/activemq.md","raw":"---\ntitle: activemq\ndate: 2021-07-28 17:34:30\ntags: \n  - Linux \n  - activemq\ncategories: \n  - Linux\n---\n\nactivemq配置文件\n\n<!--more-->\n\n​\t在使用ActiveMQ的时候，一般会对其分配用户和角色来做基本的权限验证，本博文选择自带的JAAS Plugin来完成。本文中ActiveMQ版本选择5.16.0\n\n​\t在LINUX上下载解压完ActiveMQ之后进入到conf目录下，其中有四个文件需要特别关注：\n\n- login.config  - 登录配置\n- users.properties - 用户密码配置\n- groups.properties - 用户组配置\n- activemq.xml - ActiveMQ实例配置\n\n# login.config\n\n```shell\nactivemq {\n    org.apache.activemq.jaas.PropertiesLoginModule required\n        org.apache.activemq.jaas.properties.user=\"users.properties\"\n        org.apache.activemq.jaas.properties.group=\"groups.properties\"\n\treload=true;\n};\n```\n\n---\n\n​\t在没有设置`java.security.auth.login.config`属性时，会默认读取这个文件作为配置；可以看到该文件中，先是定义了一个节点名`activemq`，第二行表示使用的是`PropertiesLoginModule`来获取认证信息（其他的方式请参考官网），顾名思义就是从配置文件中读取，所以下面就配置了使用`users.properties`文件作为用户密码配置，使用`groups.properties`文件作为用户组配置。默认在当前文件同一目录中查找这两个文件。`reload=true`，表示可以在运行过程中更改`users.properties`，`groups.properties`文件内容，并动态刷新；**不要忘了最后的** `\";\"`。\n\n---\n\n\n\n# users.properties\n\n```shell\n## username = password\nadmin=admin\nwuser=wuser\nruser=ruser\n```\n\n在该文件中定义用户，格式：用户名=密码；\n\n# groups.properties\n\n```shell\n## rolename = username1,username2\nadmins=admin\nwrites=wuser\nreads=ruser\n```\n\n在该文件中定义角色，格式：角色名=用户1，用户2...\n\n\n\n# activemq.xml\n\n```shell\n    <persistenceAdapter>\n        <kahaDB directory=\"${activemq.data}/kahadb\"/>\n    </persistenceAdapter>\n \n\t<plugins>\n \n\t<!--  use JAAS to authenticate using the login.config file on the classpath to configure JAAS -->\n\t\t<jaasAuthenticationPlugin configuration=\"activemq\" />\n\t<!--  lets configure a destination based authorization mechanism -->\n\t\t<authorizationPlugin>\n\t\t   <map>\n\t\t\t<authorizationMap>\n\t\t\t\t<authorizationEntries>\n\t\t\t\t\t<authorizationEntry topic=\">\" read=\"reads,writes\" write=\"writes\" admin=\"writes,admins\" />\n\t\t\t\t\t<authorizationEntry queue=\">\" read=\"reads,writes\" write=\"writes\" admin=\"writes,admins\" />\n\t\t\t\t\t<authorizationEntry topic=\"ActiveMQ.Advisory.>\" read=\"reads,writes,admins\" write=\"reads,writes,admins\" admin=\"reads,writes,admins\"/>\n\t\t\t\t\t<authorizationEntry queue=\"ActiveMQ.Advisory.>\" read=\"reads,writes,admins\" write=\"reads,writes,admins\" admin=\"reads,writes,admins\"/>\n\t\t\t\t</authorizationEntries>\n\t\t\t</authorizationMap>\n\t\t   </map>\n\t\t</authorizationPlugin>\n\t</plugins>\n```\n\n---\n\n​\t主要是`plugins`节点，将其放置在persistenceAdapter节点下面，用于配置权限映射。\n\n​\t其中`jaasAuthenticationPlugin`的`configuration`属性必须要在`login.config`文件中存在，上面介绍`login.config`文件时，定义了一个`activemq`的节点，所以此处同样需要设置为`activemq`。\n\n​\t下面的authorizationEntry节点中\n\n---\n\n## queue/topic\n\n​\t代表权限是作用在queue还是topic上，其值是一个通配符表达式，通配符表达式如下，用于匹配queue/topic的名字。\n\n| .    | 分隔符;分隔名字,*,> |\n| ---- | ------------------- |\n| *    | 匹配任何字符        |\n| >    | 任何字符直到末尾    |\n\n例如:\n\n​\t仅单个\">\" 和单个\"*\"都表示匹配全部\n\n​\t\"PREFIX.>\"或\"PREFIX.*\"都表示以PREFIX开头的中间以\".\"分隔；可以匹配： PREFIX , PREFIX.1 , PREFIX.1.2 ；无法匹配： PREFIX1\n\n​\t\"PREFIX.*.SUFFIX\"表示以PREFIX开头，以SUFFIX结尾；可以匹配：PREFIX.1.SUFFIX；无法匹配：PREFIX.1.2.SUFFIX，PREFIX.1.SUFFIX.2\n\n​\t注意，如果要使用\">\"，那么一定要将其放在表达式的最后。具体信息可以访问[官网](https://activemq.apache.org/wildcards)。\n\n\n\n## read/write/admin\n\n| 属性  | 描述                 |\n| ----- | -------------------- |\n| read  | 查看和消费目的地数据 |\n| write | 往目的地发送数据     |\n| admin | 创建目的地           |\n\n\n​\tread/write/admin 其值是角色名，多个使用\",\"分隔，角色名在groups.properties文件中配置。**注意：如果目的地还没创建出来的话，拥有write权限的角色是无法往该目的地发送数据的。**\n\n---\n\n​\t以上，就是ActiveMQ的权限验证配置。如果是配置ActiveMQ WEB端的权限，则需要在jetty.xml 和 jetty-realm.xml中进行配置\n\n\n\n## 1. jetty.xml 配置 ActiveMQ 的web Console 控制台端口:\n\n在`jetty.xml`文件中:\n\n```shell\n<bean id=\"jettyPort\" class=\"org.apache.activemq.web.WebConsolePort\" init-method=\"start\">\n             <!-- the default port number for the web console -->\n        <property name=\"host\" value=\"0.0.0.0\"/>\n        <property name=\"port\" value=\"8161\"/></bean>\n```\n\n\n\n## 2. jetty-realm.properties ActiveMQ 的 web Console 控制台用户名密码配置:\n\n当登录 http://localhost:8161 进入管理界面时,输入用户名密码配置在文件`jetty-realm.properties`中,添加一个用户为\"aries\"密码为\"123\"的管理员如下:\n\n```shell\n# Defines users that can access the web (console, demo, etc.)\n# username: password [,rolename ...]\nadmin: admin, admin\nuser: user, user\naries: 123, admin\n```\n\n---\n\n第一列为用户名,第二列是密码,第三列表示角色。\n\n---\n\n\n\n## 3.设置MQ的持久化方式:\n\nActiveMQ 默认使用 `KaHadb` 进行持久化消息存储, 配置在 `ActiveMQ.xml` 文件中:\n\n```shell\n<persistenceAdapter>\n            <kahaDB directory=\"${activemq.data}/kahadb\"/>\n</persistenceAdapter>\n```\n\n\n\n 现在我们将持久化存储方式修改为 `mysql` ,则修改上面的配置文件如下:\n\n```shell\n<persistenceAdapter>\n\n         <jdbcPersistenceAdapter  dataSource=\"#derby-ds\"/>\n\n</persistenceAdapter>\n```\n\n\n\n同时添加`mysq数据源`的配置:\n\n```shell\n<bean id=\"derby-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n　　<property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\n　　<property name=\"url\" value=\"jdbc:mysql://localhost:3306/activemq?relaxAutoCommit=true\"/>\n　　<property name=\"username\" value=\"root\"/>\n　　<property name=\"password\" value=\"123\"/>\n　　<property name=\"maxActive\" value=\"200\"/>\n　　<property name=\"poolPreparedStatements\" value=\"true\"/>\n</bean>\n```\n\n\n\n添加mysql驱动等依赖包到ActiveMQ的lib目录下:\n\n- mysql-connector-[Java](http://lib.csdn.net/base/javase)-5.1.30-bin.jar\n\n- commons-dbcp-1.4.jar\n- commons-pool-1.6.jar\n\n\n\n​\t在 mysql 中创建  activemq  数据库,然后启动 ActiveMQ，如果数据test库中生成 `activemq_acks`，`activemq_lock`，`activemq_msgs`三张表,则证明mysql持久化存储配置完成。\n\n### 3.配置消息接收发送顺序按照优先级进行:\n\n​\t在发送消息的时候我们可以设置消息的优先级,来确定消息的接收顺序(对于单个MQ来说,如果是集群就不能确定优先级顺序了),优先级的使用需要在ActiveMQ.xml配置文件中进行开启:\n\n```shell\n <policyEntry queue=\">\"  prioritizedMessages=\"true\" />  \n```\n\n\n\n参考连接：[CSDN    https://blog.csdn.net](https://blog.csdn.net/qq_38167579/article/details/115530052)\n\n","slug":"activemq","published":1,"updated":"2021-12-21T02:32:20.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxjvzrnb00070gu611nqbsgh","content":"<p>activemq配置文件</p>\n<span id=\"more\"></span>\n\n<p>​    在使用ActiveMQ的时候，一般会对其分配用户和角色来做基本的权限验证，本博文选择自带的JAAS Plugin来完成。本文中ActiveMQ版本选择5.16.0</p>\n<p>​    在LINUX上下载解压完ActiveMQ之后进入到conf目录下，其中有四个文件需要特别关注：</p>\n<ul>\n<li>login.config  - 登录配置</li>\n<li>users.properties - 用户密码配置</li>\n<li>groups.properties - 用户组配置</li>\n<li>activemq.xml - ActiveMQ实例配置</li>\n</ul>\n<h1 id=\"login-config\"><a href=\"#login-config\" class=\"headerlink\" title=\"login.config\"></a>login.config</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">activemq &#123;</span><br><span class=\"line\">    org.apache.activemq.jaas.PropertiesLoginModule required</span><br><span class=\"line\">        org.apache.activemq.jaas.properties.user=&quot;users.properties&quot;</span><br><span class=\"line\">        org.apache.activemq.jaas.properties.group=&quot;groups.properties&quot;</span><br><span class=\"line\">\treload=true;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>​    在没有设置<code>java.security.auth.login.config</code>属性时，会默认读取这个文件作为配置；可以看到该文件中，先是定义了一个节点名<code>activemq</code>，第二行表示使用的是<code>PropertiesLoginModule</code>来获取认证信息（其他的方式请参考官网），顾名思义就是从配置文件中读取，所以下面就配置了使用<code>users.properties</code>文件作为用户密码配置，使用<code>groups.properties</code>文件作为用户组配置。默认在当前文件同一目录中查找这两个文件。<code>reload=true</code>，表示可以在运行过程中更改<code>users.properties</code>，<code>groups.properties</code>文件内容，并动态刷新；<strong>不要忘了最后的</strong> <code>&quot;;&quot;</code>。</p>\n<hr>\n<h1 id=\"users-properties\"><a href=\"#users-properties\" class=\"headerlink\" title=\"users.properties\"></a>users.properties</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># username = password</span></span></span><br><span class=\"line\">admin=admin</span><br><span class=\"line\">wuser=wuser</span><br><span class=\"line\">ruser=ruser</span><br></pre></td></tr></table></figure>\n\n<p>在该文件中定义用户，格式：用户名=密码；</p>\n<h1 id=\"groups-properties\"><a href=\"#groups-properties\" class=\"headerlink\" title=\"groups.properties\"></a>groups.properties</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># rolename = username1,username2</span></span></span><br><span class=\"line\">admins=admin</span><br><span class=\"line\">writes=wuser</span><br><span class=\"line\">reads=ruser</span><br></pre></td></tr></table></figure>\n\n<p>在该文件中定义角色，格式：角色名=用户1，用户2…</p>\n<h1 id=\"activemq-xml\"><a href=\"#activemq-xml\" class=\"headerlink\" title=\"activemq.xml\"></a>activemq.xml</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;persistenceAdapter&gt;</span><br><span class=\"line\">       &lt;kahaDB directory=&quot;$&#123;activemq.data&#125;/kahadb&quot;/&gt;</span><br><span class=\"line\">   &lt;/persistenceAdapter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;plugins&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--  use JAAS to authenticate using the login.config file on the classpath to configure JAAS --&gt;</span><br><span class=\"line\">\t&lt;jaasAuthenticationPlugin configuration=&quot;activemq&quot; /&gt;</span><br><span class=\"line\">&lt;!--  lets configure a destination based authorization mechanism --&gt;</span><br><span class=\"line\">\t&lt;authorizationPlugin&gt;</span><br><span class=\"line\">\t   &lt;map&gt;</span><br><span class=\"line\">\t\t&lt;authorizationMap&gt;</span><br><span class=\"line\">\t\t\t&lt;authorizationEntries&gt;</span><br><span class=\"line\">\t\t\t\t&lt;authorizationEntry topic=&quot;&gt;&quot; read=&quot;reads,writes&quot; write=&quot;writes&quot; admin=&quot;writes,admins&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;authorizationEntry queue=&quot;&gt;&quot; read=&quot;reads,writes&quot; write=&quot;writes&quot; admin=&quot;writes,admins&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;authorizationEntry topic=&quot;ActiveMQ.Advisory.&gt;&quot; read=&quot;reads,writes,admins&quot; write=&quot;reads,writes,admins&quot; admin=&quot;reads,writes,admins&quot;/&gt;</span><br><span class=\"line\">\t\t\t\t&lt;authorizationEntry queue=&quot;ActiveMQ.Advisory.&gt;&quot; read=&quot;reads,writes,admins&quot; write=&quot;reads,writes,admins&quot; admin=&quot;reads,writes,admins&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;/authorizationEntries&gt;</span><br><span class=\"line\">\t\t&lt;/authorizationMap&gt;</span><br><span class=\"line\">\t   &lt;/map&gt;</span><br><span class=\"line\">\t&lt;/authorizationPlugin&gt;</span><br><span class=\"line\">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>​    主要是<code>plugins</code>节点，将其放置在persistenceAdapter节点下面，用于配置权限映射。</p>\n<p>​    其中<code>jaasAuthenticationPlugin</code>的<code>configuration</code>属性必须要在<code>login.config</code>文件中存在，上面介绍<code>login.config</code>文件时，定义了一个<code>activemq</code>的节点，所以此处同样需要设置为<code>activemq</code>。</p>\n<p>​    下面的authorizationEntry节点中</p>\n<hr>\n<h2 id=\"queue-topic\"><a href=\"#queue-topic\" class=\"headerlink\" title=\"queue/topic\"></a>queue/topic</h2><p>​    代表权限是作用在queue还是topic上，其值是一个通配符表达式，通配符表达式如下，用于匹配queue/topic的名字。</p>\n<table>\n<thead>\n<tr>\n<th>.</th>\n<th>分隔符;分隔名字,*,&gt;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>匹配任何字符</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>任何字符直到末尾</td>\n</tr>\n</tbody></table>\n<p>例如:</p>\n<p>​    仅单个”&gt;” 和单个”*”都表示匹配全部</p>\n<p>​    “PREFIX.&gt;”或”PREFIX.*”都表示以PREFIX开头的中间以”.”分隔；可以匹配： PREFIX , PREFIX.1 , PREFIX.1.2 ；无法匹配： PREFIX1</p>\n<p>​    “PREFIX.*.SUFFIX”表示以PREFIX开头，以SUFFIX结尾；可以匹配：PREFIX.1.SUFFIX；无法匹配：PREFIX.1.2.SUFFIX，PREFIX.1.SUFFIX.2</p>\n<p>​    注意，如果要使用”&gt;”，那么一定要将其放在表达式的最后。具体信息可以访问<a href=\"https://activemq.apache.org/wildcards\">官网</a>。</p>\n<h2 id=\"read-write-admin\"><a href=\"#read-write-admin\" class=\"headerlink\" title=\"read/write/admin\"></a>read/write/admin</h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>read</td>\n<td>查看和消费目的地数据</td>\n</tr>\n<tr>\n<td>write</td>\n<td>往目的地发送数据</td>\n</tr>\n<tr>\n<td>admin</td>\n<td>创建目的地</td>\n</tr>\n</tbody></table>\n<p>​    read/write/admin 其值是角色名，多个使用”,”分隔，角色名在groups.properties文件中配置。<strong>注意：如果目的地还没创建出来的话，拥有write权限的角色是无法往该目的地发送数据的。</strong></p>\n<hr>\n<p>​    以上，就是ActiveMQ的权限验证配置。如果是配置ActiveMQ WEB端的权限，则需要在jetty.xml 和 jetty-realm.xml中进行配置</p>\n<h2 id=\"1-jetty-xml-配置-ActiveMQ-的web-Console-控制台端口\"><a href=\"#1-jetty-xml-配置-ActiveMQ-的web-Console-控制台端口\" class=\"headerlink\" title=\"1. jetty.xml 配置 ActiveMQ 的web Console 控制台端口:\"></a>1. jetty.xml 配置 ActiveMQ 的web Console 控制台端口:</h2><p>在<code>jetty.xml</code>文件中:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;jettyPort&quot; class=&quot;org.apache.activemq.web.WebConsolePort&quot; init-method=&quot;start&quot;&gt;</span><br><span class=\"line\">             &lt;!-- the default port number for the web console --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;host&quot; value=&quot;0.0.0.0&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;port&quot; value=&quot;8161&quot;/&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-jetty-realm-properties-ActiveMQ-的-web-Console-控制台用户名密码配置\"><a href=\"#2-jetty-realm-properties-ActiveMQ-的-web-Console-控制台用户名密码配置\" class=\"headerlink\" title=\"2. jetty-realm.properties ActiveMQ 的 web Console 控制台用户名密码配置:\"></a>2. jetty-realm.properties ActiveMQ 的 web Console 控制台用户名密码配置:</h2><p>当登录 <a href=\"http://localhost:8161/\">http://localhost:8161</a> 进入管理界面时,输入用户名密码配置在文件<code>jetty-realm.properties</code>中,添加一个用户为”aries”密码为”123”的管理员如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Defines users that can access the web (console, demo, etc.)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> username: password [,rolename ...]</span></span><br><span class=\"line\">admin: admin, admin</span><br><span class=\"line\">user: user, user</span><br><span class=\"line\">aries: 123, admin</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>第一列为用户名,第二列是密码,第三列表示角色。</p>\n<hr>\n<h2 id=\"3-设置MQ的持久化方式\"><a href=\"#3-设置MQ的持久化方式\" class=\"headerlink\" title=\"3.设置MQ的持久化方式:\"></a>3.设置MQ的持久化方式:</h2><p>ActiveMQ 默认使用 <code>KaHadb</code> 进行持久化消息存储, 配置在 <code>ActiveMQ.xml</code> 文件中:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;persistenceAdapter&gt;</span><br><span class=\"line\">            &lt;kahaDB directory=&quot;$&#123;activemq.data&#125;/kahadb&quot;/&gt;</span><br><span class=\"line\">&lt;/persistenceAdapter&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p> 现在我们将持久化存储方式修改为 <code>mysql</code> ,则修改上面的配置文件如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;persistenceAdapter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">         &lt;jdbcPersistenceAdapter  dataSource=&quot;#derby-ds&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/persistenceAdapter&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>同时添加<code>mysq数据源</code>的配置:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;derby-ds&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot; destroy-method=&quot;close&quot;&gt;</span><br><span class=\"line\">　　&lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class=\"line\">　　&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/activemq?relaxAutoCommit=true&quot;/&gt;</span><br><span class=\"line\">　　&lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class=\"line\">　　&lt;property name=&quot;password&quot; value=&quot;123&quot;/&gt;</span><br><span class=\"line\">　　&lt;property name=&quot;maxActive&quot; value=&quot;200&quot;/&gt;</span><br><span class=\"line\">　　&lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>添加mysql驱动等依赖包到ActiveMQ的lib目录下:</p>\n<ul>\n<li><p>mysql-connector-<a href=\"http://lib.csdn.net/base/javase\">Java</a>-5.1.30-bin.jar</p>\n</li>\n<li><p>commons-dbcp-1.4.jar</p>\n</li>\n<li><p>commons-pool-1.6.jar</p>\n</li>\n</ul>\n<p>​    在 mysql 中创建  activemq  数据库,然后启动 ActiveMQ，如果数据test库中生成 <code>activemq_acks</code>，<code>activemq_lock</code>，<code>activemq_msgs</code>三张表,则证明mysql持久化存储配置完成。</p>\n<h3 id=\"3-配置消息接收发送顺序按照优先级进行\"><a href=\"#3-配置消息接收发送顺序按照优先级进行\" class=\"headerlink\" title=\"3.配置消息接收发送顺序按照优先级进行:\"></a>3.配置消息接收发送顺序按照优先级进行:</h3><p>​    在发送消息的时候我们可以设置消息的优先级,来确定消息的接收顺序(对于单个MQ来说,如果是集群就不能确定优先级顺序了),优先级的使用需要在ActiveMQ.xml配置文件中进行开启:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;policyEntry queue=&quot;&gt;&quot;  prioritizedMessages=&quot;true&quot; /&gt;  </span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考连接：<a href=\"https://blog.csdn.net/qq_38167579/article/details/115530052\">CSDN    https://blog.csdn.net</a></p>\n","site":{"data":{"post-body-end":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n","variables":""}},"length":5106,"excerpt":"<p>activemq配置文件</p>","more":"<p>​    在使用ActiveMQ的时候，一般会对其分配用户和角色来做基本的权限验证，本博文选择自带的JAAS Plugin来完成。本文中ActiveMQ版本选择5.16.0</p>\n<p>​    在LINUX上下载解压完ActiveMQ之后进入到conf目录下，其中有四个文件需要特别关注：</p>\n<ul>\n<li>login.config  - 登录配置</li>\n<li>users.properties - 用户密码配置</li>\n<li>groups.properties - 用户组配置</li>\n<li>activemq.xml - ActiveMQ实例配置</li>\n</ul>\n<h1 id=\"login-config\"><a href=\"#login-config\" class=\"headerlink\" title=\"login.config\"></a>login.config</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">activemq &#123;</span><br><span class=\"line\">    org.apache.activemq.jaas.PropertiesLoginModule required</span><br><span class=\"line\">        org.apache.activemq.jaas.properties.user=&quot;users.properties&quot;</span><br><span class=\"line\">        org.apache.activemq.jaas.properties.group=&quot;groups.properties&quot;</span><br><span class=\"line\">\treload=true;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>​    在没有设置<code>java.security.auth.login.config</code>属性时，会默认读取这个文件作为配置；可以看到该文件中，先是定义了一个节点名<code>activemq</code>，第二行表示使用的是<code>PropertiesLoginModule</code>来获取认证信息（其他的方式请参考官网），顾名思义就是从配置文件中读取，所以下面就配置了使用<code>users.properties</code>文件作为用户密码配置，使用<code>groups.properties</code>文件作为用户组配置。默认在当前文件同一目录中查找这两个文件。<code>reload=true</code>，表示可以在运行过程中更改<code>users.properties</code>，<code>groups.properties</code>文件内容，并动态刷新；<strong>不要忘了最后的</strong> <code>&quot;;&quot;</code>。</p>\n<hr>\n<h1 id=\"users-properties\"><a href=\"#users-properties\" class=\"headerlink\" title=\"users.properties\"></a>users.properties</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># username = password</span></span></span><br><span class=\"line\">admin=admin</span><br><span class=\"line\">wuser=wuser</span><br><span class=\"line\">ruser=ruser</span><br></pre></td></tr></table></figure>\n\n<p>在该文件中定义用户，格式：用户名=密码；</p>\n<h1 id=\"groups-properties\"><a href=\"#groups-properties\" class=\"headerlink\" title=\"groups.properties\"></a>groups.properties</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># rolename = username1,username2</span></span></span><br><span class=\"line\">admins=admin</span><br><span class=\"line\">writes=wuser</span><br><span class=\"line\">reads=ruser</span><br></pre></td></tr></table></figure>\n\n<p>在该文件中定义角色，格式：角色名=用户1，用户2…</p>\n<h1 id=\"activemq-xml\"><a href=\"#activemq-xml\" class=\"headerlink\" title=\"activemq.xml\"></a>activemq.xml</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;persistenceAdapter&gt;</span><br><span class=\"line\">       &lt;kahaDB directory=&quot;$&#123;activemq.data&#125;/kahadb&quot;/&gt;</span><br><span class=\"line\">   &lt;/persistenceAdapter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;plugins&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--  use JAAS to authenticate using the login.config file on the classpath to configure JAAS --&gt;</span><br><span class=\"line\">\t&lt;jaasAuthenticationPlugin configuration=&quot;activemq&quot; /&gt;</span><br><span class=\"line\">&lt;!--  lets configure a destination based authorization mechanism --&gt;</span><br><span class=\"line\">\t&lt;authorizationPlugin&gt;</span><br><span class=\"line\">\t   &lt;map&gt;</span><br><span class=\"line\">\t\t&lt;authorizationMap&gt;</span><br><span class=\"line\">\t\t\t&lt;authorizationEntries&gt;</span><br><span class=\"line\">\t\t\t\t&lt;authorizationEntry topic=&quot;&gt;&quot; read=&quot;reads,writes&quot; write=&quot;writes&quot; admin=&quot;writes,admins&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;authorizationEntry queue=&quot;&gt;&quot; read=&quot;reads,writes&quot; write=&quot;writes&quot; admin=&quot;writes,admins&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;authorizationEntry topic=&quot;ActiveMQ.Advisory.&gt;&quot; read=&quot;reads,writes,admins&quot; write=&quot;reads,writes,admins&quot; admin=&quot;reads,writes,admins&quot;/&gt;</span><br><span class=\"line\">\t\t\t\t&lt;authorizationEntry queue=&quot;ActiveMQ.Advisory.&gt;&quot; read=&quot;reads,writes,admins&quot; write=&quot;reads,writes,admins&quot; admin=&quot;reads,writes,admins&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;/authorizationEntries&gt;</span><br><span class=\"line\">\t\t&lt;/authorizationMap&gt;</span><br><span class=\"line\">\t   &lt;/map&gt;</span><br><span class=\"line\">\t&lt;/authorizationPlugin&gt;</span><br><span class=\"line\">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>​    主要是<code>plugins</code>节点，将其放置在persistenceAdapter节点下面，用于配置权限映射。</p>\n<p>​    其中<code>jaasAuthenticationPlugin</code>的<code>configuration</code>属性必须要在<code>login.config</code>文件中存在，上面介绍<code>login.config</code>文件时，定义了一个<code>activemq</code>的节点，所以此处同样需要设置为<code>activemq</code>。</p>\n<p>​    下面的authorizationEntry节点中</p>\n<hr>\n<h2 id=\"queue-topic\"><a href=\"#queue-topic\" class=\"headerlink\" title=\"queue/topic\"></a>queue/topic</h2><p>​    代表权限是作用在queue还是topic上，其值是一个通配符表达式，通配符表达式如下，用于匹配queue/topic的名字。</p>\n<table>\n<thead>\n<tr>\n<th>.</th>\n<th>分隔符;分隔名字,*,&gt;</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>匹配任何字符</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>任何字符直到末尾</td>\n</tr>\n</tbody></table>\n<p>例如:</p>\n<p>​    仅单个”&gt;” 和单个”*”都表示匹配全部</p>\n<p>​    “PREFIX.&gt;”或”PREFIX.*”都表示以PREFIX开头的中间以”.”分隔；可以匹配： PREFIX , PREFIX.1 , PREFIX.1.2 ；无法匹配： PREFIX1</p>\n<p>​    “PREFIX.*.SUFFIX”表示以PREFIX开头，以SUFFIX结尾；可以匹配：PREFIX.1.SUFFIX；无法匹配：PREFIX.1.2.SUFFIX，PREFIX.1.SUFFIX.2</p>\n<p>​    注意，如果要使用”&gt;”，那么一定要将其放在表达式的最后。具体信息可以访问<a href=\"https://activemq.apache.org/wildcards\">官网</a>。</p>\n<h2 id=\"read-write-admin\"><a href=\"#read-write-admin\" class=\"headerlink\" title=\"read/write/admin\"></a>read/write/admin</h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>read</td>\n<td>查看和消费目的地数据</td>\n</tr>\n<tr>\n<td>write</td>\n<td>往目的地发送数据</td>\n</tr>\n<tr>\n<td>admin</td>\n<td>创建目的地</td>\n</tr>\n</tbody></table>\n<p>​    read/write/admin 其值是角色名，多个使用”,”分隔，角色名在groups.properties文件中配置。<strong>注意：如果目的地还没创建出来的话，拥有write权限的角色是无法往该目的地发送数据的。</strong></p>\n<hr>\n<p>​    以上，就是ActiveMQ的权限验证配置。如果是配置ActiveMQ WEB端的权限，则需要在jetty.xml 和 jetty-realm.xml中进行配置</p>\n<h2 id=\"1-jetty-xml-配置-ActiveMQ-的web-Console-控制台端口\"><a href=\"#1-jetty-xml-配置-ActiveMQ-的web-Console-控制台端口\" class=\"headerlink\" title=\"1. jetty.xml 配置 ActiveMQ 的web Console 控制台端口:\"></a>1. jetty.xml 配置 ActiveMQ 的web Console 控制台端口:</h2><p>在<code>jetty.xml</code>文件中:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;jettyPort&quot; class=&quot;org.apache.activemq.web.WebConsolePort&quot; init-method=&quot;start&quot;&gt;</span><br><span class=\"line\">             &lt;!-- the default port number for the web console --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;host&quot; value=&quot;0.0.0.0&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;port&quot; value=&quot;8161&quot;/&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-jetty-realm-properties-ActiveMQ-的-web-Console-控制台用户名密码配置\"><a href=\"#2-jetty-realm-properties-ActiveMQ-的-web-Console-控制台用户名密码配置\" class=\"headerlink\" title=\"2. jetty-realm.properties ActiveMQ 的 web Console 控制台用户名密码配置:\"></a>2. jetty-realm.properties ActiveMQ 的 web Console 控制台用户名密码配置:</h2><p>当登录 <a href=\"http://localhost:8161/\">http://localhost:8161</a> 进入管理界面时,输入用户名密码配置在文件<code>jetty-realm.properties</code>中,添加一个用户为”aries”密码为”123”的管理员如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Defines users that can access the web (console, demo, etc.)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> username: password [,rolename ...]</span></span><br><span class=\"line\">admin: admin, admin</span><br><span class=\"line\">user: user, user</span><br><span class=\"line\">aries: 123, admin</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>第一列为用户名,第二列是密码,第三列表示角色。</p>\n<hr>\n<h2 id=\"3-设置MQ的持久化方式\"><a href=\"#3-设置MQ的持久化方式\" class=\"headerlink\" title=\"3.设置MQ的持久化方式:\"></a>3.设置MQ的持久化方式:</h2><p>ActiveMQ 默认使用 <code>KaHadb</code> 进行持久化消息存储, 配置在 <code>ActiveMQ.xml</code> 文件中:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;persistenceAdapter&gt;</span><br><span class=\"line\">            &lt;kahaDB directory=&quot;$&#123;activemq.data&#125;/kahadb&quot;/&gt;</span><br><span class=\"line\">&lt;/persistenceAdapter&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p> 现在我们将持久化存储方式修改为 <code>mysql</code> ,则修改上面的配置文件如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;persistenceAdapter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">         &lt;jdbcPersistenceAdapter  dataSource=&quot;#derby-ds&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/persistenceAdapter&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>同时添加<code>mysq数据源</code>的配置:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;derby-ds&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot; destroy-method=&quot;close&quot;&gt;</span><br><span class=\"line\">　　&lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class=\"line\">　　&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/activemq?relaxAutoCommit=true&quot;/&gt;</span><br><span class=\"line\">　　&lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class=\"line\">　　&lt;property name=&quot;password&quot; value=&quot;123&quot;/&gt;</span><br><span class=\"line\">　　&lt;property name=&quot;maxActive&quot; value=&quot;200&quot;/&gt;</span><br><span class=\"line\">　　&lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>添加mysql驱动等依赖包到ActiveMQ的lib目录下:</p>\n<ul>\n<li><p>mysql-connector-<a href=\"http://lib.csdn.net/base/javase\">Java</a>-5.1.30-bin.jar</p>\n</li>\n<li><p>commons-dbcp-1.4.jar</p>\n</li>\n<li><p>commons-pool-1.6.jar</p>\n</li>\n</ul>\n<p>​    在 mysql 中创建  activemq  数据库,然后启动 ActiveMQ，如果数据test库中生成 <code>activemq_acks</code>，<code>activemq_lock</code>，<code>activemq_msgs</code>三张表,则证明mysql持久化存储配置完成。</p>\n<h3 id=\"3-配置消息接收发送顺序按照优先级进行\"><a href=\"#3-配置消息接收发送顺序按照优先级进行\" class=\"headerlink\" title=\"3.配置消息接收发送顺序按照优先级进行:\"></a>3.配置消息接收发送顺序按照优先级进行:</h3><p>​    在发送消息的时候我们可以设置消息的优先级,来确定消息的接收顺序(对于单个MQ来说,如果是集群就不能确定优先级顺序了),优先级的使用需要在ActiveMQ.xml配置文件中进行开启:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;policyEntry queue=&quot;&gt;&quot;  prioritizedMessages=&quot;true&quot; /&gt;  </span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考连接：<a href=\"https://blog.csdn.net/qq_38167579/article/details/115530052\">CSDN    https://blog.csdn.net</a></p>"},{"title":"Hello World","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-06-18T16:19:28.888Z","updated":"2021-06-20T07:40:00.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxjvzrnc00080gu66h6p66s7","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"post-body-end":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n","variables":""}},"length":367,"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"GRE隧道","date":"2021-09-18T06:32:58.000Z","_content":"\n\n\nGRE隧道\n\n<!-- more -->\n\n其他国家的互联网如同一个孤岛。要想访问国外网站异常的缓慢，甚至被和谐了。可以建立一条隧道来避免这种情况，下面说说GRE隧道如何建立。\n\n**1. GRE介绍**\n\nGRE隧道是一种IP-over-IP的隧道，是通用路由封装协议，可以对某些网路层协议的数据报进行封装，使这些被封装的数据报能够在IPv4/IPv6 网络中传输。\n\nTunnel 是一个虚拟的点对点的连接，提供了一条通路使封装的数据报文能够在这个通路上传输，并且在一个Tunnel 的两端分别对数据报进行封装及解封装。　一个X协议的报文要想穿越IP网络在Tunnel中传输，必须要经过加封装与解封装两个过程。\n\n要在 Linux 上创建GRE隧道，需要ip_gre内核模块，它是GRE通过IPv4隧道的驱动程序。\n\n**2. 查看是否有加载ip_gre模块**\n\n ```shell\n # modprobe ip_gre\n # lsmod | grep gre\n ip_gre         22432 0\n gre          12989 1 ip_gre\n ```\n\n\n\n**3. 创建步骤**\n\n环境如下：\n\n| **host A :** | **10.253.154.5**  |\n| ------------ | ----------------- |\n| **host B:**  | **10.253.54.154** |\n\n\n\n**在host A上面：**\n\n ```shell\n ip tunnel add gre1 mode gre remote 10.253.54.154 local 10.253.154.5 ttl 255\n ip link set gre1 up\n ip addr add 10.10.10.1 peer 10.10.10.2 dev gre1\n \n ```\n\n\n\n**创建一个GRE类型隧道设备gre0, 并设置对端IP为10.253.54.154。隧道数据包将被从10.253.154.5也就是本地IP地址发起，其TTL字段被设置为255。隧道设备分配的IP地址为10.10.10.1，掩码为255.255.255.0。**\n\n**在host B上面：**\n\n ```shell\n ip tunnel add gre1 mode gre remote  10.253.154.5 local 10.253.54.154 ttl 255\n ip link set gre1 up\n ip addr add 10.10.10.2 peer 10.10.10.1 dev gre1\n ```\n\n\n\n**此时，host A 和 host B 建立起GRE隧道了。**\n\n**4. 检测连通性**\n\n ```shell\n  ping 10.10.10.2 (host A)\n  PING 10.10.10.2 (10.10.10.2) 56(84) bytes of data.\n  64 bytes from 10.10.10.2: icmp_req=1 ttl=64 time=0.319 ms\n  64 bytes from 10.10.10.2: icmp_req=2 ttl=64 time=0.296 ms\n  64 bytes from 10.10.10.2: icmp_req=3 ttl=64 time=0.287 ms\n ```\n\n\n\n**5.撤销GRE隧道**\n\n**在任一一端操作下面命令**\n\n ```shell\n ip link set gre1 down\n ip tunnel del gre1\n ```\n\n","source":"_posts/gre.md","raw":"---\ntitle: GRE隧道\ndate: 2021-09-18 14:32:58\ntags: \n  - Linux\ncategories: \n  - Linux\n---\n\n\n\nGRE隧道\n\n<!-- more -->\n\n其他国家的互联网如同一个孤岛。要想访问国外网站异常的缓慢，甚至被和谐了。可以建立一条隧道来避免这种情况，下面说说GRE隧道如何建立。\n\n**1. GRE介绍**\n\nGRE隧道是一种IP-over-IP的隧道，是通用路由封装协议，可以对某些网路层协议的数据报进行封装，使这些被封装的数据报能够在IPv4/IPv6 网络中传输。\n\nTunnel 是一个虚拟的点对点的连接，提供了一条通路使封装的数据报文能够在这个通路上传输，并且在一个Tunnel 的两端分别对数据报进行封装及解封装。　一个X协议的报文要想穿越IP网络在Tunnel中传输，必须要经过加封装与解封装两个过程。\n\n要在 Linux 上创建GRE隧道，需要ip_gre内核模块，它是GRE通过IPv4隧道的驱动程序。\n\n**2. 查看是否有加载ip_gre模块**\n\n ```shell\n # modprobe ip_gre\n # lsmod | grep gre\n ip_gre         22432 0\n gre          12989 1 ip_gre\n ```\n\n\n\n**3. 创建步骤**\n\n环境如下：\n\n| **host A :** | **10.253.154.5**  |\n| ------------ | ----------------- |\n| **host B:**  | **10.253.54.154** |\n\n\n\n**在host A上面：**\n\n ```shell\n ip tunnel add gre1 mode gre remote 10.253.54.154 local 10.253.154.5 ttl 255\n ip link set gre1 up\n ip addr add 10.10.10.1 peer 10.10.10.2 dev gre1\n \n ```\n\n\n\n**创建一个GRE类型隧道设备gre0, 并设置对端IP为10.253.54.154。隧道数据包将被从10.253.154.5也就是本地IP地址发起，其TTL字段被设置为255。隧道设备分配的IP地址为10.10.10.1，掩码为255.255.255.0。**\n\n**在host B上面：**\n\n ```shell\n ip tunnel add gre1 mode gre remote  10.253.154.5 local 10.253.54.154 ttl 255\n ip link set gre1 up\n ip addr add 10.10.10.2 peer 10.10.10.1 dev gre1\n ```\n\n\n\n**此时，host A 和 host B 建立起GRE隧道了。**\n\n**4. 检测连通性**\n\n ```shell\n  ping 10.10.10.2 (host A)\n  PING 10.10.10.2 (10.10.10.2) 56(84) bytes of data.\n  64 bytes from 10.10.10.2: icmp_req=1 ttl=64 time=0.319 ms\n  64 bytes from 10.10.10.2: icmp_req=2 ttl=64 time=0.296 ms\n  64 bytes from 10.10.10.2: icmp_req=3 ttl=64 time=0.287 ms\n ```\n\n\n\n**5.撤销GRE隧道**\n\n**在任一一端操作下面命令**\n\n ```shell\n ip link set gre1 down\n ip tunnel del gre1\n ```\n\n","slug":"gre","published":1,"updated":"2021-12-22T03:02:09.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxjvzrne00090gu6heurd8yu","content":"<p>GRE隧道</p>\n<span id=\"more\"></span>\n\n<p>其他国家的互联网如同一个孤岛。要想访问国外网站异常的缓慢，甚至被和谐了。可以建立一条隧道来避免这种情况，下面说说GRE隧道如何建立。</p>\n<p><strong>1. GRE介绍</strong></p>\n<p>GRE隧道是一种IP-over-IP的隧道，是通用路由封装协议，可以对某些网路层协议的数据报进行封装，使这些被封装的数据报能够在IPv4/IPv6 网络中传输。</p>\n<p>Tunnel 是一个虚拟的点对点的连接，提供了一条通路使封装的数据报文能够在这个通路上传输，并且在一个Tunnel 的两端分别对数据报进行封装及解封装。　一个X协议的报文要想穿越IP网络在Tunnel中传输，必须要经过加封装与解封装两个过程。</p>\n<p>要在 Linux 上创建GRE隧道，需要ip_gre内核模块，它是GRE通过IPv4隧道的驱动程序。</p>\n<p><strong>2. 查看是否有加载ip_gre模块</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> modprobe ip_gre</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> lsmod | grep gre</span></span><br><span class=\"line\">ip_gre         22432 0</span><br><span class=\"line\">gre          12989 1 ip_gre</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>3. 创建步骤</strong></p>\n<p>环境如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>host A :</strong></th>\n<th><strong>10.253.154.5</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>host B:</strong></td>\n<td><strong>10.253.54.154</strong></td>\n</tr>\n</tbody></table>\n<p><strong>在host A上面：</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip tunnel add gre1 mode gre remote 10.253.54.154 local 10.253.154.5 ttl 255</span><br><span class=\"line\">ip link set gre1 up</span><br><span class=\"line\">ip addr add 10.10.10.1 peer 10.10.10.2 dev gre1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>创建一个GRE类型隧道设备gre0, 并设置对端IP为10.253.54.154。隧道数据包将被从10.253.154.5也就是本地IP地址发起，其TTL字段被设置为255。隧道设备分配的IP地址为10.10.10.1，掩码为255.255.255.0。</strong></p>\n<p><strong>在host B上面：</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip tunnel add gre1 mode gre remote  10.253.154.5 local 10.253.54.154 ttl 255</span><br><span class=\"line\">ip link set gre1 up</span><br><span class=\"line\">ip addr add 10.10.10.2 peer 10.10.10.1 dev gre1</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>此时，host A 和 host B 建立起GRE隧道了。</strong></p>\n<p><strong>4. 检测连通性</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ping 10.10.10.2 (host A)</span><br><span class=\"line\">  PING 10.10.10.2 (10.10.10.2) 56(84) bytes of data.</span><br><span class=\"line\">  64 bytes from 10.10.10.2: icmp_req=1 ttl=64 time=0.319 ms</span><br><span class=\"line\">  64 bytes from 10.10.10.2: icmp_req=2 ttl=64 time=0.296 ms</span><br><span class=\"line\">  64 bytes from 10.10.10.2: icmp_req=3 ttl=64 time=0.287 ms</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>5.撤销GRE隧道</strong></p>\n<p><strong>在任一一端操作下面命令</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip link set gre1 down</span><br><span class=\"line\">ip tunnel del gre1</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"post-body-end":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n","variables":""}},"length":1142,"excerpt":"<p>GRE隧道</p>","more":"<p>其他国家的互联网如同一个孤岛。要想访问国外网站异常的缓慢，甚至被和谐了。可以建立一条隧道来避免这种情况，下面说说GRE隧道如何建立。</p>\n<p><strong>1. GRE介绍</strong></p>\n<p>GRE隧道是一种IP-over-IP的隧道，是通用路由封装协议，可以对某些网路层协议的数据报进行封装，使这些被封装的数据报能够在IPv4/IPv6 网络中传输。</p>\n<p>Tunnel 是一个虚拟的点对点的连接，提供了一条通路使封装的数据报文能够在这个通路上传输，并且在一个Tunnel 的两端分别对数据报进行封装及解封装。　一个X协议的报文要想穿越IP网络在Tunnel中传输，必须要经过加封装与解封装两个过程。</p>\n<p>要在 Linux 上创建GRE隧道，需要ip_gre内核模块，它是GRE通过IPv4隧道的驱动程序。</p>\n<p><strong>2. 查看是否有加载ip_gre模块</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> modprobe ip_gre</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> lsmod | grep gre</span></span><br><span class=\"line\">ip_gre         22432 0</span><br><span class=\"line\">gre          12989 1 ip_gre</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>3. 创建步骤</strong></p>\n<p>环境如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>host A :</strong></th>\n<th><strong>10.253.154.5</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>host B:</strong></td>\n<td><strong>10.253.54.154</strong></td>\n</tr>\n</tbody></table>\n<p><strong>在host A上面：</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip tunnel add gre1 mode gre remote 10.253.54.154 local 10.253.154.5 ttl 255</span><br><span class=\"line\">ip link set gre1 up</span><br><span class=\"line\">ip addr add 10.10.10.1 peer 10.10.10.2 dev gre1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>创建一个GRE类型隧道设备gre0, 并设置对端IP为10.253.54.154。隧道数据包将被从10.253.154.5也就是本地IP地址发起，其TTL字段被设置为255。隧道设备分配的IP地址为10.10.10.1，掩码为255.255.255.0。</strong></p>\n<p><strong>在host B上面：</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip tunnel add gre1 mode gre remote  10.253.154.5 local 10.253.54.154 ttl 255</span><br><span class=\"line\">ip link set gre1 up</span><br><span class=\"line\">ip addr add 10.10.10.2 peer 10.10.10.1 dev gre1</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>此时，host A 和 host B 建立起GRE隧道了。</strong></p>\n<p><strong>4. 检测连通性</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ping 10.10.10.2 (host A)</span><br><span class=\"line\">  PING 10.10.10.2 (10.10.10.2) 56(84) bytes of data.</span><br><span class=\"line\">  64 bytes from 10.10.10.2: icmp_req=1 ttl=64 time=0.319 ms</span><br><span class=\"line\">  64 bytes from 10.10.10.2: icmp_req=2 ttl=64 time=0.296 ms</span><br><span class=\"line\">  64 bytes from 10.10.10.2: icmp_req=3 ttl=64 time=0.287 ms</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>5.撤销GRE隧道</strong></p>\n<p><strong>在任一一端操作下面命令</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip link set gre1 down</span><br><span class=\"line\">ip tunnel del gre1</span><br></pre></td></tr></table></figure>"},{"title":"hexo资源文件夹","date":"2021-07-20T05:48:22.000Z","_content":"\nhexo资源文件夹\n\n<!--more-->\n\n参考地址：[官方地址 hexo.io/zh-cn/docs/asset-folders](https://hexo.io/zh-cn/docs/asset-folders)\n\n​\t资源（Asset）代表 `source` 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 `source/images` 文件夹中。然后通过类似于 `![](/images/image.jpg)` 的方法访问它们。\n\n对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 `config.yml` 文件中的 `post_asset_folder` 选项设为 `true` 来打开。\n\n```yaml\n_config.ymlpost_asset_folder: true\n```\n\n当资源文件管理功能打开后，Hexo将会在你每一次通过 `hexo new [layout] <title>` 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。\n\n## 相对路径引用的标签插件\n\n通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的[标签插件](https://hexo.io/docs/tag-plugins#Include-Assets)被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。\n\n```css\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n\n比如说：当你打开文章资源文件夹功能后，你把一个 `example.jpg` 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 `![](example.jpg)` ，它将 *不会* 出现在首页上。（但是它会在文章中按你期待的方式工作）\n\n正确的引用图片方式是使用下列的标签插件而不是 markdown ：\n\n```css\n{% asset_img example.jpg This is an example image %}\n```\n\n通过这种方式，图片将会同时出现在文章和主页以及归档页中。\n\n## Embedding an image using markdown\n\n[hexo-renderer-marked](https://github.com/hexojs/hexo-renderer-marked) 3.1.0 introduced a new option that allows you to embed an image in markdown without using `asset_img` tag plugin.\n\nTo enable:\n\n```yaml\n_config.ymlpost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\nOnce enabled, an asset image will be automatically resolved to its corresponding post’s path. For example, “image.jpg” is located at “/2020/01/02/foo/image.jpg”, meaning it is an asset image of “/2020/01/02/foo/“ post, `![](image.jpg)` will be rendered as `<img src=\"/2020/01/02/foo/image.jpg\">`.\n","source":"_posts/hexo资源文件夹.md","raw":"---\ntitle: hexo资源文件夹\ndate: 2021-07-20 13:48:22\ntags: \n  - hexo \ncategories: \n  - hexo\n---\n\nhexo资源文件夹\n\n<!--more-->\n\n参考地址：[官方地址 hexo.io/zh-cn/docs/asset-folders](https://hexo.io/zh-cn/docs/asset-folders)\n\n​\t资源（Asset）代表 `source` 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 `source/images` 文件夹中。然后通过类似于 `![](/images/image.jpg)` 的方法访问它们。\n\n对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 `config.yml` 文件中的 `post_asset_folder` 选项设为 `true` 来打开。\n\n```yaml\n_config.ymlpost_asset_folder: true\n```\n\n当资源文件管理功能打开后，Hexo将会在你每一次通过 `hexo new [layout] <title>` 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。\n\n## 相对路径引用的标签插件\n\n通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的[标签插件](https://hexo.io/docs/tag-plugins#Include-Assets)被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。\n\n```css\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n\n比如说：当你打开文章资源文件夹功能后，你把一个 `example.jpg` 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 `![](example.jpg)` ，它将 *不会* 出现在首页上。（但是它会在文章中按你期待的方式工作）\n\n正确的引用图片方式是使用下列的标签插件而不是 markdown ：\n\n```css\n{% asset_img example.jpg This is an example image %}\n```\n\n通过这种方式，图片将会同时出现在文章和主页以及归档页中。\n\n## Embedding an image using markdown\n\n[hexo-renderer-marked](https://github.com/hexojs/hexo-renderer-marked) 3.1.0 introduced a new option that allows you to embed an image in markdown without using `asset_img` tag plugin.\n\nTo enable:\n\n```yaml\n_config.ymlpost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\nOnce enabled, an asset image will be automatically resolved to its corresponding post’s path. For example, “image.jpg” is located at “/2020/01/02/foo/image.jpg”, meaning it is an asset image of “/2020/01/02/foo/“ post, `![](image.jpg)` will be rendered as `<img src=\"/2020/01/02/foo/image.jpg\">`.\n","slug":"hexo资源文件夹","published":1,"updated":"2021-07-20T06:27:43.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxjvzrng000d0gu66r0tfzfc","content":"<p>hexo资源文件夹</p>\n<span id=\"more\"></span>\n\n<p>参考地址：<a href=\"https://hexo.io/zh-cn/docs/asset-folders\">官方地址 hexo.io/zh-cn/docs/asset-folders</a></p>\n<p>​    资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p>\n<p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">_config.ymlpost_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p>\n<h2 id=\"相对路径引用的标签插件\"><a href=\"#相对路径引用的标签插件\" class=\"headerlink\" title=\"相对路径引用的标签插件\"></a>相对路径引用的标签插件</h2><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的<a href=\"https://hexo.io/docs/tag-plugins#Include-Assets\">标签插件</a>被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug <span class=\"selector-attr\">[title]</span> %&#125;</span><br><span class=\"line\">&#123;% asset_link slug <span class=\"selector-attr\">[title]</span> %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>比如说：当你打开文章资源文件夹功能后，你把一个 <code>example.jpg</code> 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <code>![](example.jpg)</code> ，它将 <em>不会</em> 出现在首页上。（但是它会在文章中按你期待的方式工作）</p>\n<p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img example<span class=\"selector-class\">.jpg</span> This is an example image %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p>\n<h2 id=\"Embedding-an-image-using-markdown\"><a href=\"#Embedding-an-image-using-markdown\" class=\"headerlink\" title=\"Embedding an image using markdown\"></a>Embedding an image using markdown</h2><p><a href=\"https://github.com/hexojs/hexo-renderer-marked\">hexo-renderer-marked</a> 3.1.0 introduced a new option that allows you to embed an image in markdown without using <code>asset_img</code> tag plugin.</p>\n<p>To enable:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">_config.ymlpost_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">prependRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">postAsset:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>Once enabled, an asset image will be automatically resolved to its corresponding post’s path. For example, “image.jpg” is located at “/2020/01/02/foo/image.jpg”, meaning it is an asset image of “/2020/01/02/foo/“ post, <code>![](image.jpg)</code> will be rendered as <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code>.</p>\n","site":{"data":{"post-body-end":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n","variables":""}},"length":1488,"excerpt":"<p>hexo资源文件夹</p>","more":"<p>参考地址：<a href=\"https://hexo.io/zh-cn/docs/asset-folders\">官方地址 hexo.io/zh-cn/docs/asset-folders</a></p>\n<p>​    资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p>\n<p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">_config.ymlpost_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p>\n<h2 id=\"相对路径引用的标签插件\"><a href=\"#相对路径引用的标签插件\" class=\"headerlink\" title=\"相对路径引用的标签插件\"></a>相对路径引用的标签插件</h2><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的<a href=\"https://hexo.io/docs/tag-plugins#Include-Assets\">标签插件</a>被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug <span class=\"selector-attr\">[title]</span> %&#125;</span><br><span class=\"line\">&#123;% asset_link slug <span class=\"selector-attr\">[title]</span> %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>比如说：当你打开文章资源文件夹功能后，你把一个 <code>example.jpg</code> 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <code>![](example.jpg)</code> ，它将 <em>不会</em> 出现在首页上。（但是它会在文章中按你期待的方式工作）</p>\n<p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img example<span class=\"selector-class\">.jpg</span> This is an example image %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p>\n<h2 id=\"Embedding-an-image-using-markdown\"><a href=\"#Embedding-an-image-using-markdown\" class=\"headerlink\" title=\"Embedding an image using markdown\"></a>Embedding an image using markdown</h2><p><a href=\"https://github.com/hexojs/hexo-renderer-marked\">hexo-renderer-marked</a> 3.1.0 introduced a new option that allows you to embed an image in markdown without using <code>asset_img</code> tag plugin.</p>\n<p>To enable:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">_config.ymlpost_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">prependRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">postAsset:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>Once enabled, an asset image will be automatically resolved to its corresponding post’s path. For example, “image.jpg” is located at “/2020/01/02/foo/image.jpg”, meaning it is an asset image of “/2020/01/02/foo/“ post, <code>![](image.jpg)</code> will be rendered as <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code>.</p>"},{"title":"k8s常见总结1","date":"2021-07-17T03:48:09.000Z","_content":"\n\n\nk8s常见总结1\n\n<!--more-->\n\n# 1.什么是Kubernetes？\n\n​\tKubernetes是一个开源容器管理工具，负责容器部署，容器扩缩容以及负载平衡。作为Google的创意之作，它提供了出色的社区，并与所有云提供商合作。因此，我们可以说Kubernetes不是*一个容器化平台，而是一个多容器管理解决方案。*\n\n\n\n# 2.在主机和容器上部署应用程序有什么区别？\n\n​\t主机上部署应用程序。这种架构将具有操作系统，然后操作系统将具有内核，该内核将在应用程序所需的操作系统上安装各种库。因此，在这种框架中，您可以拥有n个应用程序，并且所有应用程序将共享该操作系统中存在的库，而在容器中部署应用程序时，体系结构则略有不同。\n\n\n\n​\t这种架构将有一个内核，这是唯一一个在所有应用程序之间唯一共同的东西。因此，如果有一个需要Java的特定应用程序，那么我们将获得访问Java的特定应用程序，如果有另一个需要Python的应用程序，则只有该特定应用程序才能访问Python。\n\n\n\n​\t容器化的，这块与其他应用程序隔离。因此，应用程序具有与系统其余部分隔离的必要库和二进制文件，并且不能被任何其他应用程序侵占。\n\n\n\n# 3.Kubernetes如何简化容器化部署？\n\n​\t由于典型应用程序将具有跨多个主机运行的容器集群，因此所有这些容器都需要相互通信。因此，要做到这一点，你需要一些能够负载平衡，扩展和监控容器的东西。由于Kubernetes与云无关并且可以在任何公共/私有提供商上运行，因此必须是您简化容器化部署的选择。\n\n\n\n# 4.Kubernetes的集群了解\n\n\n\n​\tKubernetes背后的基础是我们可以实施所需的状态管理，我的意思是我们可以提供特定配置的集群服务，并且集群服务将在基础架构中运行并运行该配置。\n\n\n\n​\t因此，部署文件将具有提供给集群服务所需的所有配置。现在，部署文件将被提供给API，然后由集群服务决定如何在环境中安排这些pod，并确保正确运行的pod数量。\n\n​\t因此，位于服务前面的API，工作节点和节点运行的Kubelet进程，共同构成了Kubernetes集群。\n\n\n\n\n\n# 5.什么是Google容器引擎？\n\n​\tGoogle Container Engine（GKE）是Docker容器和集群的开源管理平台。这个基于Kubernetes的引擎仅支持在Google的公共云服务中运行的群集。\n\n\n\n# 6.什么是Minikube？\n\n​\tMinikube是一种工具，可以在本地轻松运行Kubernetes。这将在虚拟机中运行单节点Kubernetes群集。\n\n\n\n# 7.什么是Kubectl？\n\n​\tKubectl是一个平台，您可以使用该平台将命令传递给集群。因此，它基本上为CLI提供了针对Kubernetes集群运行命令的方法，以及创建和管理Kubernetes组件的各种方法。\n\n\n\n# 8.什么是Kubelet？\n\n​\t这是一个代理服务，它在每个节点上运行，并使从服务器与主服务器通信。因此，Kubelet处理PodSpec中提供给它的容器的描述，并确保PodSpec中描述的容器运行正常。\n\n\n\n# 9.Kubernetes Architecture的不同组件有哪些？\n\n​\tKubernetes Architecture主要有两个组件 - 主节点和工作节点。如下图所示，master和worker节点中包含许多内置组件。主节点具有kube-controller-manager，kube-apiserver，kube-scheduler等。而工作节点具有在每个节点上运行的kubelet和kube-proxy。\n\n\n\n# 10.你对`Kube-proxy`有什么了解？\n\n​\tKube-proxy可以在每个节点上运行，并且可以跨后端网络服务进行简单的TCP / UDP数据包转发。基本上，它是一个网络代理，它反映了每个节点上Kubernetes API中配置的服务。因此，Docker可链接的兼容环境变量提供由代理打开的群集IP和端口。\n\n\n\n# 11.Kubernetes中主节点的工作情况？\n\n​\tKubernetes master控制容器存在的节点和节点内部。现在，这些单独的容器包含在容器内部和每个容器内部，您可以根据配置和要求拥有不同数量的容器。因此，如果必须部署pod，则可以使用用户界面或命令行界面部署它们。然后，在节点上调度这些pod，并根据资源需求，将pod分配给这些节点。kube-apiserver确保在Kubernetes节点和主组件之间建立通信。\n\n\n\n# 12.`kube-apiserver`和`kube-scheduler`的作用是什么？\n\n​\t`kube-apiserver`遵循横向扩展架构，是主节点控制面板的前端。这将公开Kubernetes主节点组件的所有API，并负责在Kubernetes节点和Kubernetes主组件之间建立通信。\n\n\n\n​\t`kube-scheduler`负责工作节点上工作负载的分配和管理。因此，它根据资源需求选择最合适的节点来运行未调度的pod，并跟踪资源利用率。它确保不在已满的节点上调度工作负载。\n\n\n\n# 13.kubernetes控制管理器吗？\n\n​\t多个控制器进程在主节点上运行，但是一起编译为单个进程运行，即Kubernetes控制器管理器。因此，Controller Manager是一个嵌入控制器并执行命名空间创建和垃圾收集的守护程序。它拥有责任并与API服务器通信以管理端点。\n\n\n\n# 14.什么是ETCD？\n\n​\tEtcd是用Go编程语言编写的，是一个分布式键值存储，用于协调分布式工作。因此，Etcd存储Kubernetes集群的配置数据，表示在任何给定时间点的集群状态。\n\n\n\n## 15.Kubernetes的负载均衡器了解\n\n​\t负载均衡器是暴露服务的最常见和标准方式之一。根据工作环境使用两种类型的负载均衡器，即*内部负载均衡器*或*外部负载均衡器*。内部负载均衡器自动平衡负载并使用所需配置分配容器，而外部负载均衡器将流量从外部负载引导至后端容器。\n\n\n\n# 16.Ingress网络，它是如何工作的？\n\n​\tIngress网络是一组规则，充当Kubernetes集群的入口点。这允许入站连接，可以将其配置为通过可访问的URL，负载平衡流量或通过提供基于名称的虚拟主机从外部提供服务。因此，Ingress是一个API对象，通常通过HTTP管理集群中服务的外部访问，是暴露服务的最有效方式。\n\n\n\n# 17.Replica Set 和 Replication Controller之间有什么区别？\n\n​\t`Replica Set `和 `Replication Controller`几乎完全相同。它们都确保在任何给定时间运行指定数量的pod副本。不同之处在于复制pod使用的选择器。Replica Set使用基于集合的选择器，而Replication Controller使用基于权限的选择器。\n\n- Equity-Based选择器：这种类型的选择器允许按标签键和值进行过滤。因此，在外行术语中，基于Equity的选择器将仅查找与标签具有完全相同短语的pod。 示例：假设您的标签键表示app = nginx，那么，使用此选择器，您只能查找标签应用程序等于nginx的那些pod。\n- Selector-Based选择器：此类型的选择器允许根据一组值过滤键。因此，换句话说，基于Selector的选择器将查找已在集合中提及其标签的pod。 示例：假设您的标签键在（nginx，NPS，Apache）中显示应用程序。然后，使用此选择器，如果您的应用程序等于任何nginx，NPS或Apache，则选择器将其视为真实结果。\n","source":"_posts/k8s常见总结.md","raw":"---\ntitle: k8s常见总结1\ndate: 2021-07-17 11:48:09\ntags: \n  - k8s\ncategories: \n  - k8s\n---\n\n\n\nk8s常见总结1\n\n<!--more-->\n\n# 1.什么是Kubernetes？\n\n​\tKubernetes是一个开源容器管理工具，负责容器部署，容器扩缩容以及负载平衡。作为Google的创意之作，它提供了出色的社区，并与所有云提供商合作。因此，我们可以说Kubernetes不是*一个容器化平台，而是一个多容器管理解决方案。*\n\n\n\n# 2.在主机和容器上部署应用程序有什么区别？\n\n​\t主机上部署应用程序。这种架构将具有操作系统，然后操作系统将具有内核，该内核将在应用程序所需的操作系统上安装各种库。因此，在这种框架中，您可以拥有n个应用程序，并且所有应用程序将共享该操作系统中存在的库，而在容器中部署应用程序时，体系结构则略有不同。\n\n\n\n​\t这种架构将有一个内核，这是唯一一个在所有应用程序之间唯一共同的东西。因此，如果有一个需要Java的特定应用程序，那么我们将获得访问Java的特定应用程序，如果有另一个需要Python的应用程序，则只有该特定应用程序才能访问Python。\n\n\n\n​\t容器化的，这块与其他应用程序隔离。因此，应用程序具有与系统其余部分隔离的必要库和二进制文件，并且不能被任何其他应用程序侵占。\n\n\n\n# 3.Kubernetes如何简化容器化部署？\n\n​\t由于典型应用程序将具有跨多个主机运行的容器集群，因此所有这些容器都需要相互通信。因此，要做到这一点，你需要一些能够负载平衡，扩展和监控容器的东西。由于Kubernetes与云无关并且可以在任何公共/私有提供商上运行，因此必须是您简化容器化部署的选择。\n\n\n\n# 4.Kubernetes的集群了解\n\n\n\n​\tKubernetes背后的基础是我们可以实施所需的状态管理，我的意思是我们可以提供特定配置的集群服务，并且集群服务将在基础架构中运行并运行该配置。\n\n\n\n​\t因此，部署文件将具有提供给集群服务所需的所有配置。现在，部署文件将被提供给API，然后由集群服务决定如何在环境中安排这些pod，并确保正确运行的pod数量。\n\n​\t因此，位于服务前面的API，工作节点和节点运行的Kubelet进程，共同构成了Kubernetes集群。\n\n\n\n\n\n# 5.什么是Google容器引擎？\n\n​\tGoogle Container Engine（GKE）是Docker容器和集群的开源管理平台。这个基于Kubernetes的引擎仅支持在Google的公共云服务中运行的群集。\n\n\n\n# 6.什么是Minikube？\n\n​\tMinikube是一种工具，可以在本地轻松运行Kubernetes。这将在虚拟机中运行单节点Kubernetes群集。\n\n\n\n# 7.什么是Kubectl？\n\n​\tKubectl是一个平台，您可以使用该平台将命令传递给集群。因此，它基本上为CLI提供了针对Kubernetes集群运行命令的方法，以及创建和管理Kubernetes组件的各种方法。\n\n\n\n# 8.什么是Kubelet？\n\n​\t这是一个代理服务，它在每个节点上运行，并使从服务器与主服务器通信。因此，Kubelet处理PodSpec中提供给它的容器的描述，并确保PodSpec中描述的容器运行正常。\n\n\n\n# 9.Kubernetes Architecture的不同组件有哪些？\n\n​\tKubernetes Architecture主要有两个组件 - 主节点和工作节点。如下图所示，master和worker节点中包含许多内置组件。主节点具有kube-controller-manager，kube-apiserver，kube-scheduler等。而工作节点具有在每个节点上运行的kubelet和kube-proxy。\n\n\n\n# 10.你对`Kube-proxy`有什么了解？\n\n​\tKube-proxy可以在每个节点上运行，并且可以跨后端网络服务进行简单的TCP / UDP数据包转发。基本上，它是一个网络代理，它反映了每个节点上Kubernetes API中配置的服务。因此，Docker可链接的兼容环境变量提供由代理打开的群集IP和端口。\n\n\n\n# 11.Kubernetes中主节点的工作情况？\n\n​\tKubernetes master控制容器存在的节点和节点内部。现在，这些单独的容器包含在容器内部和每个容器内部，您可以根据配置和要求拥有不同数量的容器。因此，如果必须部署pod，则可以使用用户界面或命令行界面部署它们。然后，在节点上调度这些pod，并根据资源需求，将pod分配给这些节点。kube-apiserver确保在Kubernetes节点和主组件之间建立通信。\n\n\n\n# 12.`kube-apiserver`和`kube-scheduler`的作用是什么？\n\n​\t`kube-apiserver`遵循横向扩展架构，是主节点控制面板的前端。这将公开Kubernetes主节点组件的所有API，并负责在Kubernetes节点和Kubernetes主组件之间建立通信。\n\n\n\n​\t`kube-scheduler`负责工作节点上工作负载的分配和管理。因此，它根据资源需求选择最合适的节点来运行未调度的pod，并跟踪资源利用率。它确保不在已满的节点上调度工作负载。\n\n\n\n# 13.kubernetes控制管理器吗？\n\n​\t多个控制器进程在主节点上运行，但是一起编译为单个进程运行，即Kubernetes控制器管理器。因此，Controller Manager是一个嵌入控制器并执行命名空间创建和垃圾收集的守护程序。它拥有责任并与API服务器通信以管理端点。\n\n\n\n# 14.什么是ETCD？\n\n​\tEtcd是用Go编程语言编写的，是一个分布式键值存储，用于协调分布式工作。因此，Etcd存储Kubernetes集群的配置数据，表示在任何给定时间点的集群状态。\n\n\n\n## 15.Kubernetes的负载均衡器了解\n\n​\t负载均衡器是暴露服务的最常见和标准方式之一。根据工作环境使用两种类型的负载均衡器，即*内部负载均衡器*或*外部负载均衡器*。内部负载均衡器自动平衡负载并使用所需配置分配容器，而外部负载均衡器将流量从外部负载引导至后端容器。\n\n\n\n# 16.Ingress网络，它是如何工作的？\n\n​\tIngress网络是一组规则，充当Kubernetes集群的入口点。这允许入站连接，可以将其配置为通过可访问的URL，负载平衡流量或通过提供基于名称的虚拟主机从外部提供服务。因此，Ingress是一个API对象，通常通过HTTP管理集群中服务的外部访问，是暴露服务的最有效方式。\n\n\n\n# 17.Replica Set 和 Replication Controller之间有什么区别？\n\n​\t`Replica Set `和 `Replication Controller`几乎完全相同。它们都确保在任何给定时间运行指定数量的pod副本。不同之处在于复制pod使用的选择器。Replica Set使用基于集合的选择器，而Replication Controller使用基于权限的选择器。\n\n- Equity-Based选择器：这种类型的选择器允许按标签键和值进行过滤。因此，在外行术语中，基于Equity的选择器将仅查找与标签具有完全相同短语的pod。 示例：假设您的标签键表示app = nginx，那么，使用此选择器，您只能查找标签应用程序等于nginx的那些pod。\n- Selector-Based选择器：此类型的选择器允许根据一组值过滤键。因此，换句话说，基于Selector的选择器将查找已在集合中提及其标签的pod。 示例：假设您的标签键在（nginx，NPS，Apache）中显示应用程序。然后，使用此选择器，如果您的应用程序等于任何nginx，NPS或Apache，则选择器将其视为真实结果。\n","slug":"k8s常见总结","published":1,"updated":"2021-08-12T00:50:16.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxjvzrnh000e0gu6ht3076zh","content":"<p>k8s常见总结1</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-什么是Kubernetes？\"><a href=\"#1-什么是Kubernetes？\" class=\"headerlink\" title=\"1.什么是Kubernetes？\"></a>1.什么是Kubernetes？</h1><p>​    Kubernetes是一个开源容器管理工具，负责容器部署，容器扩缩容以及负载平衡。作为Google的创意之作，它提供了出色的社区，并与所有云提供商合作。因此，我们可以说Kubernetes不是<em>一个容器化平台，而是一个多容器管理解决方案。</em></p>\n<h1 id=\"2-在主机和容器上部署应用程序有什么区别？\"><a href=\"#2-在主机和容器上部署应用程序有什么区别？\" class=\"headerlink\" title=\"2.在主机和容器上部署应用程序有什么区别？\"></a>2.在主机和容器上部署应用程序有什么区别？</h1><p>​    主机上部署应用程序。这种架构将具有操作系统，然后操作系统将具有内核，该内核将在应用程序所需的操作系统上安装各种库。因此，在这种框架中，您可以拥有n个应用程序，并且所有应用程序将共享该操作系统中存在的库，而在容器中部署应用程序时，体系结构则略有不同。</p>\n<p>​    这种架构将有一个内核，这是唯一一个在所有应用程序之间唯一共同的东西。因此，如果有一个需要Java的特定应用程序，那么我们将获得访问Java的特定应用程序，如果有另一个需要Python的应用程序，则只有该特定应用程序才能访问Python。</p>\n<p>​    容器化的，这块与其他应用程序隔离。因此，应用程序具有与系统其余部分隔离的必要库和二进制文件，并且不能被任何其他应用程序侵占。</p>\n<h1 id=\"3-Kubernetes如何简化容器化部署？\"><a href=\"#3-Kubernetes如何简化容器化部署？\" class=\"headerlink\" title=\"3.Kubernetes如何简化容器化部署？\"></a>3.Kubernetes如何简化容器化部署？</h1><p>​    由于典型应用程序将具有跨多个主机运行的容器集群，因此所有这些容器都需要相互通信。因此，要做到这一点，你需要一些能够负载平衡，扩展和监控容器的东西。由于Kubernetes与云无关并且可以在任何公共/私有提供商上运行，因此必须是您简化容器化部署的选择。</p>\n<h1 id=\"4-Kubernetes的集群了解\"><a href=\"#4-Kubernetes的集群了解\" class=\"headerlink\" title=\"4.Kubernetes的集群了解\"></a>4.Kubernetes的集群了解</h1><p>​    Kubernetes背后的基础是我们可以实施所需的状态管理，我的意思是我们可以提供特定配置的集群服务，并且集群服务将在基础架构中运行并运行该配置。</p>\n<p>​    因此，部署文件将具有提供给集群服务所需的所有配置。现在，部署文件将被提供给API，然后由集群服务决定如何在环境中安排这些pod，并确保正确运行的pod数量。</p>\n<p>​    因此，位于服务前面的API，工作节点和节点运行的Kubelet进程，共同构成了Kubernetes集群。</p>\n<h1 id=\"5-什么是Google容器引擎？\"><a href=\"#5-什么是Google容器引擎？\" class=\"headerlink\" title=\"5.什么是Google容器引擎？\"></a>5.什么是Google容器引擎？</h1><p>​    Google Container Engine（GKE）是Docker容器和集群的开源管理平台。这个基于Kubernetes的引擎仅支持在Google的公共云服务中运行的群集。</p>\n<h1 id=\"6-什么是Minikube？\"><a href=\"#6-什么是Minikube？\" class=\"headerlink\" title=\"6.什么是Minikube？\"></a>6.什么是Minikube？</h1><p>​    Minikube是一种工具，可以在本地轻松运行Kubernetes。这将在虚拟机中运行单节点Kubernetes群集。</p>\n<h1 id=\"7-什么是Kubectl？\"><a href=\"#7-什么是Kubectl？\" class=\"headerlink\" title=\"7.什么是Kubectl？\"></a>7.什么是Kubectl？</h1><p>​    Kubectl是一个平台，您可以使用该平台将命令传递给集群。因此，它基本上为CLI提供了针对Kubernetes集群运行命令的方法，以及创建和管理Kubernetes组件的各种方法。</p>\n<h1 id=\"8-什么是Kubelet？\"><a href=\"#8-什么是Kubelet？\" class=\"headerlink\" title=\"8.什么是Kubelet？\"></a>8.什么是Kubelet？</h1><p>​    这是一个代理服务，它在每个节点上运行，并使从服务器与主服务器通信。因此，Kubelet处理PodSpec中提供给它的容器的描述，并确保PodSpec中描述的容器运行正常。</p>\n<h1 id=\"9-Kubernetes-Architecture的不同组件有哪些？\"><a href=\"#9-Kubernetes-Architecture的不同组件有哪些？\" class=\"headerlink\" title=\"9.Kubernetes Architecture的不同组件有哪些？\"></a>9.Kubernetes Architecture的不同组件有哪些？</h1><p>​    Kubernetes Architecture主要有两个组件 - 主节点和工作节点。如下图所示，master和worker节点中包含许多内置组件。主节点具有kube-controller-manager，kube-apiserver，kube-scheduler等。而工作节点具有在每个节点上运行的kubelet和kube-proxy。</p>\n<h1 id=\"10-你对Kube-proxy有什么了解？\"><a href=\"#10-你对Kube-proxy有什么了解？\" class=\"headerlink\" title=\"10.你对Kube-proxy有什么了解？\"></a>10.你对<code>Kube-proxy</code>有什么了解？</h1><p>​    Kube-proxy可以在每个节点上运行，并且可以跨后端网络服务进行简单的TCP / UDP数据包转发。基本上，它是一个网络代理，它反映了每个节点上Kubernetes API中配置的服务。因此，Docker可链接的兼容环境变量提供由代理打开的群集IP和端口。</p>\n<h1 id=\"11-Kubernetes中主节点的工作情况？\"><a href=\"#11-Kubernetes中主节点的工作情况？\" class=\"headerlink\" title=\"11.Kubernetes中主节点的工作情况？\"></a>11.Kubernetes中主节点的工作情况？</h1><p>​    Kubernetes master控制容器存在的节点和节点内部。现在，这些单独的容器包含在容器内部和每个容器内部，您可以根据配置和要求拥有不同数量的容器。因此，如果必须部署pod，则可以使用用户界面或命令行界面部署它们。然后，在节点上调度这些pod，并根据资源需求，将pod分配给这些节点。kube-apiserver确保在Kubernetes节点和主组件之间建立通信。</p>\n<h1 id=\"12-kube-apiserver和kube-scheduler的作用是什么？\"><a href=\"#12-kube-apiserver和kube-scheduler的作用是什么？\" class=\"headerlink\" title=\"12.kube-apiserver和kube-scheduler的作用是什么？\"></a>12.<code>kube-apiserver</code>和<code>kube-scheduler</code>的作用是什么？</h1><p>​    <code>kube-apiserver</code>遵循横向扩展架构，是主节点控制面板的前端。这将公开Kubernetes主节点组件的所有API，并负责在Kubernetes节点和Kubernetes主组件之间建立通信。</p>\n<p>​    <code>kube-scheduler</code>负责工作节点上工作负载的分配和管理。因此，它根据资源需求选择最合适的节点来运行未调度的pod，并跟踪资源利用率。它确保不在已满的节点上调度工作负载。</p>\n<h1 id=\"13-kubernetes控制管理器吗？\"><a href=\"#13-kubernetes控制管理器吗？\" class=\"headerlink\" title=\"13.kubernetes控制管理器吗？\"></a>13.kubernetes控制管理器吗？</h1><p>​    多个控制器进程在主节点上运行，但是一起编译为单个进程运行，即Kubernetes控制器管理器。因此，Controller Manager是一个嵌入控制器并执行命名空间创建和垃圾收集的守护程序。它拥有责任并与API服务器通信以管理端点。</p>\n<h1 id=\"14-什么是ETCD？\"><a href=\"#14-什么是ETCD？\" class=\"headerlink\" title=\"14.什么是ETCD？\"></a>14.什么是ETCD？</h1><p>​    Etcd是用Go编程语言编写的，是一个分布式键值存储，用于协调分布式工作。因此，Etcd存储Kubernetes集群的配置数据，表示在任何给定时间点的集群状态。</p>\n<h2 id=\"15-Kubernetes的负载均衡器了解\"><a href=\"#15-Kubernetes的负载均衡器了解\" class=\"headerlink\" title=\"15.Kubernetes的负载均衡器了解\"></a>15.Kubernetes的负载均衡器了解</h2><p>​    负载均衡器是暴露服务的最常见和标准方式之一。根据工作环境使用两种类型的负载均衡器，即<em>内部负载均衡器</em>或<em>外部负载均衡器</em>。内部负载均衡器自动平衡负载并使用所需配置分配容器，而外部负载均衡器将流量从外部负载引导至后端容器。</p>\n<h1 id=\"16-Ingress网络，它是如何工作的？\"><a href=\"#16-Ingress网络，它是如何工作的？\" class=\"headerlink\" title=\"16.Ingress网络，它是如何工作的？\"></a>16.Ingress网络，它是如何工作的？</h1><p>​    Ingress网络是一组规则，充当Kubernetes集群的入口点。这允许入站连接，可以将其配置为通过可访问的URL，负载平衡流量或通过提供基于名称的虚拟主机从外部提供服务。因此，Ingress是一个API对象，通常通过HTTP管理集群中服务的外部访问，是暴露服务的最有效方式。</p>\n<h1 id=\"17-Replica-Set-和-Replication-Controller之间有什么区别？\"><a href=\"#17-Replica-Set-和-Replication-Controller之间有什么区别？\" class=\"headerlink\" title=\"17.Replica Set 和 Replication Controller之间有什么区别？\"></a>17.Replica Set 和 Replication Controller之间有什么区别？</h1><p>​    <code>Replica Set </code>和 <code>Replication Controller</code>几乎完全相同。它们都确保在任何给定时间运行指定数量的pod副本。不同之处在于复制pod使用的选择器。Replica Set使用基于集合的选择器，而Replication Controller使用基于权限的选择器。</p>\n<ul>\n<li>Equity-Based选择器：这种类型的选择器允许按标签键和值进行过滤。因此，在外行术语中，基于Equity的选择器将仅查找与标签具有完全相同短语的pod。 示例：假设您的标签键表示app = nginx，那么，使用此选择器，您只能查找标签应用程序等于nginx的那些pod。</li>\n<li>Selector-Based选择器：此类型的选择器允许根据一组值过滤键。因此，换句话说，基于Selector的选择器将查找已在集合中提及其标签的pod。 示例：假设您的标签键在（nginx，NPS，Apache）中显示应用程序。然后，使用此选择器，如果您的应用程序等于任何nginx，NPS或Apache，则选择器将其视为真实结果。</li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n","variables":""}},"length":3006,"excerpt":"<p>k8s常见总结1</p>","more":"<h1 id=\"1-什么是Kubernetes？\"><a href=\"#1-什么是Kubernetes？\" class=\"headerlink\" title=\"1.什么是Kubernetes？\"></a>1.什么是Kubernetes？</h1><p>​    Kubernetes是一个开源容器管理工具，负责容器部署，容器扩缩容以及负载平衡。作为Google的创意之作，它提供了出色的社区，并与所有云提供商合作。因此，我们可以说Kubernetes不是<em>一个容器化平台，而是一个多容器管理解决方案。</em></p>\n<h1 id=\"2-在主机和容器上部署应用程序有什么区别？\"><a href=\"#2-在主机和容器上部署应用程序有什么区别？\" class=\"headerlink\" title=\"2.在主机和容器上部署应用程序有什么区别？\"></a>2.在主机和容器上部署应用程序有什么区别？</h1><p>​    主机上部署应用程序。这种架构将具有操作系统，然后操作系统将具有内核，该内核将在应用程序所需的操作系统上安装各种库。因此，在这种框架中，您可以拥有n个应用程序，并且所有应用程序将共享该操作系统中存在的库，而在容器中部署应用程序时，体系结构则略有不同。</p>\n<p>​    这种架构将有一个内核，这是唯一一个在所有应用程序之间唯一共同的东西。因此，如果有一个需要Java的特定应用程序，那么我们将获得访问Java的特定应用程序，如果有另一个需要Python的应用程序，则只有该特定应用程序才能访问Python。</p>\n<p>​    容器化的，这块与其他应用程序隔离。因此，应用程序具有与系统其余部分隔离的必要库和二进制文件，并且不能被任何其他应用程序侵占。</p>\n<h1 id=\"3-Kubernetes如何简化容器化部署？\"><a href=\"#3-Kubernetes如何简化容器化部署？\" class=\"headerlink\" title=\"3.Kubernetes如何简化容器化部署？\"></a>3.Kubernetes如何简化容器化部署？</h1><p>​    由于典型应用程序将具有跨多个主机运行的容器集群，因此所有这些容器都需要相互通信。因此，要做到这一点，你需要一些能够负载平衡，扩展和监控容器的东西。由于Kubernetes与云无关并且可以在任何公共/私有提供商上运行，因此必须是您简化容器化部署的选择。</p>\n<h1 id=\"4-Kubernetes的集群了解\"><a href=\"#4-Kubernetes的集群了解\" class=\"headerlink\" title=\"4.Kubernetes的集群了解\"></a>4.Kubernetes的集群了解</h1><p>​    Kubernetes背后的基础是我们可以实施所需的状态管理，我的意思是我们可以提供特定配置的集群服务，并且集群服务将在基础架构中运行并运行该配置。</p>\n<p>​    因此，部署文件将具有提供给集群服务所需的所有配置。现在，部署文件将被提供给API，然后由集群服务决定如何在环境中安排这些pod，并确保正确运行的pod数量。</p>\n<p>​    因此，位于服务前面的API，工作节点和节点运行的Kubelet进程，共同构成了Kubernetes集群。</p>\n<h1 id=\"5-什么是Google容器引擎？\"><a href=\"#5-什么是Google容器引擎？\" class=\"headerlink\" title=\"5.什么是Google容器引擎？\"></a>5.什么是Google容器引擎？</h1><p>​    Google Container Engine（GKE）是Docker容器和集群的开源管理平台。这个基于Kubernetes的引擎仅支持在Google的公共云服务中运行的群集。</p>\n<h1 id=\"6-什么是Minikube？\"><a href=\"#6-什么是Minikube？\" class=\"headerlink\" title=\"6.什么是Minikube？\"></a>6.什么是Minikube？</h1><p>​    Minikube是一种工具，可以在本地轻松运行Kubernetes。这将在虚拟机中运行单节点Kubernetes群集。</p>\n<h1 id=\"7-什么是Kubectl？\"><a href=\"#7-什么是Kubectl？\" class=\"headerlink\" title=\"7.什么是Kubectl？\"></a>7.什么是Kubectl？</h1><p>​    Kubectl是一个平台，您可以使用该平台将命令传递给集群。因此，它基本上为CLI提供了针对Kubernetes集群运行命令的方法，以及创建和管理Kubernetes组件的各种方法。</p>\n<h1 id=\"8-什么是Kubelet？\"><a href=\"#8-什么是Kubelet？\" class=\"headerlink\" title=\"8.什么是Kubelet？\"></a>8.什么是Kubelet？</h1><p>​    这是一个代理服务，它在每个节点上运行，并使从服务器与主服务器通信。因此，Kubelet处理PodSpec中提供给它的容器的描述，并确保PodSpec中描述的容器运行正常。</p>\n<h1 id=\"9-Kubernetes-Architecture的不同组件有哪些？\"><a href=\"#9-Kubernetes-Architecture的不同组件有哪些？\" class=\"headerlink\" title=\"9.Kubernetes Architecture的不同组件有哪些？\"></a>9.Kubernetes Architecture的不同组件有哪些？</h1><p>​    Kubernetes Architecture主要有两个组件 - 主节点和工作节点。如下图所示，master和worker节点中包含许多内置组件。主节点具有kube-controller-manager，kube-apiserver，kube-scheduler等。而工作节点具有在每个节点上运行的kubelet和kube-proxy。</p>\n<h1 id=\"10-你对Kube-proxy有什么了解？\"><a href=\"#10-你对Kube-proxy有什么了解？\" class=\"headerlink\" title=\"10.你对Kube-proxy有什么了解？\"></a>10.你对<code>Kube-proxy</code>有什么了解？</h1><p>​    Kube-proxy可以在每个节点上运行，并且可以跨后端网络服务进行简单的TCP / UDP数据包转发。基本上，它是一个网络代理，它反映了每个节点上Kubernetes API中配置的服务。因此，Docker可链接的兼容环境变量提供由代理打开的群集IP和端口。</p>\n<h1 id=\"11-Kubernetes中主节点的工作情况？\"><a href=\"#11-Kubernetes中主节点的工作情况？\" class=\"headerlink\" title=\"11.Kubernetes中主节点的工作情况？\"></a>11.Kubernetes中主节点的工作情况？</h1><p>​    Kubernetes master控制容器存在的节点和节点内部。现在，这些单独的容器包含在容器内部和每个容器内部，您可以根据配置和要求拥有不同数量的容器。因此，如果必须部署pod，则可以使用用户界面或命令行界面部署它们。然后，在节点上调度这些pod，并根据资源需求，将pod分配给这些节点。kube-apiserver确保在Kubernetes节点和主组件之间建立通信。</p>\n<h1 id=\"12-kube-apiserver和kube-scheduler的作用是什么？\"><a href=\"#12-kube-apiserver和kube-scheduler的作用是什么？\" class=\"headerlink\" title=\"12.kube-apiserver和kube-scheduler的作用是什么？\"></a>12.<code>kube-apiserver</code>和<code>kube-scheduler</code>的作用是什么？</h1><p>​    <code>kube-apiserver</code>遵循横向扩展架构，是主节点控制面板的前端。这将公开Kubernetes主节点组件的所有API，并负责在Kubernetes节点和Kubernetes主组件之间建立通信。</p>\n<p>​    <code>kube-scheduler</code>负责工作节点上工作负载的分配和管理。因此，它根据资源需求选择最合适的节点来运行未调度的pod，并跟踪资源利用率。它确保不在已满的节点上调度工作负载。</p>\n<h1 id=\"13-kubernetes控制管理器吗？\"><a href=\"#13-kubernetes控制管理器吗？\" class=\"headerlink\" title=\"13.kubernetes控制管理器吗？\"></a>13.kubernetes控制管理器吗？</h1><p>​    多个控制器进程在主节点上运行，但是一起编译为单个进程运行，即Kubernetes控制器管理器。因此，Controller Manager是一个嵌入控制器并执行命名空间创建和垃圾收集的守护程序。它拥有责任并与API服务器通信以管理端点。</p>\n<h1 id=\"14-什么是ETCD？\"><a href=\"#14-什么是ETCD？\" class=\"headerlink\" title=\"14.什么是ETCD？\"></a>14.什么是ETCD？</h1><p>​    Etcd是用Go编程语言编写的，是一个分布式键值存储，用于协调分布式工作。因此，Etcd存储Kubernetes集群的配置数据，表示在任何给定时间点的集群状态。</p>\n<h2 id=\"15-Kubernetes的负载均衡器了解\"><a href=\"#15-Kubernetes的负载均衡器了解\" class=\"headerlink\" title=\"15.Kubernetes的负载均衡器了解\"></a>15.Kubernetes的负载均衡器了解</h2><p>​    负载均衡器是暴露服务的最常见和标准方式之一。根据工作环境使用两种类型的负载均衡器，即<em>内部负载均衡器</em>或<em>外部负载均衡器</em>。内部负载均衡器自动平衡负载并使用所需配置分配容器，而外部负载均衡器将流量从外部负载引导至后端容器。</p>\n<h1 id=\"16-Ingress网络，它是如何工作的？\"><a href=\"#16-Ingress网络，它是如何工作的？\" class=\"headerlink\" title=\"16.Ingress网络，它是如何工作的？\"></a>16.Ingress网络，它是如何工作的？</h1><p>​    Ingress网络是一组规则，充当Kubernetes集群的入口点。这允许入站连接，可以将其配置为通过可访问的URL，负载平衡流量或通过提供基于名称的虚拟主机从外部提供服务。因此，Ingress是一个API对象，通常通过HTTP管理集群中服务的外部访问，是暴露服务的最有效方式。</p>\n<h1 id=\"17-Replica-Set-和-Replication-Controller之间有什么区别？\"><a href=\"#17-Replica-Set-和-Replication-Controller之间有什么区别？\" class=\"headerlink\" title=\"17.Replica Set 和 Replication Controller之间有什么区别？\"></a>17.Replica Set 和 Replication Controller之间有什么区别？</h1><p>​    <code>Replica Set </code>和 <code>Replication Controller</code>几乎完全相同。它们都确保在任何给定时间运行指定数量的pod副本。不同之处在于复制pod使用的选择器。Replica Set使用基于集合的选择器，而Replication Controller使用基于权限的选择器。</p>\n<ul>\n<li>Equity-Based选择器：这种类型的选择器允许按标签键和值进行过滤。因此，在外行术语中，基于Equity的选择器将仅查找与标签具有完全相同短语的pod。 示例：假设您的标签键表示app = nginx，那么，使用此选择器，您只能查找标签应用程序等于nginx的那些pod。</li>\n<li>Selector-Based选择器：此类型的选择器允许根据一组值过滤键。因此，换句话说，基于Selector的选择器将查找已在集合中提及其标签的pod。 示例：假设您的标签键在（nginx，NPS，Apache）中显示应用程序。然后，使用此选择器，如果您的应用程序等于任何nginx，NPS或Apache，则选择器将其视为真实结果。</li>\n</ul>"},{"title":"k8s集群加入与删除","date":"2021-08-02T08:22:11.000Z","_content":"\nk8s集群加入与删除\n\n<!--more-->\n\n# 1.添加节点\n\n>通过kubeadm初始化后，都会提供node加入的token:\n>默认token的有效期为24小时，当过期之后，该token就不可用了。\n```shell\n# master 上重新生成新的 token\n[root@k8s-master ~]# kubeadm token create --print-join-command\nkubeadm join 192.168.81.57:6443 --token xv27mz.zx9qvxzr1n9ver8b     --discovery-token-ca-cert-hash sha256:e79022dddd20ebaa3304fe62856393cb58a5b5b6e42e51333224e1841bbf49eb \n[root@k8s-master ~]# kubeadm token list\nTOKEN                     TTL         EXPIRES                     USAGES                   DESCRIPTION                                                EXTRA GROUPS\nxv27mz.zx9qvxzr1n9ver8b   23h         2021-06-17T09:26:38+08:00   authentication,signing   <none>                                                     system:bootstrappers:kubeadm:default-node-token\n\n```\n\n\n```shel\n# 新节点运行token\n[root@k8s-node2 ~]# kubeadm join 192.168.81.57:6443 --token xv27mz.zx9qvxzr1n9ver8b     --discovery-token-ca-cert-hash sha256:e79022dddd20ebaa3304fe62856393cb58a5b5b6e42e51333224e1841bbf49eb \n```\n\n\n```shell\n# master 查看新节点的是否加入\n[root@k8s-master ~]# kubectl get node \nNAME         STATUS     ROLES                  AGE   VERSION\nk8s-master   Ready      control-plane,master   70d   v1.20.0\nk8s-node1    Ready      <none>                 70d   v1.20.0\nk8s-node2    NotReady   <none>                 3s    v1.20.0\n[root@k8s-master ~]# systemctl restart kubelet \n[root@k8s-master ~]# kubectl get node \nNAME         STATUS   ROLES                  AGE   VERSION\nk8s-master   Ready    control-plane,master   70d   v1.20.0\nk8s-node1    Ready    <none>                 70d   v1.20.0\nk8s-node2    Ready    <none>                 12s   v1.20.0\n\n```\n\n>node节点重新加入集群操作【node节点操作】\n\n\nnode节点要重新加入集群，需要重置集群状态，命令：kubeadm reset，回车后输入y即可\n```shell\nkubeadm reset\n```\n重新加入集群\n```shell\nkubeadm join 192.168.81.57:6443 --token xv27mz.zx9qvxzr1n9ver8b     --discovery-token-ca-cert-hash sha256:e79022dddd20ebaa3304fe62856393cb58a5b5b6e42e51333224e1841bbf49eb \n```\n\n\n\n# 2.移除节点\n\n> k8s集群 移除节点操作\n\n1.确认需要移除的节点上面没有部署我们所需要的资源\n\n```shell\nkubectl get pod -A -o wide |grep -w \"node名\" \n```\n2.设置该节点为不可调度(不分配新的资源到该节点上) (drain命令已经会自动把node设置为不可调度，所以可以省略执行cordon命令)\n```shell\nkubectl cordon node\n```\n\n3.确认完成后，先排空节点上的pod(每个节点上面都会运行一些系统自带的pod) (daemonset不会被排出节点)\n```shell\nkubectl drain node --ignore-daemonsets --force\n```\n\n4.排空pod之后，便可以删除节点了\n\n```shell\nkubectl delete node node名\n```\n\n\n\n参考链接：[https://blog.csdn.net/yexusanye/](https://blog.csdn.net/yexusanye/article/details/117947399)\n\n","source":"_posts/k8s集群加入与删除.md","raw":"---\ntitle: k8s集群加入与删除\ndate: 2021-08-02 16:22:11\ntags:\n  - Linux\n  - k8s\ncategories: \n  - k8s\n---\n\nk8s集群加入与删除\n\n<!--more-->\n\n# 1.添加节点\n\n>通过kubeadm初始化后，都会提供node加入的token:\n>默认token的有效期为24小时，当过期之后，该token就不可用了。\n```shell\n# master 上重新生成新的 token\n[root@k8s-master ~]# kubeadm token create --print-join-command\nkubeadm join 192.168.81.57:6443 --token xv27mz.zx9qvxzr1n9ver8b     --discovery-token-ca-cert-hash sha256:e79022dddd20ebaa3304fe62856393cb58a5b5b6e42e51333224e1841bbf49eb \n[root@k8s-master ~]# kubeadm token list\nTOKEN                     TTL         EXPIRES                     USAGES                   DESCRIPTION                                                EXTRA GROUPS\nxv27mz.zx9qvxzr1n9ver8b   23h         2021-06-17T09:26:38+08:00   authentication,signing   <none>                                                     system:bootstrappers:kubeadm:default-node-token\n\n```\n\n\n```shel\n# 新节点运行token\n[root@k8s-node2 ~]# kubeadm join 192.168.81.57:6443 --token xv27mz.zx9qvxzr1n9ver8b     --discovery-token-ca-cert-hash sha256:e79022dddd20ebaa3304fe62856393cb58a5b5b6e42e51333224e1841bbf49eb \n```\n\n\n```shell\n# master 查看新节点的是否加入\n[root@k8s-master ~]# kubectl get node \nNAME         STATUS     ROLES                  AGE   VERSION\nk8s-master   Ready      control-plane,master   70d   v1.20.0\nk8s-node1    Ready      <none>                 70d   v1.20.0\nk8s-node2    NotReady   <none>                 3s    v1.20.0\n[root@k8s-master ~]# systemctl restart kubelet \n[root@k8s-master ~]# kubectl get node \nNAME         STATUS   ROLES                  AGE   VERSION\nk8s-master   Ready    control-plane,master   70d   v1.20.0\nk8s-node1    Ready    <none>                 70d   v1.20.0\nk8s-node2    Ready    <none>                 12s   v1.20.0\n\n```\n\n>node节点重新加入集群操作【node节点操作】\n\n\nnode节点要重新加入集群，需要重置集群状态，命令：kubeadm reset，回车后输入y即可\n```shell\nkubeadm reset\n```\n重新加入集群\n```shell\nkubeadm join 192.168.81.57:6443 --token xv27mz.zx9qvxzr1n9ver8b     --discovery-token-ca-cert-hash sha256:e79022dddd20ebaa3304fe62856393cb58a5b5b6e42e51333224e1841bbf49eb \n```\n\n\n\n# 2.移除节点\n\n> k8s集群 移除节点操作\n\n1.确认需要移除的节点上面没有部署我们所需要的资源\n\n```shell\nkubectl get pod -A -o wide |grep -w \"node名\" \n```\n2.设置该节点为不可调度(不分配新的资源到该节点上) (drain命令已经会自动把node设置为不可调度，所以可以省略执行cordon命令)\n```shell\nkubectl cordon node\n```\n\n3.确认完成后，先排空节点上的pod(每个节点上面都会运行一些系统自带的pod) (daemonset不会被排出节点)\n```shell\nkubectl drain node --ignore-daemonsets --force\n```\n\n4.排空pod之后，便可以删除节点了\n\n```shell\nkubectl delete node node名\n```\n\n\n\n参考链接：[https://blog.csdn.net/yexusanye/](https://blog.csdn.net/yexusanye/article/details/117947399)\n\n","slug":"k8s集群加入与删除","published":1,"updated":"2021-12-21T02:32:58.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxjvzrnj000j0gu66c395z5o","content":"<p>k8s集群加入与删除</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-添加节点\"><a href=\"#1-添加节点\" class=\"headerlink\" title=\"1.添加节点\"></a>1.添加节点</h1><blockquote>\n<p>通过kubeadm初始化后，都会提供node加入的token:<br>默认token的有效期为24小时，当过期之后，该token就不可用了。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> master 上重新生成新的 token</span></span><br><span class=\"line\">[root@k8s-master ~]# kubeadm token create --print-join-command</span><br><span class=\"line\">kubeadm join 192.168.81.57:6443 --token xv27mz.zx9qvxzr1n9ver8b     --discovery-token-ca-cert-hash sha256:e79022dddd20ebaa3304fe62856393cb58a5b5b6e42e51333224e1841bbf49eb </span><br><span class=\"line\">[root@k8s-master ~]# kubeadm token list</span><br><span class=\"line\">TOKEN                     TTL         EXPIRES                     USAGES                   DESCRIPTION                                                EXTRA GROUPS</span><br><span class=\"line\">xv27mz.zx9qvxzr1n9ver8b   23h         2021-06-17T09:26:38+08:00   authentication,signing   &lt;none&gt;                                                     system:bootstrappers:kubeadm:default-node-token</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新节点运行token</span><br><span class=\"line\">[root@k8s-node2 ~]# kubeadm join 192.168.81.57:6443 --token xv27mz.zx9qvxzr1n9ver8b     --discovery-token-ca-cert-hash sha256:e79022dddd20ebaa3304fe62856393cb58a5b5b6e42e51333224e1841bbf49eb </span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> master 查看新节点的是否加入</span></span><br><span class=\"line\">[root@k8s-master ~]# kubectl get node </span><br><span class=\"line\">NAME         STATUS     ROLES                  AGE   VERSION</span><br><span class=\"line\">k8s-master   Ready      control-plane,master   70d   v1.20.0</span><br><span class=\"line\">k8s-node1    Ready      &lt;none&gt;                 70d   v1.20.0</span><br><span class=\"line\">k8s-node2    NotReady   &lt;none&gt;                 3s    v1.20.0</span><br><span class=\"line\">[root@k8s-master ~]# systemctl restart kubelet </span><br><span class=\"line\">[root@k8s-master ~]# kubectl get node </span><br><span class=\"line\">NAME         STATUS   ROLES                  AGE   VERSION</span><br><span class=\"line\">k8s-master   Ready    control-plane,master   70d   v1.20.0</span><br><span class=\"line\">k8s-node1    Ready    &lt;none&gt;                 70d   v1.20.0</span><br><span class=\"line\">k8s-node2    Ready    &lt;none&gt;                 12s   v1.20.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>node节点重新加入集群操作【node节点操作】</p>\n</blockquote>\n<p>node节点要重新加入集群，需要重置集群状态，命令：kubeadm reset，回车后输入y即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm reset</span><br></pre></td></tr></table></figure>\n<p>重新加入集群</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 192.168.81.57:6443 --token xv27mz.zx9qvxzr1n9ver8b     --discovery-token-ca-cert-hash sha256:e79022dddd20ebaa3304fe62856393cb58a5b5b6e42e51333224e1841bbf49eb </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-移除节点\"><a href=\"#2-移除节点\" class=\"headerlink\" title=\"2.移除节点\"></a>2.移除节点</h1><blockquote>\n<p>k8s集群 移除节点操作</p>\n</blockquote>\n<p>1.确认需要移除的节点上面没有部署我们所需要的资源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -A -o wide |grep -w &quot;node名&quot; </span><br></pre></td></tr></table></figure>\n<p>2.设置该节点为不可调度(不分配新的资源到该节点上) (drain命令已经会自动把node设置为不可调度，所以可以省略执行cordon命令)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl cordon node</span><br></pre></td></tr></table></figure>\n\n<p>3.确认完成后，先排空节点上的pod(每个节点上面都会运行一些系统自带的pod) (daemonset不会被排出节点)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl drain node --ignore-daemonsets --force</span><br></pre></td></tr></table></figure>\n\n<p>4.排空pod之后，便可以删除节点了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl delete node node名</span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考链接：<a href=\"https://blog.csdn.net/yexusanye/article/details/117947399\">https://blog.csdn.net/yexusanye/</a></p>\n","site":{"data":{"post-body-end":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n","variables":""}},"length":1759,"excerpt":"<p>k8s集群加入与删除</p>","more":"<h1 id=\"1-添加节点\"><a href=\"#1-添加节点\" class=\"headerlink\" title=\"1.添加节点\"></a>1.添加节点</h1><blockquote>\n<p>通过kubeadm初始化后，都会提供node加入的token:<br>默认token的有效期为24小时，当过期之后，该token就不可用了。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> master 上重新生成新的 token</span></span><br><span class=\"line\">[root@k8s-master ~]# kubeadm token create --print-join-command</span><br><span class=\"line\">kubeadm join 192.168.81.57:6443 --token xv27mz.zx9qvxzr1n9ver8b     --discovery-token-ca-cert-hash sha256:e79022dddd20ebaa3304fe62856393cb58a5b5b6e42e51333224e1841bbf49eb </span><br><span class=\"line\">[root@k8s-master ~]# kubeadm token list</span><br><span class=\"line\">TOKEN                     TTL         EXPIRES                     USAGES                   DESCRIPTION                                                EXTRA GROUPS</span><br><span class=\"line\">xv27mz.zx9qvxzr1n9ver8b   23h         2021-06-17T09:26:38+08:00   authentication,signing   &lt;none&gt;                                                     system:bootstrappers:kubeadm:default-node-token</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新节点运行token</span><br><span class=\"line\">[root@k8s-node2 ~]# kubeadm join 192.168.81.57:6443 --token xv27mz.zx9qvxzr1n9ver8b     --discovery-token-ca-cert-hash sha256:e79022dddd20ebaa3304fe62856393cb58a5b5b6e42e51333224e1841bbf49eb </span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> master 查看新节点的是否加入</span></span><br><span class=\"line\">[root@k8s-master ~]# kubectl get node </span><br><span class=\"line\">NAME         STATUS     ROLES                  AGE   VERSION</span><br><span class=\"line\">k8s-master   Ready      control-plane,master   70d   v1.20.0</span><br><span class=\"line\">k8s-node1    Ready      &lt;none&gt;                 70d   v1.20.0</span><br><span class=\"line\">k8s-node2    NotReady   &lt;none&gt;                 3s    v1.20.0</span><br><span class=\"line\">[root@k8s-master ~]# systemctl restart kubelet </span><br><span class=\"line\">[root@k8s-master ~]# kubectl get node </span><br><span class=\"line\">NAME         STATUS   ROLES                  AGE   VERSION</span><br><span class=\"line\">k8s-master   Ready    control-plane,master   70d   v1.20.0</span><br><span class=\"line\">k8s-node1    Ready    &lt;none&gt;                 70d   v1.20.0</span><br><span class=\"line\">k8s-node2    Ready    &lt;none&gt;                 12s   v1.20.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>node节点重新加入集群操作【node节点操作】</p>\n</blockquote>\n<p>node节点要重新加入集群，需要重置集群状态，命令：kubeadm reset，回车后输入y即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm reset</span><br></pre></td></tr></table></figure>\n<p>重新加入集群</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 192.168.81.57:6443 --token xv27mz.zx9qvxzr1n9ver8b     --discovery-token-ca-cert-hash sha256:e79022dddd20ebaa3304fe62856393cb58a5b5b6e42e51333224e1841bbf49eb </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-移除节点\"><a href=\"#2-移除节点\" class=\"headerlink\" title=\"2.移除节点\"></a>2.移除节点</h1><blockquote>\n<p>k8s集群 移除节点操作</p>\n</blockquote>\n<p>1.确认需要移除的节点上面没有部署我们所需要的资源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -A -o wide |grep -w &quot;node名&quot; </span><br></pre></td></tr></table></figure>\n<p>2.设置该节点为不可调度(不分配新的资源到该节点上) (drain命令已经会自动把node设置为不可调度，所以可以省略执行cordon命令)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl cordon node</span><br></pre></td></tr></table></figure>\n\n<p>3.确认完成后，先排空节点上的pod(每个节点上面都会运行一些系统自带的pod) (daemonset不会被排出节点)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl drain node --ignore-daemonsets --force</span><br></pre></td></tr></table></figure>\n\n<p>4.排空pod之后，便可以删除节点了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl delete node node名</span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考链接：<a href=\"https://blog.csdn.net/yexusanye/article/details/117947399\">https://blog.csdn.net/yexusanye/</a></p>"},{"title":"Kubernetes常见运维技巧","date":"2021-07-20T00:53:03.000Z","_content":"\nKubernetes常见运维技巧\n\n<!--more-->\n\n## **1、Node的隔离和恢复**\n\n```yaml\napiVersion: v1\nkind: Node\nmetadata:\n  name: kubernetes-minion1\n  labels:\n    kubernetes.io/hostname: kubernetes-minion1\nspec:\n  unschedulable: true\n```\n\n然后，通过kubectl replace命令完成对Node状态的修改：\n\n\n\n```shell\n$ kubectl replace -f unschedule_node.yaml\nnodes/kubernetes-minion1\n```\n\n查看Node的状态，可以观察到在Node的状态中增加了一项SchedulingDisabled：\n\n\n\n```shell\n$ kubectl get nodes\nNAME                 LABELS                                      STATUS\nkubernetes-minion1   kubernetes.io/hostname=kubernetes-minion1   Ready, SchedulingDisabled\n```\n\n\n\n对于后续创建的Pod，系统将不会再向该Node进行调度。\n\n另一种方法是不使用配置文件，直接使用kubectl patch命令完成：\n\n\n\n```shell\n$ kubectl patch node kubernetes-minion1 -p '{＂spec＂:{＂unschedulable＂:true}}'\n```\n\n\n\n需要注意的是，将某个Node脱离调度范围时，在其上运行的Pod并不会自动停止，管理员需要手动停止在该Node上运行的Pod。\n\n同样，如果需要将某个Node重新纳入集群调度范围，则将unschedulable设置为false，再次执行kubectl replace或kubectl patch命令就能恢复系统对该Node的调度。\n\n```shell\n$ kubectl cordon node-01\t# 设置为不可调度\n$ kubectl uncordon node-01\t# 取消不可调度\n\n$ kubectl drain ek8s-node-1 --ignore-daemonsets # 驱逐节点上 Pod\n```\n\n\n\n## **2、Node的扩容**\n\n​\t在实际生产系统中会经常遇到服务器容量不足的情况，这时就需要购买新的服务器，然后将应用系统进行水平扩展来完成对系统的扩容。\n​\t在Kubernetes集群中，对于一个新Node的加入是非常简单的。可以在Node节点上安装Docker、Kubelet和kube-proxy服务，然后将Kubelet和kube-proxy的启动参数中的Master URL指定为当前Kubernetes集群Master的地址，最后启动这些服务。基于Kubelet的自动注册机制，新的Node将会自动加入现有的Kubernetes集群中，如图1所示。\n\n![image-20210720091116835](/images/Kubernetes常见运维技巧.assets/image-20210720091116835.png)\n\nKubernetes Master在接受了新Node的注册之后，会自动将其纳入当前集群的调度范围内，在之后创建容器时，就可以向新的Node进行调度了。\n\n通过这种机制，Kubernetes实现了集群的扩容。\n\n## **3、Pod动态扩容和缩放**\n\n在实际生产系统中，我们经常会遇到某个服务需要扩容的场景，也可能会遇到由于资源紧张或者工作负载降低而需要减少服务实例数的场景。此时我们可以利用命令kubectl scale rc来完成这些任务。以redis-slave RC为例，已定义的最初副本数量为2，通过执行下面的命令将redis-slave RC控制的Pod副本数量从初始的2更新为3：\n\n\n\n```shell\n$ kubectl scale rc redis-slave --replicas=3\nscaled\n```\n\n\n\n执行kubectl get pods命令来验证Pod的副本数量增加到3：\n\n\n\n```shell\n$ kubectl get pods\nNAME                   READY     STATUS    RESTARTS   AGE\nredis-slave-4na2n    1/1       Running   0          1h\nredis-slave-92u3k    1/1       Running   0          1h\nredis-slave-palab    1/1       Running   0          2m\n```\n\n\n\n将--replicas设置为比当前Pod副本数量更小的数字，系统将会“杀掉”一些运行中的Pod，即可实现应用集群缩容：\n\n\n\n```shell\n$ kubectl scale rc redis-slave --replicas=1\nscaled\n\n$ kubectl get pods\nNAME                 \tREADY     \tSTATUS    RESTARTS   AGE\nredis-slave-4na2n    1/1       \tRunning   0          1h\n```\n\n## **4、更新资源对象的Label**\n\nLabel（标签）作为用户可灵活定义的对象属性，在已创建的对象上，仍然可以随时通过kubectl label命令对其进行增加、修改、删除等操作。\n\n例如，我们要给已创建的Pod“redis-master-bobr0”添加一个标签role=backend：\n\n\n\n```\n$ kubectl label pod redis-master-bobr0 role=backend\n```\n\n\n\n查看该Pod的Label：\n\n\n\n```\n$ kubectl get pods -Lrole\nNAME                 READY     STATUS    RESTARTS   AGE       ROLE\nredis-master-bobr0   1/1       Running   0          3m        backend\n```\n\n\n\n删除一个Label，只需在命令行最后指定Label的key名并与一个减号相连即可：\n\n\n\n```shell\n$ kubectl label pod redis-master-bobr0 role-\n```\n\n\n\n修改一个Label的值，需要加上--overwrite参数：\n\n\n\n```shell\n$ kubectl label pod redis-master-bobr0 role=master --overwrite\n```\n\n## **5、将Pod调度到指定的Node**\n\n我们知道，Kubernetes的Scheduler服务（kube-scheduler进程）负责实现Pod的调度，整个调度过程通过执行一系列复杂的算法最终为每个Pod计算出一个最佳的目标节点，这一过程是自动完成的，我们无法知道Pod最终会被调度到哪个节点上。有时我们可能需要将Pod调度到一个指定的Node上，此时，我们可以通过Node的标签（Label）和Pod的nodeSelector属性相匹配，来达到上述目的。\n\n首先，我们可以通过kubectl label命令给目标Node打上一个特定的标签，下面是此命令的完整用法：\n\n\n\n```shell\nkubectl label nodes <node-name> <label-key>=<label-value>\n```\n\n\n\n这里，我们为kubernetes-minion1节点打上一个zone=north的标签，表明它是“北方”的一个节点：\n\n\n\n```shell\n$ kubectl label nodes kubernetes-minion1 zone=north\nNAME                 LABELS                                                 STATUS\nkubernetes-minion1   kubernetes.io/hostname=kubernetes-minion1,zone=north   Ready\n```\n\n\n\n上述命令行操作也可以通过修改资源定义文件的方式，并执行kubectl replace -f xxx.yaml命令来完成。\n\n然后，在Pod的配置文件中加入nodeSelector定义，以redis-master-controller.yaml为例：\n\n\n\n```yaml\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: redis-master\n  labels:\n    name: redis-master\nspec:\n  replicas: 1\n  selector:\n    name: redis-master\n  template:\n    metadata:\n      labels:\n        name: redis-master\n    spec:\n      containers:\n      - name: master\n        image: kubeguide/redis-master\n        ports:\n        - containerPort: 6379\n      nodeSelector:\n        zone: north\n```\n\n\n\n运行kubectl create -f命令创建Pod，scheduler就会将该Pod调度到拥有zone=north标签的Node上去。\n\n使用kubectl get pods -o wide命令可以验证Pod所在的Node：\n\n\n\n```shell\n# kubectl get pods -o wide\nNAME                 READY     STATUS    RESTARTS   AGE       NODE\nredis-master-f0rqj   1/1       Running   0          19s       kubernetes-minion1\n```\n\n\n\n如果我们给多个Node都定义了相同的标签（例如zone=north），则scheduler将会根据调度算法从这组Node中挑选一个可用的Node进行Pod调度。\n\n这种基于Node标签的调度方式灵活性很高，比如我们可以把一组Node分别贴上“开发环境”“测试验证环境”“用户验收环境”这三组标签中的一种，此时一个Kubernetes集群就承载了3个环境，这将大大提高开发效率。\n\n需要注意的是，如果我们指定了Pod的nodeSelector条件，且集群中不存在包含相应标签的Node时，即使还有其他可供调度的Node，这个Pod也最终会调度失败。\n\n## **6、应用的滚动升级**\n\n当集群中的某个服务需要升级时，我们需要停止目前与该服务相关的所有Pod，然后重新拉取镜像并启动。如果集群规模比较大，则这个工作就变成了一个挑战，而且先全部停止然后逐步升级的方式会导致较长时间的服务不可用。Kubernetes提供了rolling-update（滚动升级）功能来解决上述问题。\n\n滚动升级通过执行kubectl rolling-update命令一键完成，该命令创建了一个新的RC，然后自动控制旧的RC中的Pod副本数量逐渐减少到0，同时新的RC中的Pod副本数量从0逐步增加到目标值，最终实现了Pod的升级。需要注意的是，系统要求新的RC需要与旧的RC在相同的命名空间（Namespace）内，即不能把别人的资产偷偷转移到自家名下。\n\n以redis-master为例，假设当前运行的redis-master Pod是1.0版本，则现在需要升级到2.0版本。\n\n创建redis-master-controller-v2.yaml的配置文件如下：\n\n\n\n```yaml\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: redis-master-v2\n  labels:\t\n    name: redis-master\n    version: v2\nspec:\n  replicas: 1\n  selector:\n    name: redis-master\n    version: v2\n  template:\n    metadata:\n      labels:\n        name: redis-master\n        version: v2\n    spec:\n      containers:\n      - name: master\n        image: kubeguide/redis-master:2.0\n        ports:\n        - containerPort: 6379\n```\n\n\n\n在配置文件中有几处需要注意：\n（1）RC的名字（name）不能与旧的RC的名字相同；\n（2）在selector中应至少有一个Label与旧的RC的Label不同，以标识其为新的RC。\n\n本例中新增了一个名为version的Label，以与旧的RC进行区分。\n\n运行kubectl rolling-update命令完成Pod的滚动升级：\n\n\n\n```shell\n$ kubectl rolling-update redis-master -f redis-master-controller-v2.yaml\n```\n\n\n\nKubectl的执行过程如下：\n\n\n\n```shell\nCreating redis-master-v2\nAt beginning of loop: redis-master replicas: 2, redis-master-v2 replicas: 1\nUpdating redis-master replicas: 2, redis-master-v2 replicas: 1\nAt end of loop: redis-master replicas: 2, redis-master-v2 replicas: 1\nAt beginning of loop: redis-master replicas: 1, redis-master-v2 replicas: 2\nUpdating redis-master replicas: 1, redis-master-v2 replicas: 2\nAt end of loop: redis-master replicas: 1, redis-master-v2 replicas: 2\nAt beginning of loop: redis-master replicas: 0, redis-master-v2 replicas: 3\nUpdating redis-master replicas: 0, redis-master-v2 replicas: 3\nAt end of loop: redis-master replicas: 0, redis-master-v2 replicas: 3\nUpdate succeeded. Deleting redis-master\nredis-master-v2\n```\n\n\n\n等所有新的Pod启动完成后，旧的Pod也被全部销毁，这样就完成了容器集群的更新。\n\n另一种方法是不使用配置文件，直接用kubectl rolling-update命令，加上--image参数指定新版镜像名称来完成Pod的滚动升级：\n\n\n\n```shell\n$ kubectl rolling-update redis-master --image=redis-master:2.0\n```\n\n\n\n与使用配置文件的方式不同，执行的结果是旧的RC被删除，新的RC仍将使用旧的RC的名字。\n\nKubectl的执行过程如下：\n\n\n\n```shell\nCreating redis-master-ea866a5d2c08588c3375b86fb253db75\nAt beginning of loop: redis-master replicas: 2, redis-master-ea866a5d2c08588c 3375b86fb253db75 replicas: 1\nUpdating redis-master replicas: 2, redis-master-ea866a5d2c08588c3375b86fb253db 75 replicas: 1\nAt end of loop: redis-master replicas: 2, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 1\nAt beginning of loop: redis-master replicas: 1, redis-master-ea866a5d2c08588c 3375b86fb253db75 replicas: 2\nUpdating redis-master replicas: 1, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 2\nAt end of loop: redis-master replicas: 1, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 2\nAt beginning of loop: redis-master replicas: 0, redis-master-ea866a5d2c08588c 3375b86fb253db75 replicas: 3\nUpdating redis-master replicas: 0, redis-master-ea866a5d2c08588c3375b86fb253db 75 replicas: 3\nAt end of loop: redis-master replicas: 0, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 3\nUpdate succeeded. Deleting old controller: redis-master\nRenaming redis-master-ea866a5d2c08588c3375b86fb253db75 to redis-master\nredis-master\n```\n\n\n\n可以看到，Kubectl通过新建一个新版本Pod，停掉一个旧版本Pod，逐步迭代来完成整个RC的更新。\n\n更新完成后，查看RC：\n\n\n\n```shell\n$ kubectl get rc\t\nCONTROLLER     CONTAINER(S)   IMAGE(S)            SELECTOR        REPLICAS\nredis-master   master         kubeguide/redis-master:2.0              deployment= ea866a5d2c08588c3375b86fb253db75,name=redis-master,version=v1   3\n```\n\n\n\n可以看到，Kubectl给RC增加了一个key为“deployment”的Label（这个key的名字可通过--deployment-label-key参数进行修改），Label的值是RC的内容进行Hash计算后的值，相当于签名，这样就能很方便地比较RC里的Image名字及其他信息是否发生了变化，它的具体作用可以参见第6章的源码分析。\n\n如果在更新过程中发现配置有误，则用户可以中断更新操作，并通过执行Kubectl rolling-update –rollback完成Pod版本的回滚：\n\n\n\n```shell\n$ kubectl rolling-update redis-master --image=kubeguide/redis-master:2.0 --rollback\nFound existing update in progress (redis-master-fefd9752aa5883ca4d53013a7b 583967), resuming.\nFound desired replicas.Continuing update with existing controller redis-master.\nAt beginning of loop: redis-master-fefd9752aa5883ca4d53013a7b583967 replicas: 0, redis-master replicas: 3\nUpdating redis-master-fefd9752aa5883ca4d53013a7b583967 replicas: 0, redis-master replicas: 3\nAt end of loop: redis-master-fefd9752aa5883ca4d53013a7b583967 replicas: 0, redis-master replicas: 3\nUpdate succeeded. Deleting redis-master-fefd9752aa5883ca4d53013a7b583967\nredis-master\n```\n\n\n\n到此，可以看到Pod恢复到更新前的版本了。\n\n## **7、Kubernetes集群高可用方案**\n\nKubernetes作为容器应用的管理中心，通过对Pod的数量进行监控，并且根据主机或容器失效的状态将新的Pod调度到其他Node上，实现了应用层的高可用性。针对Kubernetes集群，高可用性还应包含以下两个层面的考虑：etcd数据存储的高可用性和Kubernetes Master组件的高可用性。\n\n**7.1 etcd高可用性方案**\n\n\n\netcd在整个Kubernetes集群中处于中心数据库的地位，为保证Kubernetes集群的高可用性，首先需要保证数据库不是单故障点。一方面，etcd需要以集群的方式进行部署，以实现etcd数据存储的冗余、备份与高可用性；另一方面，etcd存储的数据本身也应考虑使用可靠的存储设备。\n\netcd集群的部署可以使用静态配置，也可以通过etcd提供的REST API在运行时动态添加、修改或删除集群中的成员。本节将对etcd集群的静态配置进行说明。关于动态修改的操作方法请参考etcd官方文档的说明。\n\n首先，规划一个至少3台服务器（节点）的etcd集群，在每台服务器上安装好etcd。\n\n部署一个由3台服务器组成的etcd集群，其配置如表1所示，其集群部署实例如图2所示。\n表1 etcd集群的配置\n\n![image-20210720091449537](/images/Kubernetes常见运维技巧.assets/image-20210720091449537.png)\n\n然后修改每台服务器上etcd的配置文件/etc/etcd/etcd.conf。\n\n以etcd1为创建集群的实例，需要将其ETCD_INITIAL_CLUSTER_STATE设置为“new”。etcd1的完整配置如下：\n\n\n\n```yaml\n# [member]\nETCD_NAME=etcd1            #etcd实例名称\nETCD_DATA_DIR=＂/var/lib/etcd/etcd1＂   #etcd数据保存目录\nETCD_LISTEN_PEER_URLS=＂http://10.0.0.1:2380＂   #集群内部通信使用的URL\nETCD_LISTEN_CLIENT_URLS=＂http://10.0.0.1:2379＂   #供外部客户端使用的URL\n……\n#[cluster]\nETCD_INITIAL_ADVERTISE_PEER_URLS=＂http://10.0.0.1:2380＂   #广播给集群内其他成员使用的URL\nETCD_INITIAL_CLUSTER=＂etcd1=http://10.0.0.1:2380,etcd2=http://10.0.0.2:2380, etcd3=http://10.0.0.3:2380＂     #初始集群成员列表\nETCD_INITIAL_CLUSTER_STATE=＂new＂     #初始集群状态，new为新建集群\nETCD_INITIAL_CLUSTER_TOKEN=＂etcd-cluster＂   #集群名称\nETCD_ADVERTISE_CLIENT_URLS=＂http://10.0.0.1:2379＂   #广播给外部客户端使用的URL\n```\n\n\n\n启动etcd1服务器上的etcd服务：\n\n\n\n```shell\n$ systemctl restart etcd\n```\n\n\n\n启动完成后，就创建了一个名为etcd-cluster的集群。\n\netcd2和etcd3为加入etcd-cluster集群的实例，需要将其ETCD_INITIAL_CLUSTER_STATE设置为“exist”。etcd2的完整配置如下（etcd3的配置略）：\n\n\n\n```yaml\n# [member]\nETCD_NAME=etcd2            #etcd实例名称\nETCD_DATA_DIR=＂/var/lib/etcd/etcd2＂   #etcd数据保存目录\nETCD_LISTEN_PEER_URLS=＂http://10.0.0.2:2380＂   #集群内部通信使用的URL\nETCD_LISTEN_CLIENT_URLS=＂http://10.0.0.2:2379＂   #供外部客户端使用的URL\n……\n#[cluster]\nETCD_INITIAL_ADVERTISE_PEER_URLS=＂http://10.0.0.2:2380＂   #广播给集群内其他成员使用的URL\nETCD_INITIAL_CLUSTER=＂etcd1=http://10.0.0.1:2380,etcd2=http://10.0.0.2:2380,etcd3=http://10.0.0.3:2380＂     #初始集群成员列表\nETCD_INITIAL_CLUSTER_STATE=＂exist＂       # existing表示加入已存在的集群\nETCD_INITIAL_CLUSTER_TOKEN=＂etcd-cluster＂   #集群名称\nETCD_ADVERTISE_CLIENT_URLS=＂http://10.0.0.2:2379＂   #广播给外部客户端使用的URL\n```\n\n\n\n启动etcd2和etcd3服务器上的etcd服务：\n\n\n\n```shell\n$ systemctl restart etcd\n```\n\n\n\n启动完成后，在任意etcd节点执行etcdctl cluster-health命令来查询集群的运行状态：\n\n\n\n```shell\n$ etcdctl cluster-health\ncluster is healthy\nmember ce2a822cea30bfca is healthy\nmember acda82ba1cf790fc is healthy\nmember eba209cd0012cd2 is healthy\n```\n\n\n\n在任意etcd节点上执行etcdctl member list命令来查询集群的成员列表：\n\n\n\n```shell\n$ etcdctl member list\nce2a822cea30bfca: name=default peerURLs=http://10.0.0.1:2380,http://10.0.0.1: 7001 clientURLs=http://10.0.0.1:2379,http://10.0.0.1:4001\nacda82ba1cf790fc: name=default peerURLs=http://10.0.0.2:2380,http://10.0.0.2: 7001 clientURLs=http://10.0.0.2:2379,http://10.0.0.2:4001\neba209cd40012cd2: name=default peerURLs=http://10.0.0.3:2380,http://10.0.0.3: 7001 clientURLs=http://10.0.0.3:2379,http://10.0.0.3:4001\n```\n\n\n\n至此，一个etcd集群就创建成功了。\n\n以kube-apiserver为例，将访问etcd集群的参数设置为：\n\n\n\n```shell\n--etcd-servers=http://10.0.0.1:4001,http://10.0.0.2:4001,http://10.0.0.3:4001\n```\n\n\n\n在etcd集群成功启动之后，如果需要对集群成员进行修改，则请参考官方文档的详细说明：点击此处6\n\n对于etcd中需要保存的数据的可靠性，可以考虑使用RAID磁盘阵列、高性能存储设备、NFS网络文件系统，或者使用云服务商提供的网盘系统等来实现。\n\n**7.2 Kubernetes Master组件的高可用性方案**\n\n\n\n在Kubernetes体系中，Master服务扮演着总控中心的角色，主要的三个服务kube-apiserver、kube-controller-mansger和kube-scheduler通过不断与工作节点上的Kubelet和kube-proxy进行通信来维护整个集群的健康工作状态。如果Master的服务无法访问到某个Node，则会将该Node标记为不可用，不再向其调度新建的Pod。但对Master自身则需要进行额外的监控，使Master不成为集群的单故障点，所以对Master服务也需要进行高可用方式的部署。\n\n以Master的kube-apiserver、kube-controller-mansger和kube-scheduler三个服务作为一个部署单元，类似于etcd集群的典型部署配置。使用至少三台服务器安装Master服务，并且使用Active-Standby-Standby模式，保证任何时候总有一套Master能够正常工作。\n\n所有工作节点上的Kubelet和kube-proxy服务则需要访问Master集群的统一访问入口地址，例如可以使用pacemaker等工具来实现。图3展示了一种典型的部署方式。\n\n![image-20210720110224277](/images/Kubernetes常见运维技巧.assets/image-20210720091554069.png)\n\n<center>图3 Kubernetes Master高可用部署架构</center>\n\n","source":"_posts/Kubernetes常见运维技巧.md","raw":"---\ntitle: Kubernetes常见运维技巧\ndate: 2021-07-20 08:53:03\ntags: \n  - k8s\ncategories: \n  - k8s\n---\n\nKubernetes常见运维技巧\n\n<!--more-->\n\n## **1、Node的隔离和恢复**\n\n```yaml\napiVersion: v1\nkind: Node\nmetadata:\n  name: kubernetes-minion1\n  labels:\n    kubernetes.io/hostname: kubernetes-minion1\nspec:\n  unschedulable: true\n```\n\n然后，通过kubectl replace命令完成对Node状态的修改：\n\n\n\n```shell\n$ kubectl replace -f unschedule_node.yaml\nnodes/kubernetes-minion1\n```\n\n查看Node的状态，可以观察到在Node的状态中增加了一项SchedulingDisabled：\n\n\n\n```shell\n$ kubectl get nodes\nNAME                 LABELS                                      STATUS\nkubernetes-minion1   kubernetes.io/hostname=kubernetes-minion1   Ready, SchedulingDisabled\n```\n\n\n\n对于后续创建的Pod，系统将不会再向该Node进行调度。\n\n另一种方法是不使用配置文件，直接使用kubectl patch命令完成：\n\n\n\n```shell\n$ kubectl patch node kubernetes-minion1 -p '{＂spec＂:{＂unschedulable＂:true}}'\n```\n\n\n\n需要注意的是，将某个Node脱离调度范围时，在其上运行的Pod并不会自动停止，管理员需要手动停止在该Node上运行的Pod。\n\n同样，如果需要将某个Node重新纳入集群调度范围，则将unschedulable设置为false，再次执行kubectl replace或kubectl patch命令就能恢复系统对该Node的调度。\n\n```shell\n$ kubectl cordon node-01\t# 设置为不可调度\n$ kubectl uncordon node-01\t# 取消不可调度\n\n$ kubectl drain ek8s-node-1 --ignore-daemonsets # 驱逐节点上 Pod\n```\n\n\n\n## **2、Node的扩容**\n\n​\t在实际生产系统中会经常遇到服务器容量不足的情况，这时就需要购买新的服务器，然后将应用系统进行水平扩展来完成对系统的扩容。\n​\t在Kubernetes集群中，对于一个新Node的加入是非常简单的。可以在Node节点上安装Docker、Kubelet和kube-proxy服务，然后将Kubelet和kube-proxy的启动参数中的Master URL指定为当前Kubernetes集群Master的地址，最后启动这些服务。基于Kubelet的自动注册机制，新的Node将会自动加入现有的Kubernetes集群中，如图1所示。\n\n![image-20210720091116835](/images/Kubernetes常见运维技巧.assets/image-20210720091116835.png)\n\nKubernetes Master在接受了新Node的注册之后，会自动将其纳入当前集群的调度范围内，在之后创建容器时，就可以向新的Node进行调度了。\n\n通过这种机制，Kubernetes实现了集群的扩容。\n\n## **3、Pod动态扩容和缩放**\n\n在实际生产系统中，我们经常会遇到某个服务需要扩容的场景，也可能会遇到由于资源紧张或者工作负载降低而需要减少服务实例数的场景。此时我们可以利用命令kubectl scale rc来完成这些任务。以redis-slave RC为例，已定义的最初副本数量为2，通过执行下面的命令将redis-slave RC控制的Pod副本数量从初始的2更新为3：\n\n\n\n```shell\n$ kubectl scale rc redis-slave --replicas=3\nscaled\n```\n\n\n\n执行kubectl get pods命令来验证Pod的副本数量增加到3：\n\n\n\n```shell\n$ kubectl get pods\nNAME                   READY     STATUS    RESTARTS   AGE\nredis-slave-4na2n    1/1       Running   0          1h\nredis-slave-92u3k    1/1       Running   0          1h\nredis-slave-palab    1/1       Running   0          2m\n```\n\n\n\n将--replicas设置为比当前Pod副本数量更小的数字，系统将会“杀掉”一些运行中的Pod，即可实现应用集群缩容：\n\n\n\n```shell\n$ kubectl scale rc redis-slave --replicas=1\nscaled\n\n$ kubectl get pods\nNAME                 \tREADY     \tSTATUS    RESTARTS   AGE\nredis-slave-4na2n    1/1       \tRunning   0          1h\n```\n\n## **4、更新资源对象的Label**\n\nLabel（标签）作为用户可灵活定义的对象属性，在已创建的对象上，仍然可以随时通过kubectl label命令对其进行增加、修改、删除等操作。\n\n例如，我们要给已创建的Pod“redis-master-bobr0”添加一个标签role=backend：\n\n\n\n```\n$ kubectl label pod redis-master-bobr0 role=backend\n```\n\n\n\n查看该Pod的Label：\n\n\n\n```\n$ kubectl get pods -Lrole\nNAME                 READY     STATUS    RESTARTS   AGE       ROLE\nredis-master-bobr0   1/1       Running   0          3m        backend\n```\n\n\n\n删除一个Label，只需在命令行最后指定Label的key名并与一个减号相连即可：\n\n\n\n```shell\n$ kubectl label pod redis-master-bobr0 role-\n```\n\n\n\n修改一个Label的值，需要加上--overwrite参数：\n\n\n\n```shell\n$ kubectl label pod redis-master-bobr0 role=master --overwrite\n```\n\n## **5、将Pod调度到指定的Node**\n\n我们知道，Kubernetes的Scheduler服务（kube-scheduler进程）负责实现Pod的调度，整个调度过程通过执行一系列复杂的算法最终为每个Pod计算出一个最佳的目标节点，这一过程是自动完成的，我们无法知道Pod最终会被调度到哪个节点上。有时我们可能需要将Pod调度到一个指定的Node上，此时，我们可以通过Node的标签（Label）和Pod的nodeSelector属性相匹配，来达到上述目的。\n\n首先，我们可以通过kubectl label命令给目标Node打上一个特定的标签，下面是此命令的完整用法：\n\n\n\n```shell\nkubectl label nodes <node-name> <label-key>=<label-value>\n```\n\n\n\n这里，我们为kubernetes-minion1节点打上一个zone=north的标签，表明它是“北方”的一个节点：\n\n\n\n```shell\n$ kubectl label nodes kubernetes-minion1 zone=north\nNAME                 LABELS                                                 STATUS\nkubernetes-minion1   kubernetes.io/hostname=kubernetes-minion1,zone=north   Ready\n```\n\n\n\n上述命令行操作也可以通过修改资源定义文件的方式，并执行kubectl replace -f xxx.yaml命令来完成。\n\n然后，在Pod的配置文件中加入nodeSelector定义，以redis-master-controller.yaml为例：\n\n\n\n```yaml\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: redis-master\n  labels:\n    name: redis-master\nspec:\n  replicas: 1\n  selector:\n    name: redis-master\n  template:\n    metadata:\n      labels:\n        name: redis-master\n    spec:\n      containers:\n      - name: master\n        image: kubeguide/redis-master\n        ports:\n        - containerPort: 6379\n      nodeSelector:\n        zone: north\n```\n\n\n\n运行kubectl create -f命令创建Pod，scheduler就会将该Pod调度到拥有zone=north标签的Node上去。\n\n使用kubectl get pods -o wide命令可以验证Pod所在的Node：\n\n\n\n```shell\n# kubectl get pods -o wide\nNAME                 READY     STATUS    RESTARTS   AGE       NODE\nredis-master-f0rqj   1/1       Running   0          19s       kubernetes-minion1\n```\n\n\n\n如果我们给多个Node都定义了相同的标签（例如zone=north），则scheduler将会根据调度算法从这组Node中挑选一个可用的Node进行Pod调度。\n\n这种基于Node标签的调度方式灵活性很高，比如我们可以把一组Node分别贴上“开发环境”“测试验证环境”“用户验收环境”这三组标签中的一种，此时一个Kubernetes集群就承载了3个环境，这将大大提高开发效率。\n\n需要注意的是，如果我们指定了Pod的nodeSelector条件，且集群中不存在包含相应标签的Node时，即使还有其他可供调度的Node，这个Pod也最终会调度失败。\n\n## **6、应用的滚动升级**\n\n当集群中的某个服务需要升级时，我们需要停止目前与该服务相关的所有Pod，然后重新拉取镜像并启动。如果集群规模比较大，则这个工作就变成了一个挑战，而且先全部停止然后逐步升级的方式会导致较长时间的服务不可用。Kubernetes提供了rolling-update（滚动升级）功能来解决上述问题。\n\n滚动升级通过执行kubectl rolling-update命令一键完成，该命令创建了一个新的RC，然后自动控制旧的RC中的Pod副本数量逐渐减少到0，同时新的RC中的Pod副本数量从0逐步增加到目标值，最终实现了Pod的升级。需要注意的是，系统要求新的RC需要与旧的RC在相同的命名空间（Namespace）内，即不能把别人的资产偷偷转移到自家名下。\n\n以redis-master为例，假设当前运行的redis-master Pod是1.0版本，则现在需要升级到2.0版本。\n\n创建redis-master-controller-v2.yaml的配置文件如下：\n\n\n\n```yaml\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: redis-master-v2\n  labels:\t\n    name: redis-master\n    version: v2\nspec:\n  replicas: 1\n  selector:\n    name: redis-master\n    version: v2\n  template:\n    metadata:\n      labels:\n        name: redis-master\n        version: v2\n    spec:\n      containers:\n      - name: master\n        image: kubeguide/redis-master:2.0\n        ports:\n        - containerPort: 6379\n```\n\n\n\n在配置文件中有几处需要注意：\n（1）RC的名字（name）不能与旧的RC的名字相同；\n（2）在selector中应至少有一个Label与旧的RC的Label不同，以标识其为新的RC。\n\n本例中新增了一个名为version的Label，以与旧的RC进行区分。\n\n运行kubectl rolling-update命令完成Pod的滚动升级：\n\n\n\n```shell\n$ kubectl rolling-update redis-master -f redis-master-controller-v2.yaml\n```\n\n\n\nKubectl的执行过程如下：\n\n\n\n```shell\nCreating redis-master-v2\nAt beginning of loop: redis-master replicas: 2, redis-master-v2 replicas: 1\nUpdating redis-master replicas: 2, redis-master-v2 replicas: 1\nAt end of loop: redis-master replicas: 2, redis-master-v2 replicas: 1\nAt beginning of loop: redis-master replicas: 1, redis-master-v2 replicas: 2\nUpdating redis-master replicas: 1, redis-master-v2 replicas: 2\nAt end of loop: redis-master replicas: 1, redis-master-v2 replicas: 2\nAt beginning of loop: redis-master replicas: 0, redis-master-v2 replicas: 3\nUpdating redis-master replicas: 0, redis-master-v2 replicas: 3\nAt end of loop: redis-master replicas: 0, redis-master-v2 replicas: 3\nUpdate succeeded. Deleting redis-master\nredis-master-v2\n```\n\n\n\n等所有新的Pod启动完成后，旧的Pod也被全部销毁，这样就完成了容器集群的更新。\n\n另一种方法是不使用配置文件，直接用kubectl rolling-update命令，加上--image参数指定新版镜像名称来完成Pod的滚动升级：\n\n\n\n```shell\n$ kubectl rolling-update redis-master --image=redis-master:2.0\n```\n\n\n\n与使用配置文件的方式不同，执行的结果是旧的RC被删除，新的RC仍将使用旧的RC的名字。\n\nKubectl的执行过程如下：\n\n\n\n```shell\nCreating redis-master-ea866a5d2c08588c3375b86fb253db75\nAt beginning of loop: redis-master replicas: 2, redis-master-ea866a5d2c08588c 3375b86fb253db75 replicas: 1\nUpdating redis-master replicas: 2, redis-master-ea866a5d2c08588c3375b86fb253db 75 replicas: 1\nAt end of loop: redis-master replicas: 2, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 1\nAt beginning of loop: redis-master replicas: 1, redis-master-ea866a5d2c08588c 3375b86fb253db75 replicas: 2\nUpdating redis-master replicas: 1, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 2\nAt end of loop: redis-master replicas: 1, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 2\nAt beginning of loop: redis-master replicas: 0, redis-master-ea866a5d2c08588c 3375b86fb253db75 replicas: 3\nUpdating redis-master replicas: 0, redis-master-ea866a5d2c08588c3375b86fb253db 75 replicas: 3\nAt end of loop: redis-master replicas: 0, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 3\nUpdate succeeded. Deleting old controller: redis-master\nRenaming redis-master-ea866a5d2c08588c3375b86fb253db75 to redis-master\nredis-master\n```\n\n\n\n可以看到，Kubectl通过新建一个新版本Pod，停掉一个旧版本Pod，逐步迭代来完成整个RC的更新。\n\n更新完成后，查看RC：\n\n\n\n```shell\n$ kubectl get rc\t\nCONTROLLER     CONTAINER(S)   IMAGE(S)            SELECTOR        REPLICAS\nredis-master   master         kubeguide/redis-master:2.0              deployment= ea866a5d2c08588c3375b86fb253db75,name=redis-master,version=v1   3\n```\n\n\n\n可以看到，Kubectl给RC增加了一个key为“deployment”的Label（这个key的名字可通过--deployment-label-key参数进行修改），Label的值是RC的内容进行Hash计算后的值，相当于签名，这样就能很方便地比较RC里的Image名字及其他信息是否发生了变化，它的具体作用可以参见第6章的源码分析。\n\n如果在更新过程中发现配置有误，则用户可以中断更新操作，并通过执行Kubectl rolling-update –rollback完成Pod版本的回滚：\n\n\n\n```shell\n$ kubectl rolling-update redis-master --image=kubeguide/redis-master:2.0 --rollback\nFound existing update in progress (redis-master-fefd9752aa5883ca4d53013a7b 583967), resuming.\nFound desired replicas.Continuing update with existing controller redis-master.\nAt beginning of loop: redis-master-fefd9752aa5883ca4d53013a7b583967 replicas: 0, redis-master replicas: 3\nUpdating redis-master-fefd9752aa5883ca4d53013a7b583967 replicas: 0, redis-master replicas: 3\nAt end of loop: redis-master-fefd9752aa5883ca4d53013a7b583967 replicas: 0, redis-master replicas: 3\nUpdate succeeded. Deleting redis-master-fefd9752aa5883ca4d53013a7b583967\nredis-master\n```\n\n\n\n到此，可以看到Pod恢复到更新前的版本了。\n\n## **7、Kubernetes集群高可用方案**\n\nKubernetes作为容器应用的管理中心，通过对Pod的数量进行监控，并且根据主机或容器失效的状态将新的Pod调度到其他Node上，实现了应用层的高可用性。针对Kubernetes集群，高可用性还应包含以下两个层面的考虑：etcd数据存储的高可用性和Kubernetes Master组件的高可用性。\n\n**7.1 etcd高可用性方案**\n\n\n\netcd在整个Kubernetes集群中处于中心数据库的地位，为保证Kubernetes集群的高可用性，首先需要保证数据库不是单故障点。一方面，etcd需要以集群的方式进行部署，以实现etcd数据存储的冗余、备份与高可用性；另一方面，etcd存储的数据本身也应考虑使用可靠的存储设备。\n\netcd集群的部署可以使用静态配置，也可以通过etcd提供的REST API在运行时动态添加、修改或删除集群中的成员。本节将对etcd集群的静态配置进行说明。关于动态修改的操作方法请参考etcd官方文档的说明。\n\n首先，规划一个至少3台服务器（节点）的etcd集群，在每台服务器上安装好etcd。\n\n部署一个由3台服务器组成的etcd集群，其配置如表1所示，其集群部署实例如图2所示。\n表1 etcd集群的配置\n\n![image-20210720091449537](/images/Kubernetes常见运维技巧.assets/image-20210720091449537.png)\n\n然后修改每台服务器上etcd的配置文件/etc/etcd/etcd.conf。\n\n以etcd1为创建集群的实例，需要将其ETCD_INITIAL_CLUSTER_STATE设置为“new”。etcd1的完整配置如下：\n\n\n\n```yaml\n# [member]\nETCD_NAME=etcd1            #etcd实例名称\nETCD_DATA_DIR=＂/var/lib/etcd/etcd1＂   #etcd数据保存目录\nETCD_LISTEN_PEER_URLS=＂http://10.0.0.1:2380＂   #集群内部通信使用的URL\nETCD_LISTEN_CLIENT_URLS=＂http://10.0.0.1:2379＂   #供外部客户端使用的URL\n……\n#[cluster]\nETCD_INITIAL_ADVERTISE_PEER_URLS=＂http://10.0.0.1:2380＂   #广播给集群内其他成员使用的URL\nETCD_INITIAL_CLUSTER=＂etcd1=http://10.0.0.1:2380,etcd2=http://10.0.0.2:2380, etcd3=http://10.0.0.3:2380＂     #初始集群成员列表\nETCD_INITIAL_CLUSTER_STATE=＂new＂     #初始集群状态，new为新建集群\nETCD_INITIAL_CLUSTER_TOKEN=＂etcd-cluster＂   #集群名称\nETCD_ADVERTISE_CLIENT_URLS=＂http://10.0.0.1:2379＂   #广播给外部客户端使用的URL\n```\n\n\n\n启动etcd1服务器上的etcd服务：\n\n\n\n```shell\n$ systemctl restart etcd\n```\n\n\n\n启动完成后，就创建了一个名为etcd-cluster的集群。\n\netcd2和etcd3为加入etcd-cluster集群的实例，需要将其ETCD_INITIAL_CLUSTER_STATE设置为“exist”。etcd2的完整配置如下（etcd3的配置略）：\n\n\n\n```yaml\n# [member]\nETCD_NAME=etcd2            #etcd实例名称\nETCD_DATA_DIR=＂/var/lib/etcd/etcd2＂   #etcd数据保存目录\nETCD_LISTEN_PEER_URLS=＂http://10.0.0.2:2380＂   #集群内部通信使用的URL\nETCD_LISTEN_CLIENT_URLS=＂http://10.0.0.2:2379＂   #供外部客户端使用的URL\n……\n#[cluster]\nETCD_INITIAL_ADVERTISE_PEER_URLS=＂http://10.0.0.2:2380＂   #广播给集群内其他成员使用的URL\nETCD_INITIAL_CLUSTER=＂etcd1=http://10.0.0.1:2380,etcd2=http://10.0.0.2:2380,etcd3=http://10.0.0.3:2380＂     #初始集群成员列表\nETCD_INITIAL_CLUSTER_STATE=＂exist＂       # existing表示加入已存在的集群\nETCD_INITIAL_CLUSTER_TOKEN=＂etcd-cluster＂   #集群名称\nETCD_ADVERTISE_CLIENT_URLS=＂http://10.0.0.2:2379＂   #广播给外部客户端使用的URL\n```\n\n\n\n启动etcd2和etcd3服务器上的etcd服务：\n\n\n\n```shell\n$ systemctl restart etcd\n```\n\n\n\n启动完成后，在任意etcd节点执行etcdctl cluster-health命令来查询集群的运行状态：\n\n\n\n```shell\n$ etcdctl cluster-health\ncluster is healthy\nmember ce2a822cea30bfca is healthy\nmember acda82ba1cf790fc is healthy\nmember eba209cd0012cd2 is healthy\n```\n\n\n\n在任意etcd节点上执行etcdctl member list命令来查询集群的成员列表：\n\n\n\n```shell\n$ etcdctl member list\nce2a822cea30bfca: name=default peerURLs=http://10.0.0.1:2380,http://10.0.0.1: 7001 clientURLs=http://10.0.0.1:2379,http://10.0.0.1:4001\nacda82ba1cf790fc: name=default peerURLs=http://10.0.0.2:2380,http://10.0.0.2: 7001 clientURLs=http://10.0.0.2:2379,http://10.0.0.2:4001\neba209cd40012cd2: name=default peerURLs=http://10.0.0.3:2380,http://10.0.0.3: 7001 clientURLs=http://10.0.0.3:2379,http://10.0.0.3:4001\n```\n\n\n\n至此，一个etcd集群就创建成功了。\n\n以kube-apiserver为例，将访问etcd集群的参数设置为：\n\n\n\n```shell\n--etcd-servers=http://10.0.0.1:4001,http://10.0.0.2:4001,http://10.0.0.3:4001\n```\n\n\n\n在etcd集群成功启动之后，如果需要对集群成员进行修改，则请参考官方文档的详细说明：点击此处6\n\n对于etcd中需要保存的数据的可靠性，可以考虑使用RAID磁盘阵列、高性能存储设备、NFS网络文件系统，或者使用云服务商提供的网盘系统等来实现。\n\n**7.2 Kubernetes Master组件的高可用性方案**\n\n\n\n在Kubernetes体系中，Master服务扮演着总控中心的角色，主要的三个服务kube-apiserver、kube-controller-mansger和kube-scheduler通过不断与工作节点上的Kubelet和kube-proxy进行通信来维护整个集群的健康工作状态。如果Master的服务无法访问到某个Node，则会将该Node标记为不可用，不再向其调度新建的Pod。但对Master自身则需要进行额外的监控，使Master不成为集群的单故障点，所以对Master服务也需要进行高可用方式的部署。\n\n以Master的kube-apiserver、kube-controller-mansger和kube-scheduler三个服务作为一个部署单元，类似于etcd集群的典型部署配置。使用至少三台服务器安装Master服务，并且使用Active-Standby-Standby模式，保证任何时候总有一套Master能够正常工作。\n\n所有工作节点上的Kubelet和kube-proxy服务则需要访问Master集群的统一访问入口地址，例如可以使用pacemaker等工具来实现。图3展示了一种典型的部署方式。\n\n![image-20210720110224277](/images/Kubernetes常见运维技巧.assets/image-20210720091554069.png)\n\n<center>图3 Kubernetes Master高可用部署架构</center>\n\n","slug":"Kubernetes常见运维技巧","published":1,"updated":"2021-08-02T08:34:54.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxjvzrok00160gu62hsx06wl","content":"<p>Kubernetes常见运维技巧</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1、Node的隔离和恢复\"><a href=\"#1、Node的隔离和恢复\" class=\"headerlink\" title=\"1、Node的隔离和恢复\"></a><strong>1、Node的隔离和恢复</strong></h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Node</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kubernetes-minion1</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/hostname:</span> <span class=\"string\">kubernetes-minion1</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">unschedulable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，通过kubectl replace命令完成对Node状态的修改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl replace -f unschedule_node.yaml</span></span><br><span class=\"line\">nodes/kubernetes-minion1</span><br></pre></td></tr></table></figure>\n\n<p>查看Node的状态，可以观察到在Node的状态中增加了一项SchedulingDisabled：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get nodes</span></span><br><span class=\"line\">NAME                 LABELS                                      STATUS</span><br><span class=\"line\">kubernetes-minion1   kubernetes.io/hostname=kubernetes-minion1   Ready, SchedulingDisabled</span><br></pre></td></tr></table></figure>\n\n\n\n<p>对于后续创建的Pod，系统将不会再向该Node进行调度。</p>\n<p>另一种方法是不使用配置文件，直接使用kubectl patch命令完成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl patch node kubernetes-minion1 -p <span class=\"string\">&#x27;&#123;＂spec＂:&#123;＂unschedulable＂:true&#125;&#125;&#x27;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>需要注意的是，将某个Node脱离调度范围时，在其上运行的Pod并不会自动停止，管理员需要手动停止在该Node上运行的Pod。</p>\n<p>同样，如果需要将某个Node重新纳入集群调度范围，则将unschedulable设置为false，再次执行kubectl replace或kubectl patch命令就能恢复系统对该Node的调度。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl cordon node-01\t<span class=\"comment\"># 设置为不可调度</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl uncordon node-01\t<span class=\"comment\"># 取消不可调度</span></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl drain ek8s-node-1 --ignore-daemonsets <span class=\"comment\"># 驱逐节点上 Pod</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2、Node的扩容\"><a href=\"#2、Node的扩容\" class=\"headerlink\" title=\"2、Node的扩容\"></a><strong>2、Node的扩容</strong></h2><p>​    在实际生产系统中会经常遇到服务器容量不足的情况，这时就需要购买新的服务器，然后将应用系统进行水平扩展来完成对系统的扩容。<br>​    在Kubernetes集群中，对于一个新Node的加入是非常简单的。可以在Node节点上安装Docker、Kubelet和kube-proxy服务，然后将Kubelet和kube-proxy的启动参数中的Master URL指定为当前Kubernetes集群Master的地址，最后启动这些服务。基于Kubelet的自动注册机制，新的Node将会自动加入现有的Kubernetes集群中，如图1所示。</p>\n<p><img src=\"/images/Kubernetes%E5%B8%B8%E8%A7%81%E8%BF%90%E7%BB%B4%E6%8A%80%E5%B7%A7.assets/image-20210720091116835.png\" alt=\"image-20210720091116835\"></p>\n<p>Kubernetes Master在接受了新Node的注册之后，会自动将其纳入当前集群的调度范围内，在之后创建容器时，就可以向新的Node进行调度了。</p>\n<p>通过这种机制，Kubernetes实现了集群的扩容。</p>\n<h2 id=\"3、Pod动态扩容和缩放\"><a href=\"#3、Pod动态扩容和缩放\" class=\"headerlink\" title=\"3、Pod动态扩容和缩放\"></a><strong>3、Pod动态扩容和缩放</strong></h2><p>在实际生产系统中，我们经常会遇到某个服务需要扩容的场景，也可能会遇到由于资源紧张或者工作负载降低而需要减少服务实例数的场景。此时我们可以利用命令kubectl scale rc来完成这些任务。以redis-slave RC为例，已定义的最初副本数量为2，通过执行下面的命令将redis-slave RC控制的Pod副本数量从初始的2更新为3：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl scale rc redis-slave --replicas=3</span></span><br><span class=\"line\">scaled</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行kubectl get pods命令来验证Pod的副本数量增加到3：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get pods</span></span><br><span class=\"line\">NAME                   READY     STATUS    RESTARTS   AGE</span><br><span class=\"line\">redis-slave-4na2n    1/1       Running   0          1h</span><br><span class=\"line\">redis-slave-92u3k    1/1       Running   0          1h</span><br><span class=\"line\">redis-slave-palab    1/1       Running   0          2m</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将–replicas设置为比当前Pod副本数量更小的数字，系统将会“杀掉”一些运行中的Pod，即可实现应用集群缩容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl scale rc redis-slave --replicas=1</span></span><br><span class=\"line\">scaled</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get pods</span></span><br><span class=\"line\">NAME                 \tREADY     \tSTATUS    RESTARTS   AGE</span><br><span class=\"line\">redis-slave-4na2n    1/1       \tRunning   0          1h</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、更新资源对象的Label\"><a href=\"#4、更新资源对象的Label\" class=\"headerlink\" title=\"4、更新资源对象的Label\"></a><strong>4、更新资源对象的Label</strong></h2><p>Label（标签）作为用户可灵活定义的对象属性，在已创建的对象上，仍然可以随时通过kubectl label命令对其进行增加、修改、删除等操作。</p>\n<p>例如，我们要给已创建的Pod“redis-master-bobr0”添加一个标签role=backend：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl label pod redis-master-bobr0 role=backend</span><br></pre></td></tr></table></figure>\n\n\n\n<p>查看该Pod的Label：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pods -Lrole</span><br><span class=\"line\">NAME                 READY     STATUS    RESTARTS   AGE       ROLE</span><br><span class=\"line\">redis-master-bobr0   1/1       Running   0          3m        backend</span><br></pre></td></tr></table></figure>\n\n\n\n<p>删除一个Label，只需在命令行最后指定Label的key名并与一个减号相连即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl label pod redis-master-bobr0 role-</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改一个Label的值，需要加上–overwrite参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl label pod redis-master-bobr0 role=master --overwrite</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、将Pod调度到指定的Node\"><a href=\"#5、将Pod调度到指定的Node\" class=\"headerlink\" title=\"5、将Pod调度到指定的Node\"></a><strong>5、将Pod调度到指定的Node</strong></h2><p>我们知道，Kubernetes的Scheduler服务（kube-scheduler进程）负责实现Pod的调度，整个调度过程通过执行一系列复杂的算法最终为每个Pod计算出一个最佳的目标节点，这一过程是自动完成的，我们无法知道Pod最终会被调度到哪个节点上。有时我们可能需要将Pod调度到一个指定的Node上，此时，我们可以通过Node的标签（Label）和Pod的nodeSelector属性相匹配，来达到上述目的。</p>\n<p>首先，我们可以通过kubectl label命令给目标Node打上一个特定的标签，下面是此命令的完整用法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl label nodes &lt;node-name&gt; &lt;label-key&gt;=&lt;label-value&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里，我们为kubernetes-minion1节点打上一个zone=north的标签，表明它是“北方”的一个节点：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl label nodes kubernetes-minion1 zone=north</span></span><br><span class=\"line\">NAME                 LABELS                                                 STATUS</span><br><span class=\"line\">kubernetes-minion1   kubernetes.io/hostname=kubernetes-minion1,zone=north   Ready</span><br></pre></td></tr></table></figure>\n\n\n\n<p>上述命令行操作也可以通过修改资源定义文件的方式，并执行kubectl replace -f xxx.yaml命令来完成。</p>\n<p>然后，在Pod的配置文件中加入nodeSelector定义，以redis-master-controller.yaml为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ReplicationController</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis-master</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">redis-master</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">redis-master</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">redis-master</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">master</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">kubeguide/redis-master</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">nodeSelector:</span></span><br><span class=\"line\">        <span class=\"attr\">zone:</span> <span class=\"string\">north</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>运行kubectl create -f命令创建Pod，scheduler就会将该Pod调度到拥有zone=north标签的Node上去。</p>\n<p>使用kubectl get pods -o wide命令可以验证Pod所在的Node：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -o wide</span></span><br><span class=\"line\">NAME                 READY     STATUS    RESTARTS   AGE       NODE</span><br><span class=\"line\">redis-master-f0rqj   1/1       Running   0          19s       kubernetes-minion1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果我们给多个Node都定义了相同的标签（例如zone=north），则scheduler将会根据调度算法从这组Node中挑选一个可用的Node进行Pod调度。</p>\n<p>这种基于Node标签的调度方式灵活性很高，比如我们可以把一组Node分别贴上“开发环境”“测试验证环境”“用户验收环境”这三组标签中的一种，此时一个Kubernetes集群就承载了3个环境，这将大大提高开发效率。</p>\n<p>需要注意的是，如果我们指定了Pod的nodeSelector条件，且集群中不存在包含相应标签的Node时，即使还有其他可供调度的Node，这个Pod也最终会调度失败。</p>\n<h2 id=\"6、应用的滚动升级\"><a href=\"#6、应用的滚动升级\" class=\"headerlink\" title=\"6、应用的滚动升级\"></a><strong>6、应用的滚动升级</strong></h2><p>当集群中的某个服务需要升级时，我们需要停止目前与该服务相关的所有Pod，然后重新拉取镜像并启动。如果集群规模比较大，则这个工作就变成了一个挑战，而且先全部停止然后逐步升级的方式会导致较长时间的服务不可用。Kubernetes提供了rolling-update（滚动升级）功能来解决上述问题。</p>\n<p>滚动升级通过执行kubectl rolling-update命令一键完成，该命令创建了一个新的RC，然后自动控制旧的RC中的Pod副本数量逐渐减少到0，同时新的RC中的Pod副本数量从0逐步增加到目标值，最终实现了Pod的升级。需要注意的是，系统要求新的RC需要与旧的RC在相同的命名空间（Namespace）内，即不能把别人的资产偷偷转移到自家名下。</p>\n<p>以redis-master为例，假设当前运行的redis-master Pod是1.0版本，则现在需要升级到2.0版本。</p>\n<p>创建redis-master-controller-v2.yaml的配置文件如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ReplicationController</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis-master-v2</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span>\t</span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">redis-master</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">redis-master</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v2</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">redis-master</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"string\">v2</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">master</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">kubeguide/redis-master:2.0</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">6379</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在配置文件中有几处需要注意：<br>（1）RC的名字（name）不能与旧的RC的名字相同；<br>（2）在selector中应至少有一个Label与旧的RC的Label不同，以标识其为新的RC。</p>\n<p>本例中新增了一个名为version的Label，以与旧的RC进行区分。</p>\n<p>运行kubectl rolling-update命令完成Pod的滚动升级：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl rolling-update redis-master -f redis-master-controller-v2.yaml</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>Kubectl的执行过程如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating redis-master-v2</span><br><span class=\"line\">At beginning of loop: redis-master replicas: 2, redis-master-v2 replicas: 1</span><br><span class=\"line\">Updating redis-master replicas: 2, redis-master-v2 replicas: 1</span><br><span class=\"line\">At end of loop: redis-master replicas: 2, redis-master-v2 replicas: 1</span><br><span class=\"line\">At beginning of loop: redis-master replicas: 1, redis-master-v2 replicas: 2</span><br><span class=\"line\">Updating redis-master replicas: 1, redis-master-v2 replicas: 2</span><br><span class=\"line\">At end of loop: redis-master replicas: 1, redis-master-v2 replicas: 2</span><br><span class=\"line\">At beginning of loop: redis-master replicas: 0, redis-master-v2 replicas: 3</span><br><span class=\"line\">Updating redis-master replicas: 0, redis-master-v2 replicas: 3</span><br><span class=\"line\">At end of loop: redis-master replicas: 0, redis-master-v2 replicas: 3</span><br><span class=\"line\">Update succeeded. Deleting redis-master</span><br><span class=\"line\">redis-master-v2</span><br></pre></td></tr></table></figure>\n\n\n\n<p>等所有新的Pod启动完成后，旧的Pod也被全部销毁，这样就完成了容器集群的更新。</p>\n<p>另一种方法是不使用配置文件，直接用kubectl rolling-update命令，加上–image参数指定新版镜像名称来完成Pod的滚动升级：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl rolling-update redis-master --image=redis-master:2.0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>与使用配置文件的方式不同，执行的结果是旧的RC被删除，新的RC仍将使用旧的RC的名字。</p>\n<p>Kubectl的执行过程如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating redis-master-ea866a5d2c08588c3375b86fb253db75</span><br><span class=\"line\">At beginning of loop: redis-master replicas: 2, redis-master-ea866a5d2c08588c 3375b86fb253db75 replicas: 1</span><br><span class=\"line\">Updating redis-master replicas: 2, redis-master-ea866a5d2c08588c3375b86fb253db 75 replicas: 1</span><br><span class=\"line\">At end of loop: redis-master replicas: 2, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 1</span><br><span class=\"line\">At beginning of loop: redis-master replicas: 1, redis-master-ea866a5d2c08588c 3375b86fb253db75 replicas: 2</span><br><span class=\"line\">Updating redis-master replicas: 1, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 2</span><br><span class=\"line\">At end of loop: redis-master replicas: 1, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 2</span><br><span class=\"line\">At beginning of loop: redis-master replicas: 0, redis-master-ea866a5d2c08588c 3375b86fb253db75 replicas: 3</span><br><span class=\"line\">Updating redis-master replicas: 0, redis-master-ea866a5d2c08588c3375b86fb253db 75 replicas: 3</span><br><span class=\"line\">At end of loop: redis-master replicas: 0, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 3</span><br><span class=\"line\">Update succeeded. Deleting old controller: redis-master</span><br><span class=\"line\">Renaming redis-master-ea866a5d2c08588c3375b86fb253db75 to redis-master</span><br><span class=\"line\">redis-master</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以看到，Kubectl通过新建一个新版本Pod，停掉一个旧版本Pod，逐步迭代来完成整个RC的更新。</p>\n<p>更新完成后，查看RC：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get rc</span>\t</span><br><span class=\"line\">CONTROLLER     CONTAINER(S)   IMAGE(S)            SELECTOR        REPLICAS</span><br><span class=\"line\">redis-master   master         kubeguide/redis-master:2.0              deployment= ea866a5d2c08588c3375b86fb253db75,name=redis-master,version=v1   3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以看到，Kubectl给RC增加了一个key为“deployment”的Label（这个key的名字可通过–deployment-label-key参数进行修改），Label的值是RC的内容进行Hash计算后的值，相当于签名，这样就能很方便地比较RC里的Image名字及其他信息是否发生了变化，它的具体作用可以参见第6章的源码分析。</p>\n<p>如果在更新过程中发现配置有误，则用户可以中断更新操作，并通过执行Kubectl rolling-update –rollback完成Pod版本的回滚：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl rolling-update redis-master --image=kubeguide/redis-master:2.0 --rollback</span></span><br><span class=\"line\">Found existing update in progress (redis-master-fefd9752aa5883ca4d53013a7b 583967), resuming.</span><br><span class=\"line\">Found desired replicas.Continuing update with existing controller redis-master.</span><br><span class=\"line\">At beginning of loop: redis-master-fefd9752aa5883ca4d53013a7b583967 replicas: 0, redis-master replicas: 3</span><br><span class=\"line\">Updating redis-master-fefd9752aa5883ca4d53013a7b583967 replicas: 0, redis-master replicas: 3</span><br><span class=\"line\">At end of loop: redis-master-fefd9752aa5883ca4d53013a7b583967 replicas: 0, redis-master replicas: 3</span><br><span class=\"line\">Update succeeded. Deleting redis-master-fefd9752aa5883ca4d53013a7b583967</span><br><span class=\"line\">redis-master</span><br></pre></td></tr></table></figure>\n\n\n\n<p>到此，可以看到Pod恢复到更新前的版本了。</p>\n<h2 id=\"7、Kubernetes集群高可用方案\"><a href=\"#7、Kubernetes集群高可用方案\" class=\"headerlink\" title=\"7、Kubernetes集群高可用方案\"></a><strong>7、Kubernetes集群高可用方案</strong></h2><p>Kubernetes作为容器应用的管理中心，通过对Pod的数量进行监控，并且根据主机或容器失效的状态将新的Pod调度到其他Node上，实现了应用层的高可用性。针对Kubernetes集群，高可用性还应包含以下两个层面的考虑：etcd数据存储的高可用性和Kubernetes Master组件的高可用性。</p>\n<p><strong>7.1 etcd高可用性方案</strong></p>\n<p>etcd在整个Kubernetes集群中处于中心数据库的地位，为保证Kubernetes集群的高可用性，首先需要保证数据库不是单故障点。一方面，etcd需要以集群的方式进行部署，以实现etcd数据存储的冗余、备份与高可用性；另一方面，etcd存储的数据本身也应考虑使用可靠的存储设备。</p>\n<p>etcd集群的部署可以使用静态配置，也可以通过etcd提供的REST API在运行时动态添加、修改或删除集群中的成员。本节将对etcd集群的静态配置进行说明。关于动态修改的操作方法请参考etcd官方文档的说明。</p>\n<p>首先，规划一个至少3台服务器（节点）的etcd集群，在每台服务器上安装好etcd。</p>\n<p>部署一个由3台服务器组成的etcd集群，其配置如表1所示，其集群部署实例如图2所示。<br>表1 etcd集群的配置</p>\n<p><img src=\"/images/Kubernetes%E5%B8%B8%E8%A7%81%E8%BF%90%E7%BB%B4%E6%8A%80%E5%B7%A7.assets/image-20210720091449537.png\" alt=\"image-20210720091449537\"></p>\n<p>然后修改每台服务器上etcd的配置文件/etc/etcd/etcd.conf。</p>\n<p>以etcd1为创建集群的实例，需要将其ETCD_INITIAL_CLUSTER_STATE设置为“new”。etcd1的完整配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># [member]</span></span><br><span class=\"line\"><span class=\"string\">ETCD_NAME=etcd1</span>            <span class=\"comment\">#etcd实例名称</span></span><br><span class=\"line\"><span class=\"string\">ETCD_DATA_DIR=＂/var/lib/etcd/etcd1＂</span>   <span class=\"comment\">#etcd数据保存目录</span></span><br><span class=\"line\"><span class=\"string\">ETCD_LISTEN_PEER_URLS=＂http://10.0.0.1:2380＂</span>   <span class=\"comment\">#集群内部通信使用的URL</span></span><br><span class=\"line\"><span class=\"string\">ETCD_LISTEN_CLIENT_URLS=＂http://10.0.0.1:2379＂</span>   <span class=\"comment\">#供外部客户端使用的URL</span></span><br><span class=\"line\"><span class=\"string\">……</span></span><br><span class=\"line\"><span class=\"comment\">#[cluster]</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_ADVERTISE_PEER_URLS=＂http://10.0.0.1:2380＂</span>   <span class=\"comment\">#广播给集群内其他成员使用的URL</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER=＂etcd1=http://10.0.0.1:2380,etcd2=http://10.0.0.2:2380,</span> <span class=\"string\">etcd3=http://10.0.0.3:2380＂</span>     <span class=\"comment\">#初始集群成员列表</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER_STATE=＂new＂</span>     <span class=\"comment\">#初始集群状态，new为新建集群</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER_TOKEN=＂etcd-cluster＂</span>   <span class=\"comment\">#集群名称</span></span><br><span class=\"line\"><span class=\"string\">ETCD_ADVERTISE_CLIENT_URLS=＂http://10.0.0.1:2379＂</span>   <span class=\"comment\">#广播给外部客户端使用的URL</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动etcd1服务器上的etcd服务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl restart etcd</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动完成后，就创建了一个名为etcd-cluster的集群。</p>\n<p>etcd2和etcd3为加入etcd-cluster集群的实例，需要将其ETCD_INITIAL_CLUSTER_STATE设置为“exist”。etcd2的完整配置如下（etcd3的配置略）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># [member]</span></span><br><span class=\"line\"><span class=\"string\">ETCD_NAME=etcd2</span>            <span class=\"comment\">#etcd实例名称</span></span><br><span class=\"line\"><span class=\"string\">ETCD_DATA_DIR=＂/var/lib/etcd/etcd2＂</span>   <span class=\"comment\">#etcd数据保存目录</span></span><br><span class=\"line\"><span class=\"string\">ETCD_LISTEN_PEER_URLS=＂http://10.0.0.2:2380＂</span>   <span class=\"comment\">#集群内部通信使用的URL</span></span><br><span class=\"line\"><span class=\"string\">ETCD_LISTEN_CLIENT_URLS=＂http://10.0.0.2:2379＂</span>   <span class=\"comment\">#供外部客户端使用的URL</span></span><br><span class=\"line\"><span class=\"string\">……</span></span><br><span class=\"line\"><span class=\"comment\">#[cluster]</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_ADVERTISE_PEER_URLS=＂http://10.0.0.2:2380＂</span>   <span class=\"comment\">#广播给集群内其他成员使用的URL</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER=＂etcd1=http://10.0.0.1:2380,etcd2=http://10.0.0.2:2380,etcd3=http://10.0.0.3:2380＂</span>     <span class=\"comment\">#初始集群成员列表</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER_STATE=＂exist＂</span>       <span class=\"comment\"># existing表示加入已存在的集群</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER_TOKEN=＂etcd-cluster＂</span>   <span class=\"comment\">#集群名称</span></span><br><span class=\"line\"><span class=\"string\">ETCD_ADVERTISE_CLIENT_URLS=＂http://10.0.0.2:2379＂</span>   <span class=\"comment\">#广播给外部客户端使用的URL</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动etcd2和etcd3服务器上的etcd服务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl restart etcd</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动完成后，在任意etcd节点执行etcdctl cluster-health命令来查询集群的运行状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> etcdctl cluster-health</span></span><br><span class=\"line\">cluster is healthy</span><br><span class=\"line\">member ce2a822cea30bfca is healthy</span><br><span class=\"line\">member acda82ba1cf790fc is healthy</span><br><span class=\"line\">member eba209cd0012cd2 is healthy</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在任意etcd节点上执行etcdctl member list命令来查询集群的成员列表：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> etcdctl member list</span></span><br><span class=\"line\">ce2a822cea30bfca: name=default peerURLs=http://10.0.0.1:2380,http://10.0.0.1: 7001 clientURLs=http://10.0.0.1:2379,http://10.0.0.1:4001</span><br><span class=\"line\">acda82ba1cf790fc: name=default peerURLs=http://10.0.0.2:2380,http://10.0.0.2: 7001 clientURLs=http://10.0.0.2:2379,http://10.0.0.2:4001</span><br><span class=\"line\">eba209cd40012cd2: name=default peerURLs=http://10.0.0.3:2380,http://10.0.0.3: 7001 clientURLs=http://10.0.0.3:2379,http://10.0.0.3:4001</span><br></pre></td></tr></table></figure>\n\n\n\n<p>至此，一个etcd集群就创建成功了。</p>\n<p>以kube-apiserver为例，将访问etcd集群的参数设置为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--etcd-servers=http://10.0.0.1:4001,http://10.0.0.2:4001,http://10.0.0.3:4001</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在etcd集群成功启动之后，如果需要对集群成员进行修改，则请参考官方文档的详细说明：点击此处6</p>\n<p>对于etcd中需要保存的数据的可靠性，可以考虑使用RAID磁盘阵列、高性能存储设备、NFS网络文件系统，或者使用云服务商提供的网盘系统等来实现。</p>\n<p><strong>7.2 Kubernetes Master组件的高可用性方案</strong></p>\n<p>在Kubernetes体系中，Master服务扮演着总控中心的角色，主要的三个服务kube-apiserver、kube-controller-mansger和kube-scheduler通过不断与工作节点上的Kubelet和kube-proxy进行通信来维护整个集群的健康工作状态。如果Master的服务无法访问到某个Node，则会将该Node标记为不可用，不再向其调度新建的Pod。但对Master自身则需要进行额外的监控，使Master不成为集群的单故障点，所以对Master服务也需要进行高可用方式的部署。</p>\n<p>以Master的kube-apiserver、kube-controller-mansger和kube-scheduler三个服务作为一个部署单元，类似于etcd集群的典型部署配置。使用至少三台服务器安装Master服务，并且使用Active-Standby-Standby模式，保证任何时候总有一套Master能够正常工作。</p>\n<p>所有工作节点上的Kubelet和kube-proxy服务则需要访问Master集群的统一访问入口地址，例如可以使用pacemaker等工具来实现。图3展示了一种典型的部署方式。</p>\n<p><img src=\"/images/Kubernetes%E5%B8%B8%E8%A7%81%E8%BF%90%E7%BB%B4%E6%8A%80%E5%B7%A7.assets/image-20210720091554069.png\" alt=\"image-20210720110224277\"></p>\n<center>图3 Kubernetes Master高可用部署架构</center>\n\n","site":{"data":{"post-body-end":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n","variables":""}},"length":11123,"excerpt":"<p>Kubernetes常见运维技巧</p>","more":"<h2 id=\"1、Node的隔离和恢复\"><a href=\"#1、Node的隔离和恢复\" class=\"headerlink\" title=\"1、Node的隔离和恢复\"></a><strong>1、Node的隔离和恢复</strong></h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Node</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kubernetes-minion1</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/hostname:</span> <span class=\"string\">kubernetes-minion1</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">unschedulable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，通过kubectl replace命令完成对Node状态的修改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl replace -f unschedule_node.yaml</span></span><br><span class=\"line\">nodes/kubernetes-minion1</span><br></pre></td></tr></table></figure>\n\n<p>查看Node的状态，可以观察到在Node的状态中增加了一项SchedulingDisabled：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get nodes</span></span><br><span class=\"line\">NAME                 LABELS                                      STATUS</span><br><span class=\"line\">kubernetes-minion1   kubernetes.io/hostname=kubernetes-minion1   Ready, SchedulingDisabled</span><br></pre></td></tr></table></figure>\n\n\n\n<p>对于后续创建的Pod，系统将不会再向该Node进行调度。</p>\n<p>另一种方法是不使用配置文件，直接使用kubectl patch命令完成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl patch node kubernetes-minion1 -p <span class=\"string\">&#x27;&#123;＂spec＂:&#123;＂unschedulable＂:true&#125;&#125;&#x27;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>需要注意的是，将某个Node脱离调度范围时，在其上运行的Pod并不会自动停止，管理员需要手动停止在该Node上运行的Pod。</p>\n<p>同样，如果需要将某个Node重新纳入集群调度范围，则将unschedulable设置为false，再次执行kubectl replace或kubectl patch命令就能恢复系统对该Node的调度。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl cordon node-01\t<span class=\"comment\"># 设置为不可调度</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl uncordon node-01\t<span class=\"comment\"># 取消不可调度</span></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl drain ek8s-node-1 --ignore-daemonsets <span class=\"comment\"># 驱逐节点上 Pod</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2、Node的扩容\"><a href=\"#2、Node的扩容\" class=\"headerlink\" title=\"2、Node的扩容\"></a><strong>2、Node的扩容</strong></h2><p>​    在实际生产系统中会经常遇到服务器容量不足的情况，这时就需要购买新的服务器，然后将应用系统进行水平扩展来完成对系统的扩容。<br>​    在Kubernetes集群中，对于一个新Node的加入是非常简单的。可以在Node节点上安装Docker、Kubelet和kube-proxy服务，然后将Kubelet和kube-proxy的启动参数中的Master URL指定为当前Kubernetes集群Master的地址，最后启动这些服务。基于Kubelet的自动注册机制，新的Node将会自动加入现有的Kubernetes集群中，如图1所示。</p>\n<p><img src=\"/images/Kubernetes%E5%B8%B8%E8%A7%81%E8%BF%90%E7%BB%B4%E6%8A%80%E5%B7%A7.assets/image-20210720091116835.png\" alt=\"image-20210720091116835\"></p>\n<p>Kubernetes Master在接受了新Node的注册之后，会自动将其纳入当前集群的调度范围内，在之后创建容器时，就可以向新的Node进行调度了。</p>\n<p>通过这种机制，Kubernetes实现了集群的扩容。</p>\n<h2 id=\"3、Pod动态扩容和缩放\"><a href=\"#3、Pod动态扩容和缩放\" class=\"headerlink\" title=\"3、Pod动态扩容和缩放\"></a><strong>3、Pod动态扩容和缩放</strong></h2><p>在实际生产系统中，我们经常会遇到某个服务需要扩容的场景，也可能会遇到由于资源紧张或者工作负载降低而需要减少服务实例数的场景。此时我们可以利用命令kubectl scale rc来完成这些任务。以redis-slave RC为例，已定义的最初副本数量为2，通过执行下面的命令将redis-slave RC控制的Pod副本数量从初始的2更新为3：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl scale rc redis-slave --replicas=3</span></span><br><span class=\"line\">scaled</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行kubectl get pods命令来验证Pod的副本数量增加到3：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get pods</span></span><br><span class=\"line\">NAME                   READY     STATUS    RESTARTS   AGE</span><br><span class=\"line\">redis-slave-4na2n    1/1       Running   0          1h</span><br><span class=\"line\">redis-slave-92u3k    1/1       Running   0          1h</span><br><span class=\"line\">redis-slave-palab    1/1       Running   0          2m</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将–replicas设置为比当前Pod副本数量更小的数字，系统将会“杀掉”一些运行中的Pod，即可实现应用集群缩容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl scale rc redis-slave --replicas=1</span></span><br><span class=\"line\">scaled</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get pods</span></span><br><span class=\"line\">NAME                 \tREADY     \tSTATUS    RESTARTS   AGE</span><br><span class=\"line\">redis-slave-4na2n    1/1       \tRunning   0          1h</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、更新资源对象的Label\"><a href=\"#4、更新资源对象的Label\" class=\"headerlink\" title=\"4、更新资源对象的Label\"></a><strong>4、更新资源对象的Label</strong></h2><p>Label（标签）作为用户可灵活定义的对象属性，在已创建的对象上，仍然可以随时通过kubectl label命令对其进行增加、修改、删除等操作。</p>\n<p>例如，我们要给已创建的Pod“redis-master-bobr0”添加一个标签role=backend：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl label pod redis-master-bobr0 role=backend</span><br></pre></td></tr></table></figure>\n\n\n\n<p>查看该Pod的Label：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pods -Lrole</span><br><span class=\"line\">NAME                 READY     STATUS    RESTARTS   AGE       ROLE</span><br><span class=\"line\">redis-master-bobr0   1/1       Running   0          3m        backend</span><br></pre></td></tr></table></figure>\n\n\n\n<p>删除一个Label，只需在命令行最后指定Label的key名并与一个减号相连即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl label pod redis-master-bobr0 role-</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改一个Label的值，需要加上–overwrite参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl label pod redis-master-bobr0 role=master --overwrite</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、将Pod调度到指定的Node\"><a href=\"#5、将Pod调度到指定的Node\" class=\"headerlink\" title=\"5、将Pod调度到指定的Node\"></a><strong>5、将Pod调度到指定的Node</strong></h2><p>我们知道，Kubernetes的Scheduler服务（kube-scheduler进程）负责实现Pod的调度，整个调度过程通过执行一系列复杂的算法最终为每个Pod计算出一个最佳的目标节点，这一过程是自动完成的，我们无法知道Pod最终会被调度到哪个节点上。有时我们可能需要将Pod调度到一个指定的Node上，此时，我们可以通过Node的标签（Label）和Pod的nodeSelector属性相匹配，来达到上述目的。</p>\n<p>首先，我们可以通过kubectl label命令给目标Node打上一个特定的标签，下面是此命令的完整用法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl label nodes &lt;node-name&gt; &lt;label-key&gt;=&lt;label-value&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里，我们为kubernetes-minion1节点打上一个zone=north的标签，表明它是“北方”的一个节点：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl label nodes kubernetes-minion1 zone=north</span></span><br><span class=\"line\">NAME                 LABELS                                                 STATUS</span><br><span class=\"line\">kubernetes-minion1   kubernetes.io/hostname=kubernetes-minion1,zone=north   Ready</span><br></pre></td></tr></table></figure>\n\n\n\n<p>上述命令行操作也可以通过修改资源定义文件的方式，并执行kubectl replace -f xxx.yaml命令来完成。</p>\n<p>然后，在Pod的配置文件中加入nodeSelector定义，以redis-master-controller.yaml为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ReplicationController</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis-master</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">redis-master</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">redis-master</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">redis-master</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">master</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">kubeguide/redis-master</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">nodeSelector:</span></span><br><span class=\"line\">        <span class=\"attr\">zone:</span> <span class=\"string\">north</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>运行kubectl create -f命令创建Pod，scheduler就会将该Pod调度到拥有zone=north标签的Node上去。</p>\n<p>使用kubectl get pods -o wide命令可以验证Pod所在的Node：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -o wide</span></span><br><span class=\"line\">NAME                 READY     STATUS    RESTARTS   AGE       NODE</span><br><span class=\"line\">redis-master-f0rqj   1/1       Running   0          19s       kubernetes-minion1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果我们给多个Node都定义了相同的标签（例如zone=north），则scheduler将会根据调度算法从这组Node中挑选一个可用的Node进行Pod调度。</p>\n<p>这种基于Node标签的调度方式灵活性很高，比如我们可以把一组Node分别贴上“开发环境”“测试验证环境”“用户验收环境”这三组标签中的一种，此时一个Kubernetes集群就承载了3个环境，这将大大提高开发效率。</p>\n<p>需要注意的是，如果我们指定了Pod的nodeSelector条件，且集群中不存在包含相应标签的Node时，即使还有其他可供调度的Node，这个Pod也最终会调度失败。</p>\n<h2 id=\"6、应用的滚动升级\"><a href=\"#6、应用的滚动升级\" class=\"headerlink\" title=\"6、应用的滚动升级\"></a><strong>6、应用的滚动升级</strong></h2><p>当集群中的某个服务需要升级时，我们需要停止目前与该服务相关的所有Pod，然后重新拉取镜像并启动。如果集群规模比较大，则这个工作就变成了一个挑战，而且先全部停止然后逐步升级的方式会导致较长时间的服务不可用。Kubernetes提供了rolling-update（滚动升级）功能来解决上述问题。</p>\n<p>滚动升级通过执行kubectl rolling-update命令一键完成，该命令创建了一个新的RC，然后自动控制旧的RC中的Pod副本数量逐渐减少到0，同时新的RC中的Pod副本数量从0逐步增加到目标值，最终实现了Pod的升级。需要注意的是，系统要求新的RC需要与旧的RC在相同的命名空间（Namespace）内，即不能把别人的资产偷偷转移到自家名下。</p>\n<p>以redis-master为例，假设当前运行的redis-master Pod是1.0版本，则现在需要升级到2.0版本。</p>\n<p>创建redis-master-controller-v2.yaml的配置文件如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ReplicationController</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis-master-v2</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span>\t</span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">redis-master</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">redis-master</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v2</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">redis-master</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"string\">v2</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">master</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">kubeguide/redis-master:2.0</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">6379</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在配置文件中有几处需要注意：<br>（1）RC的名字（name）不能与旧的RC的名字相同；<br>（2）在selector中应至少有一个Label与旧的RC的Label不同，以标识其为新的RC。</p>\n<p>本例中新增了一个名为version的Label，以与旧的RC进行区分。</p>\n<p>运行kubectl rolling-update命令完成Pod的滚动升级：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl rolling-update redis-master -f redis-master-controller-v2.yaml</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>Kubectl的执行过程如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating redis-master-v2</span><br><span class=\"line\">At beginning of loop: redis-master replicas: 2, redis-master-v2 replicas: 1</span><br><span class=\"line\">Updating redis-master replicas: 2, redis-master-v2 replicas: 1</span><br><span class=\"line\">At end of loop: redis-master replicas: 2, redis-master-v2 replicas: 1</span><br><span class=\"line\">At beginning of loop: redis-master replicas: 1, redis-master-v2 replicas: 2</span><br><span class=\"line\">Updating redis-master replicas: 1, redis-master-v2 replicas: 2</span><br><span class=\"line\">At end of loop: redis-master replicas: 1, redis-master-v2 replicas: 2</span><br><span class=\"line\">At beginning of loop: redis-master replicas: 0, redis-master-v2 replicas: 3</span><br><span class=\"line\">Updating redis-master replicas: 0, redis-master-v2 replicas: 3</span><br><span class=\"line\">At end of loop: redis-master replicas: 0, redis-master-v2 replicas: 3</span><br><span class=\"line\">Update succeeded. Deleting redis-master</span><br><span class=\"line\">redis-master-v2</span><br></pre></td></tr></table></figure>\n\n\n\n<p>等所有新的Pod启动完成后，旧的Pod也被全部销毁，这样就完成了容器集群的更新。</p>\n<p>另一种方法是不使用配置文件，直接用kubectl rolling-update命令，加上–image参数指定新版镜像名称来完成Pod的滚动升级：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl rolling-update redis-master --image=redis-master:2.0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>与使用配置文件的方式不同，执行的结果是旧的RC被删除，新的RC仍将使用旧的RC的名字。</p>\n<p>Kubectl的执行过程如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating redis-master-ea866a5d2c08588c3375b86fb253db75</span><br><span class=\"line\">At beginning of loop: redis-master replicas: 2, redis-master-ea866a5d2c08588c 3375b86fb253db75 replicas: 1</span><br><span class=\"line\">Updating redis-master replicas: 2, redis-master-ea866a5d2c08588c3375b86fb253db 75 replicas: 1</span><br><span class=\"line\">At end of loop: redis-master replicas: 2, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 1</span><br><span class=\"line\">At beginning of loop: redis-master replicas: 1, redis-master-ea866a5d2c08588c 3375b86fb253db75 replicas: 2</span><br><span class=\"line\">Updating redis-master replicas: 1, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 2</span><br><span class=\"line\">At end of loop: redis-master replicas: 1, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 2</span><br><span class=\"line\">At beginning of loop: redis-master replicas: 0, redis-master-ea866a5d2c08588c 3375b86fb253db75 replicas: 3</span><br><span class=\"line\">Updating redis-master replicas: 0, redis-master-ea866a5d2c08588c3375b86fb253db 75 replicas: 3</span><br><span class=\"line\">At end of loop: redis-master replicas: 0, redis-master-ea866a5d2c08588c3375b86fb 253db75 replicas: 3</span><br><span class=\"line\">Update succeeded. Deleting old controller: redis-master</span><br><span class=\"line\">Renaming redis-master-ea866a5d2c08588c3375b86fb253db75 to redis-master</span><br><span class=\"line\">redis-master</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以看到，Kubectl通过新建一个新版本Pod，停掉一个旧版本Pod，逐步迭代来完成整个RC的更新。</p>\n<p>更新完成后，查看RC：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get rc</span>\t</span><br><span class=\"line\">CONTROLLER     CONTAINER(S)   IMAGE(S)            SELECTOR        REPLICAS</span><br><span class=\"line\">redis-master   master         kubeguide/redis-master:2.0              deployment= ea866a5d2c08588c3375b86fb253db75,name=redis-master,version=v1   3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以看到，Kubectl给RC增加了一个key为“deployment”的Label（这个key的名字可通过–deployment-label-key参数进行修改），Label的值是RC的内容进行Hash计算后的值，相当于签名，这样就能很方便地比较RC里的Image名字及其他信息是否发生了变化，它的具体作用可以参见第6章的源码分析。</p>\n<p>如果在更新过程中发现配置有误，则用户可以中断更新操作，并通过执行Kubectl rolling-update –rollback完成Pod版本的回滚：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl rolling-update redis-master --image=kubeguide/redis-master:2.0 --rollback</span></span><br><span class=\"line\">Found existing update in progress (redis-master-fefd9752aa5883ca4d53013a7b 583967), resuming.</span><br><span class=\"line\">Found desired replicas.Continuing update with existing controller redis-master.</span><br><span class=\"line\">At beginning of loop: redis-master-fefd9752aa5883ca4d53013a7b583967 replicas: 0, redis-master replicas: 3</span><br><span class=\"line\">Updating redis-master-fefd9752aa5883ca4d53013a7b583967 replicas: 0, redis-master replicas: 3</span><br><span class=\"line\">At end of loop: redis-master-fefd9752aa5883ca4d53013a7b583967 replicas: 0, redis-master replicas: 3</span><br><span class=\"line\">Update succeeded. Deleting redis-master-fefd9752aa5883ca4d53013a7b583967</span><br><span class=\"line\">redis-master</span><br></pre></td></tr></table></figure>\n\n\n\n<p>到此，可以看到Pod恢复到更新前的版本了。</p>\n<h2 id=\"7、Kubernetes集群高可用方案\"><a href=\"#7、Kubernetes集群高可用方案\" class=\"headerlink\" title=\"7、Kubernetes集群高可用方案\"></a><strong>7、Kubernetes集群高可用方案</strong></h2><p>Kubernetes作为容器应用的管理中心，通过对Pod的数量进行监控，并且根据主机或容器失效的状态将新的Pod调度到其他Node上，实现了应用层的高可用性。针对Kubernetes集群，高可用性还应包含以下两个层面的考虑：etcd数据存储的高可用性和Kubernetes Master组件的高可用性。</p>\n<p><strong>7.1 etcd高可用性方案</strong></p>\n<p>etcd在整个Kubernetes集群中处于中心数据库的地位，为保证Kubernetes集群的高可用性，首先需要保证数据库不是单故障点。一方面，etcd需要以集群的方式进行部署，以实现etcd数据存储的冗余、备份与高可用性；另一方面，etcd存储的数据本身也应考虑使用可靠的存储设备。</p>\n<p>etcd集群的部署可以使用静态配置，也可以通过etcd提供的REST API在运行时动态添加、修改或删除集群中的成员。本节将对etcd集群的静态配置进行说明。关于动态修改的操作方法请参考etcd官方文档的说明。</p>\n<p>首先，规划一个至少3台服务器（节点）的etcd集群，在每台服务器上安装好etcd。</p>\n<p>部署一个由3台服务器组成的etcd集群，其配置如表1所示，其集群部署实例如图2所示。<br>表1 etcd集群的配置</p>\n<p><img src=\"/images/Kubernetes%E5%B8%B8%E8%A7%81%E8%BF%90%E7%BB%B4%E6%8A%80%E5%B7%A7.assets/image-20210720091449537.png\" alt=\"image-20210720091449537\"></p>\n<p>然后修改每台服务器上etcd的配置文件/etc/etcd/etcd.conf。</p>\n<p>以etcd1为创建集群的实例，需要将其ETCD_INITIAL_CLUSTER_STATE设置为“new”。etcd1的完整配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># [member]</span></span><br><span class=\"line\"><span class=\"string\">ETCD_NAME=etcd1</span>            <span class=\"comment\">#etcd实例名称</span></span><br><span class=\"line\"><span class=\"string\">ETCD_DATA_DIR=＂/var/lib/etcd/etcd1＂</span>   <span class=\"comment\">#etcd数据保存目录</span></span><br><span class=\"line\"><span class=\"string\">ETCD_LISTEN_PEER_URLS=＂http://10.0.0.1:2380＂</span>   <span class=\"comment\">#集群内部通信使用的URL</span></span><br><span class=\"line\"><span class=\"string\">ETCD_LISTEN_CLIENT_URLS=＂http://10.0.0.1:2379＂</span>   <span class=\"comment\">#供外部客户端使用的URL</span></span><br><span class=\"line\"><span class=\"string\">……</span></span><br><span class=\"line\"><span class=\"comment\">#[cluster]</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_ADVERTISE_PEER_URLS=＂http://10.0.0.1:2380＂</span>   <span class=\"comment\">#广播给集群内其他成员使用的URL</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER=＂etcd1=http://10.0.0.1:2380,etcd2=http://10.0.0.2:2380,</span> <span class=\"string\">etcd3=http://10.0.0.3:2380＂</span>     <span class=\"comment\">#初始集群成员列表</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER_STATE=＂new＂</span>     <span class=\"comment\">#初始集群状态，new为新建集群</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER_TOKEN=＂etcd-cluster＂</span>   <span class=\"comment\">#集群名称</span></span><br><span class=\"line\"><span class=\"string\">ETCD_ADVERTISE_CLIENT_URLS=＂http://10.0.0.1:2379＂</span>   <span class=\"comment\">#广播给外部客户端使用的URL</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动etcd1服务器上的etcd服务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl restart etcd</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动完成后，就创建了一个名为etcd-cluster的集群。</p>\n<p>etcd2和etcd3为加入etcd-cluster集群的实例，需要将其ETCD_INITIAL_CLUSTER_STATE设置为“exist”。etcd2的完整配置如下（etcd3的配置略）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># [member]</span></span><br><span class=\"line\"><span class=\"string\">ETCD_NAME=etcd2</span>            <span class=\"comment\">#etcd实例名称</span></span><br><span class=\"line\"><span class=\"string\">ETCD_DATA_DIR=＂/var/lib/etcd/etcd2＂</span>   <span class=\"comment\">#etcd数据保存目录</span></span><br><span class=\"line\"><span class=\"string\">ETCD_LISTEN_PEER_URLS=＂http://10.0.0.2:2380＂</span>   <span class=\"comment\">#集群内部通信使用的URL</span></span><br><span class=\"line\"><span class=\"string\">ETCD_LISTEN_CLIENT_URLS=＂http://10.0.0.2:2379＂</span>   <span class=\"comment\">#供外部客户端使用的URL</span></span><br><span class=\"line\"><span class=\"string\">……</span></span><br><span class=\"line\"><span class=\"comment\">#[cluster]</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_ADVERTISE_PEER_URLS=＂http://10.0.0.2:2380＂</span>   <span class=\"comment\">#广播给集群内其他成员使用的URL</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER=＂etcd1=http://10.0.0.1:2380,etcd2=http://10.0.0.2:2380,etcd3=http://10.0.0.3:2380＂</span>     <span class=\"comment\">#初始集群成员列表</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER_STATE=＂exist＂</span>       <span class=\"comment\"># existing表示加入已存在的集群</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER_TOKEN=＂etcd-cluster＂</span>   <span class=\"comment\">#集群名称</span></span><br><span class=\"line\"><span class=\"string\">ETCD_ADVERTISE_CLIENT_URLS=＂http://10.0.0.2:2379＂</span>   <span class=\"comment\">#广播给外部客户端使用的URL</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动etcd2和etcd3服务器上的etcd服务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl restart etcd</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动完成后，在任意etcd节点执行etcdctl cluster-health命令来查询集群的运行状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> etcdctl cluster-health</span></span><br><span class=\"line\">cluster is healthy</span><br><span class=\"line\">member ce2a822cea30bfca is healthy</span><br><span class=\"line\">member acda82ba1cf790fc is healthy</span><br><span class=\"line\">member eba209cd0012cd2 is healthy</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在任意etcd节点上执行etcdctl member list命令来查询集群的成员列表：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> etcdctl member list</span></span><br><span class=\"line\">ce2a822cea30bfca: name=default peerURLs=http://10.0.0.1:2380,http://10.0.0.1: 7001 clientURLs=http://10.0.0.1:2379,http://10.0.0.1:4001</span><br><span class=\"line\">acda82ba1cf790fc: name=default peerURLs=http://10.0.0.2:2380,http://10.0.0.2: 7001 clientURLs=http://10.0.0.2:2379,http://10.0.0.2:4001</span><br><span class=\"line\">eba209cd40012cd2: name=default peerURLs=http://10.0.0.3:2380,http://10.0.0.3: 7001 clientURLs=http://10.0.0.3:2379,http://10.0.0.3:4001</span><br></pre></td></tr></table></figure>\n\n\n\n<p>至此，一个etcd集群就创建成功了。</p>\n<p>以kube-apiserver为例，将访问etcd集群的参数设置为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--etcd-servers=http://10.0.0.1:4001,http://10.0.0.2:4001,http://10.0.0.3:4001</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在etcd集群成功启动之后，如果需要对集群成员进行修改，则请参考官方文档的详细说明：点击此处6</p>\n<p>对于etcd中需要保存的数据的可靠性，可以考虑使用RAID磁盘阵列、高性能存储设备、NFS网络文件系统，或者使用云服务商提供的网盘系统等来实现。</p>\n<p><strong>7.2 Kubernetes Master组件的高可用性方案</strong></p>\n<p>在Kubernetes体系中，Master服务扮演着总控中心的角色，主要的三个服务kube-apiserver、kube-controller-mansger和kube-scheduler通过不断与工作节点上的Kubelet和kube-proxy进行通信来维护整个集群的健康工作状态。如果Master的服务无法访问到某个Node，则会将该Node标记为不可用，不再向其调度新建的Pod。但对Master自身则需要进行额外的监控，使Master不成为集群的单故障点，所以对Master服务也需要进行高可用方式的部署。</p>\n<p>以Master的kube-apiserver、kube-controller-mansger和kube-scheduler三个服务作为一个部署单元，类似于etcd集群的典型部署配置。使用至少三台服务器安装Master服务，并且使用Active-Standby-Standby模式，保证任何时候总有一套Master能够正常工作。</p>\n<p>所有工作节点上的Kubelet和kube-proxy服务则需要访问Master集群的统一访问入口地址，例如可以使用pacemaker等工具来实现。图3展示了一种典型的部署方式。</p>\n<p><img src=\"/images/Kubernetes%E5%B8%B8%E8%A7%81%E8%BF%90%E7%BB%B4%E6%8A%80%E5%B7%A7.assets/image-20210720091554069.png\" alt=\"image-20210720110224277\"></p>\n<center>图3 Kubernetes Master高可用部署架构</center>"},{"title":"k8s常见总结2","date":"2021-07-17T03:48:09.000Z","_content":"\n\n\nk8s常见总结2\n\n<!--more-->\n\n### 1.k8s是什么？\n\nKubenetes是一个针对容器应用，进行自动部署，弹性伸缩和管理的开源系统。主要功能是生产环境中的容器编排。\n\n\n\n### 2.容器和主机部署应用的区别是什么？\n\n​\t容器的中心思想就是秒级启动；一次封装、到处运行；这是主机部署应用无法达到的效果，但同时也更应该注重容器的数据持久化问题。另外，容器部署可以将各个服务进行隔离，互不影响，这也是容器的另一个核心概念。\n\n\n\n### 3.K8s架构的组成是什么\n\n![K8S架构图](/images/k8s常见总结2.assets/K8S架构图.png)\n\n\n\n- 主节点主要用于暴露API，调度部署和节点的管理；\n- 计算节点运行一个容器运行环境，一般是docker环境（类似docker环境的还有rkt），同时运行一个K8s的代理（kubelet）用于和master通信。计算节点也会运行一些额外的组件，像记录日志，节点监控，服务发现等等。计算节点是k8s集群中真正工作的节点。\n\nMaster节点：\n\n- Kubectl：客户端命令行工具，作为整个K8s集群的操作入口；\n- Api Server：在K8s架构中承担的是“桥梁”的角色，作为资源操作的唯一入口，它提供了认证、授权、访问控制、API注册和发现等机制。客户端与k8s群集及K8s内部组件的通信，都要通过Api Server这个组件；\n- Controller-manager：负责维护群集的状态，比如故障检测、自动扩展、滚动更新等；\n- Scheduler：负责资源的调度，按照预定的调度策略将pod调度到相应的node节点上；\n- Etcd：担任数据中心的角色，保存了整个群集的状态；\n\nNode节点：\n\n- Kubelet：负责维护容器的生命周期，同时也负责Volume和网络的管理，一般运行在所有的节点，是Node节点的代理，当Scheduler确定某个node上运行pod之后，会将pod的具体信息（image，volume）等发送给该节点的kubelet，kubelet根据这些信息创建和运行容器，并向master返回运行状态。（自动修复功能：如果某个节点中的容器宕机，它会尝试重启该容器，若重启无效，则会将该pod杀死，然后重新创建一个容器）；\n- Kube-proxy：Service在逻辑上代表了后端的多个pod。负责为Service提供cluster内部的服务发现和负载均衡（外界通过Service访问pod提供的服务时，Service接收到的请求后就是通过kube-proxy来转发到pod上的）；\n- container-runtime：是负责管理运行容器的软件，比如docker\n- Pod：是k8s集群里面最小的单位。每个pod里边可以运行一个或多个container（容器），如果一个pod中有两个container，那么container的USR（用户）、MNT（挂载点）、PID（进程号）是相互隔离的，UTS（主机名和域名）、IPC（消息队列）、NET（网络栈）是相互共享的。\n\n### 4.kubenetes针对pod资源对象的健康监测机制。\n\nK8s中对于pod资源对象的健康状态检测，提供了三类probe（探针）来执行对pod的健康监测：\n\n1） livenessProbe探针\n\n可以根据用户自定义规则来判定pod是否健康，如果livenessProbe探针探测到容器不健康，则kubelet会根据其重启策略来决定是否重启，初始探测状态为健康状态直到探测失败。如果一个容器不包含livenessProbe探针，则kubelet会认为容器的livenessProbe探针的返回值永远成功。\n\n2） ReadinessProbe探针\n\n同样是可以根据用户自定义规则来判断pod是否健康，如果探测失败，控制器会将此pod从对应service的endpoint列表中移除，从此不再将任何请求调度到此Pod上，直到下次探测成功。初始探测为失败状态，直到探测成功后，将pod加入到service的endpoint列表中。\n\n3） startupProbe探针\n\n启动检查机制，应用一些启动缓慢的业务，避免业务长时间启动而被上面两类探针kill掉，这个问题也可以换另一种方式解决，就是定义上面两类探针机制时，初始化时间定义的长一些即可。\n\n探针检查支持以下参数设置：\n\n- initialDelaySeconds：初始第一次探测间隔，用于应用启动的时间，防止应用还没启动而健康检查失败\n- periodSeconds：检查间隔，多久执行probe检查，默认为10s；\n- timeoutSeconds：检查超时时长，探测应用timeout后为失败；\n- successThreshold：成功探测阈值，表示探测多少次为健康正常，默认探测1次。\n\n探针支持分探测方案：\n\n1）.通过执行命令的方式来检查服务是否正常，比如使用cat命令查看pod中的某个重要配置文件是否存在，若存在，则表示pod健康。反之异常。\n\nExec探测方式的yaml文件语法如下：\n\n```yaml\nspec:  \n  containers:  \n  - name: liveness  \n    image: k8s.gcr.io/busybox  \n    args:  \n    - /bin/sh  \n    - -c  \n    - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600  \n    livenessProbe:         #选择livenessProbe的探测机制  \n      exec:                      #执行以下命令  \n        command:  \n        - cat  \n        - /tmp/healthy  \n      initialDelaySeconds: 5          #在容器运行五秒后开始探测  \n      periodSeconds: 5               #每次探测的时间间隔为5秒  \n```\n\n在上面的配置文件中，探测机制为在容器运行5秒后，每隔五秒探测一次，如果cat命令返回的值为“0”，则表示健康，如果为非0，则表示异常。\n\n2）Httpget： 通过发送http/htps请求检查服务是否正常，返回的状态码为200-399则表示容器健康（注http get类似于命令curl -I）。\n\nHttpget探测方式的yaml文件语法如下：\n\n```yaml\nspec:  \n  containers:  \n  - name: liveness  \n    image: k8s.gcr.io/liveness  \n    livenessProbe:              #采用livenessProbe机制探测  \n      httpGet:                  #采用httpget的方式  \n    scheme:HTTP         #指定协议，也支持https  \n        path: /healthz          #检测是否可以访问到网页根目录下的healthz网页文件  \n        port: 8080              #监听端口是8080  \n      initialDelaySeconds: 3     #容器运行3秒后开始探测  \n      periodSeconds: 3                #探测频率为3秒  \n```\n\n上述配置文件中，探测方式为项容器发送HTTP GET请求，请求的是8080端口下的healthz文件，返回任何大于或等于200且小于400的状态码表示成功。任何其他代码表示异常。\n\n3）tcpSocket： 通过容器的IP和Port执行TCP检查，如果能够建立TCP连接，则表明容器健康，这种方式与HTTPget的探测机制有些类似，tcpsocket健康检查适用于TCP业务。\n\ntcpSocket探测方式的yaml文件语法如下：\n\n```yaml\nspec:  \n  containers:  \n  - name: goproxy  \n    image: k8s.gcr.io/goproxy:0.1  \n    ports:  \n- containerPort: 8080  \n#这里两种探测机制都用上了，都是为了和容器的8080端口建立TCP连接  \n    readinessProbe:  \n      tcpSocket:  \n        port: 8080  \n      initialDelaySeconds: 5  \n      periodSeconds: 10  \n    livenessProbe:  \n      tcpSocket:  \n        port: 8080  \n      initialDelaySeconds: 15  \n      periodSeconds: 20  \n```\n\n在上述的yaml配置文件中，两类探针都使用了，在容器启动5秒后，kubelet将发送第一个readinessProbe探针，这将连接容器的8080端口，如果探测成功，则该pod为健康，十秒后，kubelet将进行第二次连接。\n\n除了readinessProbe探针外，在容器启动15秒后，kubelet将发送第一个livenessProbe探针，仍然尝试连接容器的8080端口，如果连接失败，则重启容器。\n\n探针探测的结果有以下三种可能：\n\n- Success：Container通过了检查；\n- Failure：Container没有通过检查；\n- Unknown：没有执行检查，因此不采取任何措施（通常是我们没有定义探针检测，默认为成功）。\n\n### **5.如何控制滚动更新过程**\n\n可以通过下面的命令查看到更新时可以控制的参数：\n\n```shell\nkubectl explain deploy.spec.strategy.rollingUpdate \n```\n\nmaxSurge：　此参数控制滚动更新过程，副本总数超过预期pod数量的上限。可以是百分比，也可以是具体的值。默认为1。\n\n（上述参数的作用就是在更新过程中，值若为3，那么不管三七二一，先运行三个pod，用于替换旧的pod，以此类推）\n\nmaxUnavailable： 此参数控制滚动更新过程中，不可用的Pod的数量。\n\n（这个值和上面的值没有任何关系，举个例子：我有十个pod，但是在更新的过程中，我允许这十个pod中最多有三个不可用，那么就将这个参数的值设置为3，在更新的过程中，只要不可用的pod数量小于或等于3，那么更新过程就不会停止）。\n\n### **6.镜像下载策略是什么**\n\n可通过命令“kubectl explain pod.spec.containers”来查看imagePullPolicy这行的解释。\n\nK8s的镜像下载策略有三种：Always、Never、IFNotPresent；\n\n- Always：镜像标签为latest时，总是从指定的仓库中获取镜像；\n- Never：禁止从仓库中下载镜像，也就是说只能使用本地镜像；\n- IfNotPresent：仅当本地没有对应镜像时，才从目标仓库中下载。\n- 默认的镜像下载策略是：当镜像标签是latest时，默认策略是Always；当镜像标签是自定义时（也就是标签不是latest），那么默认策略是IfNotPresent。\n\n### **7.image的状态有哪些**\n\n- Running：Pod所需的容器已经被成功调度到某个节点，且已经成功运行，\n- Pending：APIserver创建了pod资源对象，并且已经存入etcd中，但它尚未被调度完成或者仍然处于仓库中下载镜像的过程\n- Unknown：APIserver无法正常获取到pod对象的状态，通常是其无法与所在工作节点的kubelet通信所致。\n\n### **8.pod的重启策略是什么？**\n\n可以通过命令“kubectl explain pod.spec”查看pod的重启策略。（restartPolicy字段）\n\n- Always：但凡pod对象终止就重启，此为默认策略。\n- OnFailure：仅在pod对象出现错误时才重启\n\n### **9.K8s中部署应用版本回滚的命令**\n\n```shell\nkubectl apply -f httpd2-deploy1.yaml --record  \n#运行yaml文件，并记录版本信息； \n\nkubectl rollout history deployment httpd-devploy1  \n#查看该deployment的历史版本 \n\nkubectl rollout undo deployment httpd-devploy1 --to-revision=1   \n#执行回滚操作，指定回滚到版本1 \n```\n\n\n\n### **10.标签和标签选择器的作用是什么？**\n\n标签：是当相同类型的资源对象越来越多的时候，为了更好的管理，可以按照标签将其分为一个组，为的是提升资源对象的管理效率。\n\n标签选择器：就是标签的查询过滤条件。目前API支持两种标签选择器：\n\n- 基于等值关系的，如：“=”、“ ” “= =”  、  “！=”（注：“==”也是等于的意思，yaml文件中的matchLabels字段）；\n- 基于集合的，如：in、notin、exists（yaml文件中的matchExpressions字段）；\n\n### **11.常用的标签分类有哪些？**\n\n标签分类是可以自定义的，但是为了能使他人可以达到一目了然的效果，一般会使用以下一些分类：\n\n- 版本类标签（release）：stable（稳定版）、canary（金丝雀版本，可以将其称之为测试版中的测试版）、beta（测试版）；\n- 环境类标签（environment）：dev（开发）、qa（测试）、production（生产）、op（运维）；\n- 应用类（app）：ui、as、pc、sc；\n- 架构类（tier）：frontend（前端）、backend（后端）、cache（缓存）；\n- 分区标签（partition）：customerA（客户A）、customerB（客户B）；\n- 品控级别（Track）：daily（每天）、weekly（每周）\n\n### **12.查看标签的方式。**\n\n```shell\nkubectl get pod --show-labels  #查看pod，并且显示标签内容 \n\nkubectl get pod -L env,tier    #显示资源对象标签的值 \n\nkubectl get pod -l env,tier    #只显示符合键值资源对象的pod，而“-L”是显示所有的pod \n```\n\n\n\n### **13.添加、修改觉删除标签的命令**\n\n```shell\n#对pod标签的操作 \nkubectl label pod label-pod abc=123   #给名为label-pod的pod添加标签 \nkubectl label pod label-pod abc=456 --overwrite   #修改名为label-pod的标签 \nkubectl label pod label-pod abc-       #删除名为label-pod的标签 \nkubectl get pod --show-labels \n\n#对node节点的标签操作   \nkubectl label nodes node01 disk=ssd   #给节点node01添加disk标签 \nkubectl label nodes node01 disk=sss –overwrite  #修改节点node01的标签 \nkubectl label nodes node01 disk-     #删除节点node01的disk标签 \n```\n\n\n\n### **14.DaemonSet资源对象的特性**\n\nDaemonSet这种资源对象会在每个k8s集群中的节点上运行，并且每个节点只能运行一个pod，这是它和deployment资源对象的最大也是唯一的区别。\n\n### **15.Pod的生命周期有哪些状态？**\n\n- Pending：表示pod已经被同意创建，正在等待kube-scheduler选择合适的节点创建，或者正在准备镜像；\n- Running：表示pod中所有的容器已经被创建，并且至少有一个容器正在运行或者是正在启动或者是正在重启；\n- Succeeded：表示所有容器已经成功终止，并且不会再启动；\n- Failed：表示pod中所有容器都是非0（不正常）状态退出；\n- Unknown：表示无法读取Pod状态，通常是kube-controller-manager无法与Pod通信。\n\n### 16.创建一个Pod的流程是如何的？\n\n\n\n![创建pod流程图](/images/k8s常见总结2.assets/创建pod流程图.png)\n\n![1465170-20190403102521028-1937176408](/images/k8s常见总结2.assets/1465170-20190403102521028-1937176408.png)\n\n\n\n- 客户端提交Pod的配置信息（可以是yaml文件定义好的信息）到kube-apiserver；\n- Apiserver收到指令后，通知给controller-manager创建一个资源对象；\n- Controller-manager通过api-server将pod的配置信息存储到ETCD数据中心中；\n- Kube-scheduler检测到pod信息会开始调度预选，会先过滤掉不符合Pod资源配置要求的节点，然后开始调度调优，主要是挑选出更适合运行pod的节点，然后将pod的资源配置单发送到node节点上的kubelet组件上。\n- Kubelet根据scheduler发来的资源配置单运行pod，运行成功后，将pod的运行信息返回给scheduler，scheduler将返回的pod运行状况的信息存储到etcd数据中心。\n\n### 17.删除一个Pod的流程是如何的？\n\nKube-apiserver会接受到用户的删除指令，默认有30秒时间等待优雅退出，超过30秒会被标记为死亡状态，此时Pod的状态Terminating，kubelet看到pod标记为Terminating就开始了关闭Pod的工作；\n\n关闭流程如下：\n\n- pod从service的endpoint列表中被移除；\n- 如果该pod定义了一个停止前的钩子，其会在pod内部被调用，停止钩子一般定义了如何优雅的结束进程；\n- 进程被发送TERM信号（kill -14）\n- 当超过优雅退出的时间后，Pod中的所有进程都会被发送SIGKILL信号（kill -9）。\n\n### 18.K8s的service是什么？\n\nPod每次重启或者重新部署，其IP地址都会产生变化，这使得pod间通信和pod与外部通信变得困难，这时候，就需要Service为pod提供一个固定的入口。\n\nService的Endpoint列表通常绑定了一组相同配置的pod，通过负载均衡的方式把外界请求分配到多个pod上。\n\n### 19.k8s如何进服务注册？\n\nPod启动后会加载当前环境所有Service信息，以便不同Pod根据Service名进行通信。\n\n### 20.K8s数据持久化的方式有哪些？\n\n​\t`emptyDir:`emptyDir是最基础的Volume类型，用于存储临时数据的简单空目录。如果Pod设置了emptyDir类型Volume，Pod被分配到Node上时候，会创建emptyDir，只要Pod运行在Node上，emptyDir都会存在（容器挂掉不会导致emptyDir丢失数据），但是如果Pod从Node上被删除（Pod被删除，或者Pod发生迁移），emptyDir也会被删除，并且永久丢失。\n\n\n\n​\t`Hostpath:`将宿主机上已存在的目录或文件挂载到容器内部。类似于docker中的bind mount挂载方式。这种数据持久化方式，运用场景不多，因为它增加了pod与节点之间的耦合。\n\n\n\n​\t`PersistentVolume:` PersistentVolume(持久卷， 简称 PV)和Persistent VolumeClaim(持久卷声明，简称 PVC)使得K8s集群具备了存储的逻辑抽象能力，使得在配置Pod的逻辑里可以忽略对实际后台存储技术的配置，而把这项配置的工作交给PV的配置者，即集群的管理者。存储的PV和PVC的这种关系，跟计算的Node和Pod的关系是非常类似的；PV和Node是资源的提供者，根据集群的基础设施变化而变化，由K8s集群管理员配置；而PVC和Pod是资源的使用者，根据业务服务的需求变化而变化，由K8s集群的使用者即服务的管理员来配置。\n\n\n\n\n\n---\n\n<center>END</center>\n\n---\n\n","source":"_posts/k8s常见总结2.md","raw":"---\ntitle: k8s常见总结2\ndate: 2021-07-17 11:48:09\ntags: \n  - k8s\ncategories: \n  - k8s\n\n---\n\n\n\nk8s常见总结2\n\n<!--more-->\n\n### 1.k8s是什么？\n\nKubenetes是一个针对容器应用，进行自动部署，弹性伸缩和管理的开源系统。主要功能是生产环境中的容器编排。\n\n\n\n### 2.容器和主机部署应用的区别是什么？\n\n​\t容器的中心思想就是秒级启动；一次封装、到处运行；这是主机部署应用无法达到的效果，但同时也更应该注重容器的数据持久化问题。另外，容器部署可以将各个服务进行隔离，互不影响，这也是容器的另一个核心概念。\n\n\n\n### 3.K8s架构的组成是什么\n\n![K8S架构图](/images/k8s常见总结2.assets/K8S架构图.png)\n\n\n\n- 主节点主要用于暴露API，调度部署和节点的管理；\n- 计算节点运行一个容器运行环境，一般是docker环境（类似docker环境的还有rkt），同时运行一个K8s的代理（kubelet）用于和master通信。计算节点也会运行一些额外的组件，像记录日志，节点监控，服务发现等等。计算节点是k8s集群中真正工作的节点。\n\nMaster节点：\n\n- Kubectl：客户端命令行工具，作为整个K8s集群的操作入口；\n- Api Server：在K8s架构中承担的是“桥梁”的角色，作为资源操作的唯一入口，它提供了认证、授权、访问控制、API注册和发现等机制。客户端与k8s群集及K8s内部组件的通信，都要通过Api Server这个组件；\n- Controller-manager：负责维护群集的状态，比如故障检测、自动扩展、滚动更新等；\n- Scheduler：负责资源的调度，按照预定的调度策略将pod调度到相应的node节点上；\n- Etcd：担任数据中心的角色，保存了整个群集的状态；\n\nNode节点：\n\n- Kubelet：负责维护容器的生命周期，同时也负责Volume和网络的管理，一般运行在所有的节点，是Node节点的代理，当Scheduler确定某个node上运行pod之后，会将pod的具体信息（image，volume）等发送给该节点的kubelet，kubelet根据这些信息创建和运行容器，并向master返回运行状态。（自动修复功能：如果某个节点中的容器宕机，它会尝试重启该容器，若重启无效，则会将该pod杀死，然后重新创建一个容器）；\n- Kube-proxy：Service在逻辑上代表了后端的多个pod。负责为Service提供cluster内部的服务发现和负载均衡（外界通过Service访问pod提供的服务时，Service接收到的请求后就是通过kube-proxy来转发到pod上的）；\n- container-runtime：是负责管理运行容器的软件，比如docker\n- Pod：是k8s集群里面最小的单位。每个pod里边可以运行一个或多个container（容器），如果一个pod中有两个container，那么container的USR（用户）、MNT（挂载点）、PID（进程号）是相互隔离的，UTS（主机名和域名）、IPC（消息队列）、NET（网络栈）是相互共享的。\n\n### 4.kubenetes针对pod资源对象的健康监测机制。\n\nK8s中对于pod资源对象的健康状态检测，提供了三类probe（探针）来执行对pod的健康监测：\n\n1） livenessProbe探针\n\n可以根据用户自定义规则来判定pod是否健康，如果livenessProbe探针探测到容器不健康，则kubelet会根据其重启策略来决定是否重启，初始探测状态为健康状态直到探测失败。如果一个容器不包含livenessProbe探针，则kubelet会认为容器的livenessProbe探针的返回值永远成功。\n\n2） ReadinessProbe探针\n\n同样是可以根据用户自定义规则来判断pod是否健康，如果探测失败，控制器会将此pod从对应service的endpoint列表中移除，从此不再将任何请求调度到此Pod上，直到下次探测成功。初始探测为失败状态，直到探测成功后，将pod加入到service的endpoint列表中。\n\n3） startupProbe探针\n\n启动检查机制，应用一些启动缓慢的业务，避免业务长时间启动而被上面两类探针kill掉，这个问题也可以换另一种方式解决，就是定义上面两类探针机制时，初始化时间定义的长一些即可。\n\n探针检查支持以下参数设置：\n\n- initialDelaySeconds：初始第一次探测间隔，用于应用启动的时间，防止应用还没启动而健康检查失败\n- periodSeconds：检查间隔，多久执行probe检查，默认为10s；\n- timeoutSeconds：检查超时时长，探测应用timeout后为失败；\n- successThreshold：成功探测阈值，表示探测多少次为健康正常，默认探测1次。\n\n探针支持分探测方案：\n\n1）.通过执行命令的方式来检查服务是否正常，比如使用cat命令查看pod中的某个重要配置文件是否存在，若存在，则表示pod健康。反之异常。\n\nExec探测方式的yaml文件语法如下：\n\n```yaml\nspec:  \n  containers:  \n  - name: liveness  \n    image: k8s.gcr.io/busybox  \n    args:  \n    - /bin/sh  \n    - -c  \n    - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600  \n    livenessProbe:         #选择livenessProbe的探测机制  \n      exec:                      #执行以下命令  \n        command:  \n        - cat  \n        - /tmp/healthy  \n      initialDelaySeconds: 5          #在容器运行五秒后开始探测  \n      periodSeconds: 5               #每次探测的时间间隔为5秒  \n```\n\n在上面的配置文件中，探测机制为在容器运行5秒后，每隔五秒探测一次，如果cat命令返回的值为“0”，则表示健康，如果为非0，则表示异常。\n\n2）Httpget： 通过发送http/htps请求检查服务是否正常，返回的状态码为200-399则表示容器健康（注http get类似于命令curl -I）。\n\nHttpget探测方式的yaml文件语法如下：\n\n```yaml\nspec:  \n  containers:  \n  - name: liveness  \n    image: k8s.gcr.io/liveness  \n    livenessProbe:              #采用livenessProbe机制探测  \n      httpGet:                  #采用httpget的方式  \n    scheme:HTTP         #指定协议，也支持https  \n        path: /healthz          #检测是否可以访问到网页根目录下的healthz网页文件  \n        port: 8080              #监听端口是8080  \n      initialDelaySeconds: 3     #容器运行3秒后开始探测  \n      periodSeconds: 3                #探测频率为3秒  \n```\n\n上述配置文件中，探测方式为项容器发送HTTP GET请求，请求的是8080端口下的healthz文件，返回任何大于或等于200且小于400的状态码表示成功。任何其他代码表示异常。\n\n3）tcpSocket： 通过容器的IP和Port执行TCP检查，如果能够建立TCP连接，则表明容器健康，这种方式与HTTPget的探测机制有些类似，tcpsocket健康检查适用于TCP业务。\n\ntcpSocket探测方式的yaml文件语法如下：\n\n```yaml\nspec:  \n  containers:  \n  - name: goproxy  \n    image: k8s.gcr.io/goproxy:0.1  \n    ports:  \n- containerPort: 8080  \n#这里两种探测机制都用上了，都是为了和容器的8080端口建立TCP连接  \n    readinessProbe:  \n      tcpSocket:  \n        port: 8080  \n      initialDelaySeconds: 5  \n      periodSeconds: 10  \n    livenessProbe:  \n      tcpSocket:  \n        port: 8080  \n      initialDelaySeconds: 15  \n      periodSeconds: 20  \n```\n\n在上述的yaml配置文件中，两类探针都使用了，在容器启动5秒后，kubelet将发送第一个readinessProbe探针，这将连接容器的8080端口，如果探测成功，则该pod为健康，十秒后，kubelet将进行第二次连接。\n\n除了readinessProbe探针外，在容器启动15秒后，kubelet将发送第一个livenessProbe探针，仍然尝试连接容器的8080端口，如果连接失败，则重启容器。\n\n探针探测的结果有以下三种可能：\n\n- Success：Container通过了检查；\n- Failure：Container没有通过检查；\n- Unknown：没有执行检查，因此不采取任何措施（通常是我们没有定义探针检测，默认为成功）。\n\n### **5.如何控制滚动更新过程**\n\n可以通过下面的命令查看到更新时可以控制的参数：\n\n```shell\nkubectl explain deploy.spec.strategy.rollingUpdate \n```\n\nmaxSurge：　此参数控制滚动更新过程，副本总数超过预期pod数量的上限。可以是百分比，也可以是具体的值。默认为1。\n\n（上述参数的作用就是在更新过程中，值若为3，那么不管三七二一，先运行三个pod，用于替换旧的pod，以此类推）\n\nmaxUnavailable： 此参数控制滚动更新过程中，不可用的Pod的数量。\n\n（这个值和上面的值没有任何关系，举个例子：我有十个pod，但是在更新的过程中，我允许这十个pod中最多有三个不可用，那么就将这个参数的值设置为3，在更新的过程中，只要不可用的pod数量小于或等于3，那么更新过程就不会停止）。\n\n### **6.镜像下载策略是什么**\n\n可通过命令“kubectl explain pod.spec.containers”来查看imagePullPolicy这行的解释。\n\nK8s的镜像下载策略有三种：Always、Never、IFNotPresent；\n\n- Always：镜像标签为latest时，总是从指定的仓库中获取镜像；\n- Never：禁止从仓库中下载镜像，也就是说只能使用本地镜像；\n- IfNotPresent：仅当本地没有对应镜像时，才从目标仓库中下载。\n- 默认的镜像下载策略是：当镜像标签是latest时，默认策略是Always；当镜像标签是自定义时（也就是标签不是latest），那么默认策略是IfNotPresent。\n\n### **7.image的状态有哪些**\n\n- Running：Pod所需的容器已经被成功调度到某个节点，且已经成功运行，\n- Pending：APIserver创建了pod资源对象，并且已经存入etcd中，但它尚未被调度完成或者仍然处于仓库中下载镜像的过程\n- Unknown：APIserver无法正常获取到pod对象的状态，通常是其无法与所在工作节点的kubelet通信所致。\n\n### **8.pod的重启策略是什么？**\n\n可以通过命令“kubectl explain pod.spec”查看pod的重启策略。（restartPolicy字段）\n\n- Always：但凡pod对象终止就重启，此为默认策略。\n- OnFailure：仅在pod对象出现错误时才重启\n\n### **9.K8s中部署应用版本回滚的命令**\n\n```shell\nkubectl apply -f httpd2-deploy1.yaml --record  \n#运行yaml文件，并记录版本信息； \n\nkubectl rollout history deployment httpd-devploy1  \n#查看该deployment的历史版本 \n\nkubectl rollout undo deployment httpd-devploy1 --to-revision=1   \n#执行回滚操作，指定回滚到版本1 \n```\n\n\n\n### **10.标签和标签选择器的作用是什么？**\n\n标签：是当相同类型的资源对象越来越多的时候，为了更好的管理，可以按照标签将其分为一个组，为的是提升资源对象的管理效率。\n\n标签选择器：就是标签的查询过滤条件。目前API支持两种标签选择器：\n\n- 基于等值关系的，如：“=”、“ ” “= =”  、  “！=”（注：“==”也是等于的意思，yaml文件中的matchLabels字段）；\n- 基于集合的，如：in、notin、exists（yaml文件中的matchExpressions字段）；\n\n### **11.常用的标签分类有哪些？**\n\n标签分类是可以自定义的，但是为了能使他人可以达到一目了然的效果，一般会使用以下一些分类：\n\n- 版本类标签（release）：stable（稳定版）、canary（金丝雀版本，可以将其称之为测试版中的测试版）、beta（测试版）；\n- 环境类标签（environment）：dev（开发）、qa（测试）、production（生产）、op（运维）；\n- 应用类（app）：ui、as、pc、sc；\n- 架构类（tier）：frontend（前端）、backend（后端）、cache（缓存）；\n- 分区标签（partition）：customerA（客户A）、customerB（客户B）；\n- 品控级别（Track）：daily（每天）、weekly（每周）\n\n### **12.查看标签的方式。**\n\n```shell\nkubectl get pod --show-labels  #查看pod，并且显示标签内容 \n\nkubectl get pod -L env,tier    #显示资源对象标签的值 \n\nkubectl get pod -l env,tier    #只显示符合键值资源对象的pod，而“-L”是显示所有的pod \n```\n\n\n\n### **13.添加、修改觉删除标签的命令**\n\n```shell\n#对pod标签的操作 \nkubectl label pod label-pod abc=123   #给名为label-pod的pod添加标签 \nkubectl label pod label-pod abc=456 --overwrite   #修改名为label-pod的标签 \nkubectl label pod label-pod abc-       #删除名为label-pod的标签 \nkubectl get pod --show-labels \n\n#对node节点的标签操作   \nkubectl label nodes node01 disk=ssd   #给节点node01添加disk标签 \nkubectl label nodes node01 disk=sss –overwrite  #修改节点node01的标签 \nkubectl label nodes node01 disk-     #删除节点node01的disk标签 \n```\n\n\n\n### **14.DaemonSet资源对象的特性**\n\nDaemonSet这种资源对象会在每个k8s集群中的节点上运行，并且每个节点只能运行一个pod，这是它和deployment资源对象的最大也是唯一的区别。\n\n### **15.Pod的生命周期有哪些状态？**\n\n- Pending：表示pod已经被同意创建，正在等待kube-scheduler选择合适的节点创建，或者正在准备镜像；\n- Running：表示pod中所有的容器已经被创建，并且至少有一个容器正在运行或者是正在启动或者是正在重启；\n- Succeeded：表示所有容器已经成功终止，并且不会再启动；\n- Failed：表示pod中所有容器都是非0（不正常）状态退出；\n- Unknown：表示无法读取Pod状态，通常是kube-controller-manager无法与Pod通信。\n\n### 16.创建一个Pod的流程是如何的？\n\n\n\n![创建pod流程图](/images/k8s常见总结2.assets/创建pod流程图.png)\n\n![1465170-20190403102521028-1937176408](/images/k8s常见总结2.assets/1465170-20190403102521028-1937176408.png)\n\n\n\n- 客户端提交Pod的配置信息（可以是yaml文件定义好的信息）到kube-apiserver；\n- Apiserver收到指令后，通知给controller-manager创建一个资源对象；\n- Controller-manager通过api-server将pod的配置信息存储到ETCD数据中心中；\n- Kube-scheduler检测到pod信息会开始调度预选，会先过滤掉不符合Pod资源配置要求的节点，然后开始调度调优，主要是挑选出更适合运行pod的节点，然后将pod的资源配置单发送到node节点上的kubelet组件上。\n- Kubelet根据scheduler发来的资源配置单运行pod，运行成功后，将pod的运行信息返回给scheduler，scheduler将返回的pod运行状况的信息存储到etcd数据中心。\n\n### 17.删除一个Pod的流程是如何的？\n\nKube-apiserver会接受到用户的删除指令，默认有30秒时间等待优雅退出，超过30秒会被标记为死亡状态，此时Pod的状态Terminating，kubelet看到pod标记为Terminating就开始了关闭Pod的工作；\n\n关闭流程如下：\n\n- pod从service的endpoint列表中被移除；\n- 如果该pod定义了一个停止前的钩子，其会在pod内部被调用，停止钩子一般定义了如何优雅的结束进程；\n- 进程被发送TERM信号（kill -14）\n- 当超过优雅退出的时间后，Pod中的所有进程都会被发送SIGKILL信号（kill -9）。\n\n### 18.K8s的service是什么？\n\nPod每次重启或者重新部署，其IP地址都会产生变化，这使得pod间通信和pod与外部通信变得困难，这时候，就需要Service为pod提供一个固定的入口。\n\nService的Endpoint列表通常绑定了一组相同配置的pod，通过负载均衡的方式把外界请求分配到多个pod上。\n\n### 19.k8s如何进服务注册？\n\nPod启动后会加载当前环境所有Service信息，以便不同Pod根据Service名进行通信。\n\n### 20.K8s数据持久化的方式有哪些？\n\n​\t`emptyDir:`emptyDir是最基础的Volume类型，用于存储临时数据的简单空目录。如果Pod设置了emptyDir类型Volume，Pod被分配到Node上时候，会创建emptyDir，只要Pod运行在Node上，emptyDir都会存在（容器挂掉不会导致emptyDir丢失数据），但是如果Pod从Node上被删除（Pod被删除，或者Pod发生迁移），emptyDir也会被删除，并且永久丢失。\n\n\n\n​\t`Hostpath:`将宿主机上已存在的目录或文件挂载到容器内部。类似于docker中的bind mount挂载方式。这种数据持久化方式，运用场景不多，因为它增加了pod与节点之间的耦合。\n\n\n\n​\t`PersistentVolume:` PersistentVolume(持久卷， 简称 PV)和Persistent VolumeClaim(持久卷声明，简称 PVC)使得K8s集群具备了存储的逻辑抽象能力，使得在配置Pod的逻辑里可以忽略对实际后台存储技术的配置，而把这项配置的工作交给PV的配置者，即集群的管理者。存储的PV和PVC的这种关系，跟计算的Node和Pod的关系是非常类似的；PV和Node是资源的提供者，根据集群的基础设施变化而变化，由K8s集群管理员配置；而PVC和Pod是资源的使用者，根据业务服务的需求变化而变化，由K8s集群的使用者即服务的管理员来配置。\n\n\n\n\n\n---\n\n<center>END</center>\n\n---\n\n","slug":"k8s常见总结2","published":1,"updated":"2021-08-12T06:20:23.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxjvzrom00170gu68rggcjex","content":"<p>k8s常见总结2</p>\n<span id=\"more\"></span>\n\n<h3 id=\"1-k8s是什么？\"><a href=\"#1-k8s是什么？\" class=\"headerlink\" title=\"1.k8s是什么？\"></a>1.k8s是什么？</h3><p>Kubenetes是一个针对容器应用，进行自动部署，弹性伸缩和管理的开源系统。主要功能是生产环境中的容器编排。</p>\n<h3 id=\"2-容器和主机部署应用的区别是什么？\"><a href=\"#2-容器和主机部署应用的区别是什么？\" class=\"headerlink\" title=\"2.容器和主机部署应用的区别是什么？\"></a>2.容器和主机部署应用的区别是什么？</h3><p>​    容器的中心思想就是秒级启动；一次封装、到处运行；这是主机部署应用无法达到的效果，但同时也更应该注重容器的数据持久化问题。另外，容器部署可以将各个服务进行隔离，互不影响，这也是容器的另一个核心概念。</p>\n<h3 id=\"3-K8s架构的组成是什么\"><a href=\"#3-K8s架构的组成是什么\" class=\"headerlink\" title=\"3.K8s架构的组成是什么\"></a>3.K8s架构的组成是什么</h3><p><img src=\"/images/k8s%E5%B8%B8%E8%A7%81%E6%80%BB%E7%BB%932.assets/K8S%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"K8S架构图\"></p>\n<ul>\n<li>主节点主要用于暴露API，调度部署和节点的管理；</li>\n<li>计算节点运行一个容器运行环境，一般是docker环境（类似docker环境的还有rkt），同时运行一个K8s的代理（kubelet）用于和master通信。计算节点也会运行一些额外的组件，像记录日志，节点监控，服务发现等等。计算节点是k8s集群中真正工作的节点。</li>\n</ul>\n<p>Master节点：</p>\n<ul>\n<li>Kubectl：客户端命令行工具，作为整个K8s集群的操作入口；</li>\n<li>Api Server：在K8s架构中承担的是“桥梁”的角色，作为资源操作的唯一入口，它提供了认证、授权、访问控制、API注册和发现等机制。客户端与k8s群集及K8s内部组件的通信，都要通过Api Server这个组件；</li>\n<li>Controller-manager：负责维护群集的状态，比如故障检测、自动扩展、滚动更新等；</li>\n<li>Scheduler：负责资源的调度，按照预定的调度策略将pod调度到相应的node节点上；</li>\n<li>Etcd：担任数据中心的角色，保存了整个群集的状态；</li>\n</ul>\n<p>Node节点：</p>\n<ul>\n<li>Kubelet：负责维护容器的生命周期，同时也负责Volume和网络的管理，一般运行在所有的节点，是Node节点的代理，当Scheduler确定某个node上运行pod之后，会将pod的具体信息（image，volume）等发送给该节点的kubelet，kubelet根据这些信息创建和运行容器，并向master返回运行状态。（自动修复功能：如果某个节点中的容器宕机，它会尝试重启该容器，若重启无效，则会将该pod杀死，然后重新创建一个容器）；</li>\n<li>Kube-proxy：Service在逻辑上代表了后端的多个pod。负责为Service提供cluster内部的服务发现和负载均衡（外界通过Service访问pod提供的服务时，Service接收到的请求后就是通过kube-proxy来转发到pod上的）；</li>\n<li>container-runtime：是负责管理运行容器的软件，比如docker</li>\n<li>Pod：是k8s集群里面最小的单位。每个pod里边可以运行一个或多个container（容器），如果一个pod中有两个container，那么container的USR（用户）、MNT（挂载点）、PID（进程号）是相互隔离的，UTS（主机名和域名）、IPC（消息队列）、NET（网络栈）是相互共享的。</li>\n</ul>\n<h3 id=\"4-kubenetes针对pod资源对象的健康监测机制。\"><a href=\"#4-kubenetes针对pod资源对象的健康监测机制。\" class=\"headerlink\" title=\"4.kubenetes针对pod资源对象的健康监测机制。\"></a>4.kubenetes针对pod资源对象的健康监测机制。</h3><p>K8s中对于pod资源对象的健康状态检测，提供了三类probe（探针）来执行对pod的健康监测：</p>\n<p>1） livenessProbe探针</p>\n<p>可以根据用户自定义规则来判定pod是否健康，如果livenessProbe探针探测到容器不健康，则kubelet会根据其重启策略来决定是否重启，初始探测状态为健康状态直到探测失败。如果一个容器不包含livenessProbe探针，则kubelet会认为容器的livenessProbe探针的返回值永远成功。</p>\n<p>2） ReadinessProbe探针</p>\n<p>同样是可以根据用户自定义规则来判断pod是否健康，如果探测失败，控制器会将此pod从对应service的endpoint列表中移除，从此不再将任何请求调度到此Pod上，直到下次探测成功。初始探测为失败状态，直到探测成功后，将pod加入到service的endpoint列表中。</p>\n<p>3） startupProbe探针</p>\n<p>启动检查机制，应用一些启动缓慢的业务，避免业务长时间启动而被上面两类探针kill掉，这个问题也可以换另一种方式解决，就是定义上面两类探针机制时，初始化时间定义的长一些即可。</p>\n<p>探针检查支持以下参数设置：</p>\n<ul>\n<li>initialDelaySeconds：初始第一次探测间隔，用于应用启动的时间，防止应用还没启动而健康检查失败</li>\n<li>periodSeconds：检查间隔，多久执行probe检查，默认为10s；</li>\n<li>timeoutSeconds：检查超时时长，探测应用timeout后为失败；</li>\n<li>successThreshold：成功探测阈值，表示探测多少次为健康正常，默认探测1次。</li>\n</ul>\n<p>探针支持分探测方案：</p>\n<p>1）.通过执行命令的方式来检查服务是否正常，比如使用cat命令查看pod中的某个重要配置文件是否存在，若存在，则表示pod健康。反之异常。</p>\n<p>Exec探测方式的yaml文件语法如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span>  </span><br><span class=\"line\">  <span class=\"attr\">containers:</span>  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">liveness</span>  </span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">k8s.gcr.io/busybox</span>  </span><br><span class=\"line\">    <span class=\"attr\">args:</span>  </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/bin/sh</span>  </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">-c</span>  </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">touch</span> <span class=\"string\">/tmp/healthy;</span> <span class=\"string\">sleep</span> <span class=\"number\">30</span><span class=\"string\">;</span> <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">/tmp/healthy;</span> <span class=\"string\">sleep</span> <span class=\"number\">600</span>  </span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span>         <span class=\"comment\">#选择livenessProbe的探测机制  </span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span>                      <span class=\"comment\">#执行以下命令  </span></span><br><span class=\"line\">        <span class=\"attr\">command:</span>  </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">cat</span>  </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/tmp/healthy</span>  </span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span>          <span class=\"comment\">#在容器运行五秒后开始探测  </span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">5</span>               <span class=\"comment\">#每次探测的时间间隔为5秒  </span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的配置文件中，探测机制为在容器运行5秒后，每隔五秒探测一次，如果cat命令返回的值为“0”，则表示健康，如果为非0，则表示异常。</p>\n<p>2）Httpget： 通过发送http/htps请求检查服务是否正常，返回的状态码为200-399则表示容器健康（注http get类似于命令curl -I）。</p>\n<p>Httpget探测方式的yaml文件语法如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span>  </span><br><span class=\"line\">  <span class=\"attr\">containers:</span>  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">liveness</span>  </span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">k8s.gcr.io/liveness</span>  </span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span>              <span class=\"comment\">#采用livenessProbe机制探测  </span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span>                  <span class=\"comment\">#采用httpget的方式  </span></span><br><span class=\"line\">    <span class=\"string\">scheme:HTTP</span>         <span class=\"comment\">#指定协议，也支持https  </span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/healthz</span>          <span class=\"comment\">#检测是否可以访问到网页根目录下的healthz网页文件  </span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8080</span>              <span class=\"comment\">#监听端口是8080  </span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">3</span>     <span class=\"comment\">#容器运行3秒后开始探测  </span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">3</span>                <span class=\"comment\">#探测频率为3秒  </span></span><br></pre></td></tr></table></figure>\n\n<p>上述配置文件中，探测方式为项容器发送HTTP GET请求，请求的是8080端口下的healthz文件，返回任何大于或等于200且小于400的状态码表示成功。任何其他代码表示异常。</p>\n<p>3）tcpSocket： 通过容器的IP和Port执行TCP检查，如果能够建立TCP连接，则表明容器健康，这种方式与HTTPget的探测机制有些类似，tcpsocket健康检查适用于TCP业务。</p>\n<p>tcpSocket探测方式的yaml文件语法如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span>  </span><br><span class=\"line\">  <span class=\"attr\">containers:</span>  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">goproxy</span>  </span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">k8s.gcr.io/goproxy:0.1</span>  </span><br><span class=\"line\">    <span class=\"attr\">ports:</span>  </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8080</span>  </span><br><span class=\"line\"><span class=\"comment\">#这里两种探测机制都用上了，都是为了和容器的8080端口建立TCP连接  </span></span><br><span class=\"line\">    <span class=\"attr\">readinessProbe:</span>  </span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span>  </span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8080</span>  </span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span>  </span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span>  </span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span>  </span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span>  </span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8080</span>  </span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span>  </span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span>  </span><br></pre></td></tr></table></figure>\n\n<p>在上述的yaml配置文件中，两类探针都使用了，在容器启动5秒后，kubelet将发送第一个readinessProbe探针，这将连接容器的8080端口，如果探测成功，则该pod为健康，十秒后，kubelet将进行第二次连接。</p>\n<p>除了readinessProbe探针外，在容器启动15秒后，kubelet将发送第一个livenessProbe探针，仍然尝试连接容器的8080端口，如果连接失败，则重启容器。</p>\n<p>探针探测的结果有以下三种可能：</p>\n<ul>\n<li>Success：Container通过了检查；</li>\n<li>Failure：Container没有通过检查；</li>\n<li>Unknown：没有执行检查，因此不采取任何措施（通常是我们没有定义探针检测，默认为成功）。</li>\n</ul>\n<h3 id=\"5-如何控制滚动更新过程\"><a href=\"#5-如何控制滚动更新过程\" class=\"headerlink\" title=\"5.如何控制滚动更新过程\"></a><strong>5.如何控制滚动更新过程</strong></h3><p>可以通过下面的命令查看到更新时可以控制的参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl explain deploy.spec.strategy.rollingUpdate </span><br></pre></td></tr></table></figure>\n\n<p>maxSurge：　此参数控制滚动更新过程，副本总数超过预期pod数量的上限。可以是百分比，也可以是具体的值。默认为1。</p>\n<p>（上述参数的作用就是在更新过程中，值若为3，那么不管三七二一，先运行三个pod，用于替换旧的pod，以此类推）</p>\n<p>maxUnavailable： 此参数控制滚动更新过程中，不可用的Pod的数量。</p>\n<p>（这个值和上面的值没有任何关系，举个例子：我有十个pod，但是在更新的过程中，我允许这十个pod中最多有三个不可用，那么就将这个参数的值设置为3，在更新的过程中，只要不可用的pod数量小于或等于3，那么更新过程就不会停止）。</p>\n<h3 id=\"6-镜像下载策略是什么\"><a href=\"#6-镜像下载策略是什么\" class=\"headerlink\" title=\"6.镜像下载策略是什么\"></a><strong>6.镜像下载策略是什么</strong></h3><p>可通过命令“kubectl explain pod.spec.containers”来查看imagePullPolicy这行的解释。</p>\n<p>K8s的镜像下载策略有三种：Always、Never、IFNotPresent；</p>\n<ul>\n<li>Always：镜像标签为latest时，总是从指定的仓库中获取镜像；</li>\n<li>Never：禁止从仓库中下载镜像，也就是说只能使用本地镜像；</li>\n<li>IfNotPresent：仅当本地没有对应镜像时，才从目标仓库中下载。</li>\n<li>默认的镜像下载策略是：当镜像标签是latest时，默认策略是Always；当镜像标签是自定义时（也就是标签不是latest），那么默认策略是IfNotPresent。</li>\n</ul>\n<h3 id=\"7-image的状态有哪些\"><a href=\"#7-image的状态有哪些\" class=\"headerlink\" title=\"7.image的状态有哪些\"></a><strong>7.image的状态有哪些</strong></h3><ul>\n<li>Running：Pod所需的容器已经被成功调度到某个节点，且已经成功运行，</li>\n<li>Pending：APIserver创建了pod资源对象，并且已经存入etcd中，但它尚未被调度完成或者仍然处于仓库中下载镜像的过程</li>\n<li>Unknown：APIserver无法正常获取到pod对象的状态，通常是其无法与所在工作节点的kubelet通信所致。</li>\n</ul>\n<h3 id=\"8-pod的重启策略是什么？\"><a href=\"#8-pod的重启策略是什么？\" class=\"headerlink\" title=\"8.pod的重启策略是什么？\"></a><strong>8.pod的重启策略是什么？</strong></h3><p>可以通过命令“kubectl explain pod.spec”查看pod的重启策略。（restartPolicy字段）</p>\n<ul>\n<li>Always：但凡pod对象终止就重启，此为默认策略。</li>\n<li>OnFailure：仅在pod对象出现错误时才重启</li>\n</ul>\n<h3 id=\"9-K8s中部署应用版本回滚的命令\"><a href=\"#9-K8s中部署应用版本回滚的命令\" class=\"headerlink\" title=\"9.K8s中部署应用版本回滚的命令\"></a><strong>9.K8s中部署应用版本回滚的命令</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f httpd2-deploy1.yaml --record  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">运行yaml文件，并记录版本信息；</span> </span><br><span class=\"line\"></span><br><span class=\"line\">kubectl rollout history deployment httpd-devploy1  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看该deployment的历史版本</span> </span><br><span class=\"line\"></span><br><span class=\"line\">kubectl rollout undo deployment httpd-devploy1 --to-revision=1   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行回滚操作，指定回滚到版本1</span> </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"10-标签和标签选择器的作用是什么？\"><a href=\"#10-标签和标签选择器的作用是什么？\" class=\"headerlink\" title=\"10.标签和标签选择器的作用是什么？\"></a><strong>10.标签和标签选择器的作用是什么？</strong></h3><p>标签：是当相同类型的资源对象越来越多的时候，为了更好的管理，可以按照标签将其分为一个组，为的是提升资源对象的管理效率。</p>\n<p>标签选择器：就是标签的查询过滤条件。目前API支持两种标签选择器：</p>\n<ul>\n<li>基于等值关系的，如：“=”、“ ” “= =”  、  “！=”（注：“==”也是等于的意思，yaml文件中的matchLabels字段）；</li>\n<li>基于集合的，如：in、notin、exists（yaml文件中的matchExpressions字段）；</li>\n</ul>\n<h3 id=\"11-常用的标签分类有哪些？\"><a href=\"#11-常用的标签分类有哪些？\" class=\"headerlink\" title=\"11.常用的标签分类有哪些？\"></a><strong>11.常用的标签分类有哪些？</strong></h3><p>标签分类是可以自定义的，但是为了能使他人可以达到一目了然的效果，一般会使用以下一些分类：</p>\n<ul>\n<li>版本类标签（release）：stable（稳定版）、canary（金丝雀版本，可以将其称之为测试版中的测试版）、beta（测试版）；</li>\n<li>环境类标签（environment）：dev（开发）、qa（测试）、production（生产）、op（运维）；</li>\n<li>应用类（app）：ui、as、pc、sc；</li>\n<li>架构类（tier）：frontend（前端）、backend（后端）、cache（缓存）；</li>\n<li>分区标签（partition）：customerA（客户A）、customerB（客户B）；</li>\n<li>品控级别（Track）：daily（每天）、weekly（每周）</li>\n</ul>\n<h3 id=\"12-查看标签的方式。\"><a href=\"#12-查看标签的方式。\" class=\"headerlink\" title=\"12.查看标签的方式。\"></a><strong>12.查看标签的方式。</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod --show-labels  #查看pod，并且显示标签内容 </span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pod -L env,tier    #显示资源对象标签的值 </span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pod -l env,tier    #只显示符合键值资源对象的pod，而“-L”是显示所有的pod </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"13-添加、修改觉删除标签的命令\"><a href=\"#13-添加、修改觉删除标签的命令\" class=\"headerlink\" title=\"13.添加、修改觉删除标签的命令\"></a><strong>13.添加、修改觉删除标签的命令</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">对pod标签的操作</span> </span><br><span class=\"line\">kubectl label pod label-pod abc=123   #给名为label-pod的pod添加标签 </span><br><span class=\"line\">kubectl label pod label-pod abc=456 --overwrite   #修改名为label-pod的标签 </span><br><span class=\"line\">kubectl label pod label-pod abc-       #删除名为label-pod的标签 </span><br><span class=\"line\">kubectl get pod --show-labels </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">对node节点的标签操作</span>   </span><br><span class=\"line\">kubectl label nodes node01 disk=ssd   #给节点node01添加disk标签 </span><br><span class=\"line\">kubectl label nodes node01 disk=sss –overwrite  #修改节点node01的标签 </span><br><span class=\"line\">kubectl label nodes node01 disk-     #删除节点node01的disk标签 </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"14-DaemonSet资源对象的特性\"><a href=\"#14-DaemonSet资源对象的特性\" class=\"headerlink\" title=\"14.DaemonSet资源对象的特性\"></a><strong>14.DaemonSet资源对象的特性</strong></h3><p>DaemonSet这种资源对象会在每个k8s集群中的节点上运行，并且每个节点只能运行一个pod，这是它和deployment资源对象的最大也是唯一的区别。</p>\n<h3 id=\"15-Pod的生命周期有哪些状态？\"><a href=\"#15-Pod的生命周期有哪些状态？\" class=\"headerlink\" title=\"15.Pod的生命周期有哪些状态？\"></a><strong>15.Pod的生命周期有哪些状态？</strong></h3><ul>\n<li>Pending：表示pod已经被同意创建，正在等待kube-scheduler选择合适的节点创建，或者正在准备镜像；</li>\n<li>Running：表示pod中所有的容器已经被创建，并且至少有一个容器正在运行或者是正在启动或者是正在重启；</li>\n<li>Succeeded：表示所有容器已经成功终止，并且不会再启动；</li>\n<li>Failed：表示pod中所有容器都是非0（不正常）状态退出；</li>\n<li>Unknown：表示无法读取Pod状态，通常是kube-controller-manager无法与Pod通信。</li>\n</ul>\n<h3 id=\"16-创建一个Pod的流程是如何的？\"><a href=\"#16-创建一个Pod的流程是如何的？\" class=\"headerlink\" title=\"16.创建一个Pod的流程是如何的？\"></a>16.创建一个Pod的流程是如何的？</h3><p><img src=\"/images/k8s%E5%B8%B8%E8%A7%81%E6%80%BB%E7%BB%932.assets/%E5%88%9B%E5%BB%BApod%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"创建pod流程图\"></p>\n<p><img src=\"/images/k8s%E5%B8%B8%E8%A7%81%E6%80%BB%E7%BB%932.assets/1465170-20190403102521028-1937176408.png\" alt=\"1465170-20190403102521028-1937176408\"></p>\n<ul>\n<li>客户端提交Pod的配置信息（可以是yaml文件定义好的信息）到kube-apiserver；</li>\n<li>Apiserver收到指令后，通知给controller-manager创建一个资源对象；</li>\n<li>Controller-manager通过api-server将pod的配置信息存储到ETCD数据中心中；</li>\n<li>Kube-scheduler检测到pod信息会开始调度预选，会先过滤掉不符合Pod资源配置要求的节点，然后开始调度调优，主要是挑选出更适合运行pod的节点，然后将pod的资源配置单发送到node节点上的kubelet组件上。</li>\n<li>Kubelet根据scheduler发来的资源配置单运行pod，运行成功后，将pod的运行信息返回给scheduler，scheduler将返回的pod运行状况的信息存储到etcd数据中心。</li>\n</ul>\n<h3 id=\"17-删除一个Pod的流程是如何的？\"><a href=\"#17-删除一个Pod的流程是如何的？\" class=\"headerlink\" title=\"17.删除一个Pod的流程是如何的？\"></a>17.删除一个Pod的流程是如何的？</h3><p>Kube-apiserver会接受到用户的删除指令，默认有30秒时间等待优雅退出，超过30秒会被标记为死亡状态，此时Pod的状态Terminating，kubelet看到pod标记为Terminating就开始了关闭Pod的工作；</p>\n<p>关闭流程如下：</p>\n<ul>\n<li>pod从service的endpoint列表中被移除；</li>\n<li>如果该pod定义了一个停止前的钩子，其会在pod内部被调用，停止钩子一般定义了如何优雅的结束进程；</li>\n<li>进程被发送TERM信号（kill -14）</li>\n<li>当超过优雅退出的时间后，Pod中的所有进程都会被发送SIGKILL信号（kill -9）。</li>\n</ul>\n<h3 id=\"18-K8s的service是什么？\"><a href=\"#18-K8s的service是什么？\" class=\"headerlink\" title=\"18.K8s的service是什么？\"></a>18.K8s的service是什么？</h3><p>Pod每次重启或者重新部署，其IP地址都会产生变化，这使得pod间通信和pod与外部通信变得困难，这时候，就需要Service为pod提供一个固定的入口。</p>\n<p>Service的Endpoint列表通常绑定了一组相同配置的pod，通过负载均衡的方式把外界请求分配到多个pod上。</p>\n<h3 id=\"19-k8s如何进服务注册？\"><a href=\"#19-k8s如何进服务注册？\" class=\"headerlink\" title=\"19.k8s如何进服务注册？\"></a>19.k8s如何进服务注册？</h3><p>Pod启动后会加载当前环境所有Service信息，以便不同Pod根据Service名进行通信。</p>\n<h3 id=\"20-K8s数据持久化的方式有哪些？\"><a href=\"#20-K8s数据持久化的方式有哪些？\" class=\"headerlink\" title=\"20.K8s数据持久化的方式有哪些？\"></a>20.K8s数据持久化的方式有哪些？</h3><p>​    <code>emptyDir:</code>emptyDir是最基础的Volume类型，用于存储临时数据的简单空目录。如果Pod设置了emptyDir类型Volume，Pod被分配到Node上时候，会创建emptyDir，只要Pod运行在Node上，emptyDir都会存在（容器挂掉不会导致emptyDir丢失数据），但是如果Pod从Node上被删除（Pod被删除，或者Pod发生迁移），emptyDir也会被删除，并且永久丢失。</p>\n<p>​    <code>Hostpath:</code>将宿主机上已存在的目录或文件挂载到容器内部。类似于docker中的bind mount挂载方式。这种数据持久化方式，运用场景不多，因为它增加了pod与节点之间的耦合。</p>\n<p>​    <code>PersistentVolume:</code> PersistentVolume(持久卷， 简称 PV)和Persistent VolumeClaim(持久卷声明，简称 PVC)使得K8s集群具备了存储的逻辑抽象能力，使得在配置Pod的逻辑里可以忽略对实际后台存储技术的配置，而把这项配置的工作交给PV的配置者，即集群的管理者。存储的PV和PVC的这种关系，跟计算的Node和Pod的关系是非常类似的；PV和Node是资源的提供者，根据集群的基础设施变化而变化，由K8s集群管理员配置；而PVC和Pod是资源的使用者，根据业务服务的需求变化而变化，由K8s集群的使用者即服务的管理员来配置。</p>\n<hr>\n<center>END</center>\n\n<hr>\n","site":{"data":{"post-body-end":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n","variables":""}},"length":7517,"excerpt":"<p>k8s常见总结2</p>","more":"<h3 id=\"1-k8s是什么？\"><a href=\"#1-k8s是什么？\" class=\"headerlink\" title=\"1.k8s是什么？\"></a>1.k8s是什么？</h3><p>Kubenetes是一个针对容器应用，进行自动部署，弹性伸缩和管理的开源系统。主要功能是生产环境中的容器编排。</p>\n<h3 id=\"2-容器和主机部署应用的区别是什么？\"><a href=\"#2-容器和主机部署应用的区别是什么？\" class=\"headerlink\" title=\"2.容器和主机部署应用的区别是什么？\"></a>2.容器和主机部署应用的区别是什么？</h3><p>​    容器的中心思想就是秒级启动；一次封装、到处运行；这是主机部署应用无法达到的效果，但同时也更应该注重容器的数据持久化问题。另外，容器部署可以将各个服务进行隔离，互不影响，这也是容器的另一个核心概念。</p>\n<h3 id=\"3-K8s架构的组成是什么\"><a href=\"#3-K8s架构的组成是什么\" class=\"headerlink\" title=\"3.K8s架构的组成是什么\"></a>3.K8s架构的组成是什么</h3><p><img src=\"/images/k8s%E5%B8%B8%E8%A7%81%E6%80%BB%E7%BB%932.assets/K8S%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"K8S架构图\"></p>\n<ul>\n<li>主节点主要用于暴露API，调度部署和节点的管理；</li>\n<li>计算节点运行一个容器运行环境，一般是docker环境（类似docker环境的还有rkt），同时运行一个K8s的代理（kubelet）用于和master通信。计算节点也会运行一些额外的组件，像记录日志，节点监控，服务发现等等。计算节点是k8s集群中真正工作的节点。</li>\n</ul>\n<p>Master节点：</p>\n<ul>\n<li>Kubectl：客户端命令行工具，作为整个K8s集群的操作入口；</li>\n<li>Api Server：在K8s架构中承担的是“桥梁”的角色，作为资源操作的唯一入口，它提供了认证、授权、访问控制、API注册和发现等机制。客户端与k8s群集及K8s内部组件的通信，都要通过Api Server这个组件；</li>\n<li>Controller-manager：负责维护群集的状态，比如故障检测、自动扩展、滚动更新等；</li>\n<li>Scheduler：负责资源的调度，按照预定的调度策略将pod调度到相应的node节点上；</li>\n<li>Etcd：担任数据中心的角色，保存了整个群集的状态；</li>\n</ul>\n<p>Node节点：</p>\n<ul>\n<li>Kubelet：负责维护容器的生命周期，同时也负责Volume和网络的管理，一般运行在所有的节点，是Node节点的代理，当Scheduler确定某个node上运行pod之后，会将pod的具体信息（image，volume）等发送给该节点的kubelet，kubelet根据这些信息创建和运行容器，并向master返回运行状态。（自动修复功能：如果某个节点中的容器宕机，它会尝试重启该容器，若重启无效，则会将该pod杀死，然后重新创建一个容器）；</li>\n<li>Kube-proxy：Service在逻辑上代表了后端的多个pod。负责为Service提供cluster内部的服务发现和负载均衡（外界通过Service访问pod提供的服务时，Service接收到的请求后就是通过kube-proxy来转发到pod上的）；</li>\n<li>container-runtime：是负责管理运行容器的软件，比如docker</li>\n<li>Pod：是k8s集群里面最小的单位。每个pod里边可以运行一个或多个container（容器），如果一个pod中有两个container，那么container的USR（用户）、MNT（挂载点）、PID（进程号）是相互隔离的，UTS（主机名和域名）、IPC（消息队列）、NET（网络栈）是相互共享的。</li>\n</ul>\n<h3 id=\"4-kubenetes针对pod资源对象的健康监测机制。\"><a href=\"#4-kubenetes针对pod资源对象的健康监测机制。\" class=\"headerlink\" title=\"4.kubenetes针对pod资源对象的健康监测机制。\"></a>4.kubenetes针对pod资源对象的健康监测机制。</h3><p>K8s中对于pod资源对象的健康状态检测，提供了三类probe（探针）来执行对pod的健康监测：</p>\n<p>1） livenessProbe探针</p>\n<p>可以根据用户自定义规则来判定pod是否健康，如果livenessProbe探针探测到容器不健康，则kubelet会根据其重启策略来决定是否重启，初始探测状态为健康状态直到探测失败。如果一个容器不包含livenessProbe探针，则kubelet会认为容器的livenessProbe探针的返回值永远成功。</p>\n<p>2） ReadinessProbe探针</p>\n<p>同样是可以根据用户自定义规则来判断pod是否健康，如果探测失败，控制器会将此pod从对应service的endpoint列表中移除，从此不再将任何请求调度到此Pod上，直到下次探测成功。初始探测为失败状态，直到探测成功后，将pod加入到service的endpoint列表中。</p>\n<p>3） startupProbe探针</p>\n<p>启动检查机制，应用一些启动缓慢的业务，避免业务长时间启动而被上面两类探针kill掉，这个问题也可以换另一种方式解决，就是定义上面两类探针机制时，初始化时间定义的长一些即可。</p>\n<p>探针检查支持以下参数设置：</p>\n<ul>\n<li>initialDelaySeconds：初始第一次探测间隔，用于应用启动的时间，防止应用还没启动而健康检查失败</li>\n<li>periodSeconds：检查间隔，多久执行probe检查，默认为10s；</li>\n<li>timeoutSeconds：检查超时时长，探测应用timeout后为失败；</li>\n<li>successThreshold：成功探测阈值，表示探测多少次为健康正常，默认探测1次。</li>\n</ul>\n<p>探针支持分探测方案：</p>\n<p>1）.通过执行命令的方式来检查服务是否正常，比如使用cat命令查看pod中的某个重要配置文件是否存在，若存在，则表示pod健康。反之异常。</p>\n<p>Exec探测方式的yaml文件语法如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span>  </span><br><span class=\"line\">  <span class=\"attr\">containers:</span>  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">liveness</span>  </span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">k8s.gcr.io/busybox</span>  </span><br><span class=\"line\">    <span class=\"attr\">args:</span>  </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/bin/sh</span>  </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">-c</span>  </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">touch</span> <span class=\"string\">/tmp/healthy;</span> <span class=\"string\">sleep</span> <span class=\"number\">30</span><span class=\"string\">;</span> <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">/tmp/healthy;</span> <span class=\"string\">sleep</span> <span class=\"number\">600</span>  </span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span>         <span class=\"comment\">#选择livenessProbe的探测机制  </span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span>                      <span class=\"comment\">#执行以下命令  </span></span><br><span class=\"line\">        <span class=\"attr\">command:</span>  </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">cat</span>  </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/tmp/healthy</span>  </span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span>          <span class=\"comment\">#在容器运行五秒后开始探测  </span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">5</span>               <span class=\"comment\">#每次探测的时间间隔为5秒  </span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的配置文件中，探测机制为在容器运行5秒后，每隔五秒探测一次，如果cat命令返回的值为“0”，则表示健康，如果为非0，则表示异常。</p>\n<p>2）Httpget： 通过发送http/htps请求检查服务是否正常，返回的状态码为200-399则表示容器健康（注http get类似于命令curl -I）。</p>\n<p>Httpget探测方式的yaml文件语法如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span>  </span><br><span class=\"line\">  <span class=\"attr\">containers:</span>  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">liveness</span>  </span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">k8s.gcr.io/liveness</span>  </span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span>              <span class=\"comment\">#采用livenessProbe机制探测  </span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span>                  <span class=\"comment\">#采用httpget的方式  </span></span><br><span class=\"line\">    <span class=\"string\">scheme:HTTP</span>         <span class=\"comment\">#指定协议，也支持https  </span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/healthz</span>          <span class=\"comment\">#检测是否可以访问到网页根目录下的healthz网页文件  </span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8080</span>              <span class=\"comment\">#监听端口是8080  </span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">3</span>     <span class=\"comment\">#容器运行3秒后开始探测  </span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">3</span>                <span class=\"comment\">#探测频率为3秒  </span></span><br></pre></td></tr></table></figure>\n\n<p>上述配置文件中，探测方式为项容器发送HTTP GET请求，请求的是8080端口下的healthz文件，返回任何大于或等于200且小于400的状态码表示成功。任何其他代码表示异常。</p>\n<p>3）tcpSocket： 通过容器的IP和Port执行TCP检查，如果能够建立TCP连接，则表明容器健康，这种方式与HTTPget的探测机制有些类似，tcpsocket健康检查适用于TCP业务。</p>\n<p>tcpSocket探测方式的yaml文件语法如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span>  </span><br><span class=\"line\">  <span class=\"attr\">containers:</span>  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">goproxy</span>  </span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">k8s.gcr.io/goproxy:0.1</span>  </span><br><span class=\"line\">    <span class=\"attr\">ports:</span>  </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8080</span>  </span><br><span class=\"line\"><span class=\"comment\">#这里两种探测机制都用上了，都是为了和容器的8080端口建立TCP连接  </span></span><br><span class=\"line\">    <span class=\"attr\">readinessProbe:</span>  </span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span>  </span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8080</span>  </span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span>  </span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span>  </span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span>  </span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span>  </span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8080</span>  </span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span>  </span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span>  </span><br></pre></td></tr></table></figure>\n\n<p>在上述的yaml配置文件中，两类探针都使用了，在容器启动5秒后，kubelet将发送第一个readinessProbe探针，这将连接容器的8080端口，如果探测成功，则该pod为健康，十秒后，kubelet将进行第二次连接。</p>\n<p>除了readinessProbe探针外，在容器启动15秒后，kubelet将发送第一个livenessProbe探针，仍然尝试连接容器的8080端口，如果连接失败，则重启容器。</p>\n<p>探针探测的结果有以下三种可能：</p>\n<ul>\n<li>Success：Container通过了检查；</li>\n<li>Failure：Container没有通过检查；</li>\n<li>Unknown：没有执行检查，因此不采取任何措施（通常是我们没有定义探针检测，默认为成功）。</li>\n</ul>\n<h3 id=\"5-如何控制滚动更新过程\"><a href=\"#5-如何控制滚动更新过程\" class=\"headerlink\" title=\"5.如何控制滚动更新过程\"></a><strong>5.如何控制滚动更新过程</strong></h3><p>可以通过下面的命令查看到更新时可以控制的参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl explain deploy.spec.strategy.rollingUpdate </span><br></pre></td></tr></table></figure>\n\n<p>maxSurge：　此参数控制滚动更新过程，副本总数超过预期pod数量的上限。可以是百分比，也可以是具体的值。默认为1。</p>\n<p>（上述参数的作用就是在更新过程中，值若为3，那么不管三七二一，先运行三个pod，用于替换旧的pod，以此类推）</p>\n<p>maxUnavailable： 此参数控制滚动更新过程中，不可用的Pod的数量。</p>\n<p>（这个值和上面的值没有任何关系，举个例子：我有十个pod，但是在更新的过程中，我允许这十个pod中最多有三个不可用，那么就将这个参数的值设置为3，在更新的过程中，只要不可用的pod数量小于或等于3，那么更新过程就不会停止）。</p>\n<h3 id=\"6-镜像下载策略是什么\"><a href=\"#6-镜像下载策略是什么\" class=\"headerlink\" title=\"6.镜像下载策略是什么\"></a><strong>6.镜像下载策略是什么</strong></h3><p>可通过命令“kubectl explain pod.spec.containers”来查看imagePullPolicy这行的解释。</p>\n<p>K8s的镜像下载策略有三种：Always、Never、IFNotPresent；</p>\n<ul>\n<li>Always：镜像标签为latest时，总是从指定的仓库中获取镜像；</li>\n<li>Never：禁止从仓库中下载镜像，也就是说只能使用本地镜像；</li>\n<li>IfNotPresent：仅当本地没有对应镜像时，才从目标仓库中下载。</li>\n<li>默认的镜像下载策略是：当镜像标签是latest时，默认策略是Always；当镜像标签是自定义时（也就是标签不是latest），那么默认策略是IfNotPresent。</li>\n</ul>\n<h3 id=\"7-image的状态有哪些\"><a href=\"#7-image的状态有哪些\" class=\"headerlink\" title=\"7.image的状态有哪些\"></a><strong>7.image的状态有哪些</strong></h3><ul>\n<li>Running：Pod所需的容器已经被成功调度到某个节点，且已经成功运行，</li>\n<li>Pending：APIserver创建了pod资源对象，并且已经存入etcd中，但它尚未被调度完成或者仍然处于仓库中下载镜像的过程</li>\n<li>Unknown：APIserver无法正常获取到pod对象的状态，通常是其无法与所在工作节点的kubelet通信所致。</li>\n</ul>\n<h3 id=\"8-pod的重启策略是什么？\"><a href=\"#8-pod的重启策略是什么？\" class=\"headerlink\" title=\"8.pod的重启策略是什么？\"></a><strong>8.pod的重启策略是什么？</strong></h3><p>可以通过命令“kubectl explain pod.spec”查看pod的重启策略。（restartPolicy字段）</p>\n<ul>\n<li>Always：但凡pod对象终止就重启，此为默认策略。</li>\n<li>OnFailure：仅在pod对象出现错误时才重启</li>\n</ul>\n<h3 id=\"9-K8s中部署应用版本回滚的命令\"><a href=\"#9-K8s中部署应用版本回滚的命令\" class=\"headerlink\" title=\"9.K8s中部署应用版本回滚的命令\"></a><strong>9.K8s中部署应用版本回滚的命令</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f httpd2-deploy1.yaml --record  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">运行yaml文件，并记录版本信息；</span> </span><br><span class=\"line\"></span><br><span class=\"line\">kubectl rollout history deployment httpd-devploy1  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看该deployment的历史版本</span> </span><br><span class=\"line\"></span><br><span class=\"line\">kubectl rollout undo deployment httpd-devploy1 --to-revision=1   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行回滚操作，指定回滚到版本1</span> </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"10-标签和标签选择器的作用是什么？\"><a href=\"#10-标签和标签选择器的作用是什么？\" class=\"headerlink\" title=\"10.标签和标签选择器的作用是什么？\"></a><strong>10.标签和标签选择器的作用是什么？</strong></h3><p>标签：是当相同类型的资源对象越来越多的时候，为了更好的管理，可以按照标签将其分为一个组，为的是提升资源对象的管理效率。</p>\n<p>标签选择器：就是标签的查询过滤条件。目前API支持两种标签选择器：</p>\n<ul>\n<li>基于等值关系的，如：“=”、“ ” “= =”  、  “！=”（注：“==”也是等于的意思，yaml文件中的matchLabels字段）；</li>\n<li>基于集合的，如：in、notin、exists（yaml文件中的matchExpressions字段）；</li>\n</ul>\n<h3 id=\"11-常用的标签分类有哪些？\"><a href=\"#11-常用的标签分类有哪些？\" class=\"headerlink\" title=\"11.常用的标签分类有哪些？\"></a><strong>11.常用的标签分类有哪些？</strong></h3><p>标签分类是可以自定义的，但是为了能使他人可以达到一目了然的效果，一般会使用以下一些分类：</p>\n<ul>\n<li>版本类标签（release）：stable（稳定版）、canary（金丝雀版本，可以将其称之为测试版中的测试版）、beta（测试版）；</li>\n<li>环境类标签（environment）：dev（开发）、qa（测试）、production（生产）、op（运维）；</li>\n<li>应用类（app）：ui、as、pc、sc；</li>\n<li>架构类（tier）：frontend（前端）、backend（后端）、cache（缓存）；</li>\n<li>分区标签（partition）：customerA（客户A）、customerB（客户B）；</li>\n<li>品控级别（Track）：daily（每天）、weekly（每周）</li>\n</ul>\n<h3 id=\"12-查看标签的方式。\"><a href=\"#12-查看标签的方式。\" class=\"headerlink\" title=\"12.查看标签的方式。\"></a><strong>12.查看标签的方式。</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod --show-labels  #查看pod，并且显示标签内容 </span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pod -L env,tier    #显示资源对象标签的值 </span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pod -l env,tier    #只显示符合键值资源对象的pod，而“-L”是显示所有的pod </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"13-添加、修改觉删除标签的命令\"><a href=\"#13-添加、修改觉删除标签的命令\" class=\"headerlink\" title=\"13.添加、修改觉删除标签的命令\"></a><strong>13.添加、修改觉删除标签的命令</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">对pod标签的操作</span> </span><br><span class=\"line\">kubectl label pod label-pod abc=123   #给名为label-pod的pod添加标签 </span><br><span class=\"line\">kubectl label pod label-pod abc=456 --overwrite   #修改名为label-pod的标签 </span><br><span class=\"line\">kubectl label pod label-pod abc-       #删除名为label-pod的标签 </span><br><span class=\"line\">kubectl get pod --show-labels </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">对node节点的标签操作</span>   </span><br><span class=\"line\">kubectl label nodes node01 disk=ssd   #给节点node01添加disk标签 </span><br><span class=\"line\">kubectl label nodes node01 disk=sss –overwrite  #修改节点node01的标签 </span><br><span class=\"line\">kubectl label nodes node01 disk-     #删除节点node01的disk标签 </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"14-DaemonSet资源对象的特性\"><a href=\"#14-DaemonSet资源对象的特性\" class=\"headerlink\" title=\"14.DaemonSet资源对象的特性\"></a><strong>14.DaemonSet资源对象的特性</strong></h3><p>DaemonSet这种资源对象会在每个k8s集群中的节点上运行，并且每个节点只能运行一个pod，这是它和deployment资源对象的最大也是唯一的区别。</p>\n<h3 id=\"15-Pod的生命周期有哪些状态？\"><a href=\"#15-Pod的生命周期有哪些状态？\" class=\"headerlink\" title=\"15.Pod的生命周期有哪些状态？\"></a><strong>15.Pod的生命周期有哪些状态？</strong></h3><ul>\n<li>Pending：表示pod已经被同意创建，正在等待kube-scheduler选择合适的节点创建，或者正在准备镜像；</li>\n<li>Running：表示pod中所有的容器已经被创建，并且至少有一个容器正在运行或者是正在启动或者是正在重启；</li>\n<li>Succeeded：表示所有容器已经成功终止，并且不会再启动；</li>\n<li>Failed：表示pod中所有容器都是非0（不正常）状态退出；</li>\n<li>Unknown：表示无法读取Pod状态，通常是kube-controller-manager无法与Pod通信。</li>\n</ul>\n<h3 id=\"16-创建一个Pod的流程是如何的？\"><a href=\"#16-创建一个Pod的流程是如何的？\" class=\"headerlink\" title=\"16.创建一个Pod的流程是如何的？\"></a>16.创建一个Pod的流程是如何的？</h3><p><img src=\"/images/k8s%E5%B8%B8%E8%A7%81%E6%80%BB%E7%BB%932.assets/%E5%88%9B%E5%BB%BApod%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"创建pod流程图\"></p>\n<p><img src=\"/images/k8s%E5%B8%B8%E8%A7%81%E6%80%BB%E7%BB%932.assets/1465170-20190403102521028-1937176408.png\" alt=\"1465170-20190403102521028-1937176408\"></p>\n<ul>\n<li>客户端提交Pod的配置信息（可以是yaml文件定义好的信息）到kube-apiserver；</li>\n<li>Apiserver收到指令后，通知给controller-manager创建一个资源对象；</li>\n<li>Controller-manager通过api-server将pod的配置信息存储到ETCD数据中心中；</li>\n<li>Kube-scheduler检测到pod信息会开始调度预选，会先过滤掉不符合Pod资源配置要求的节点，然后开始调度调优，主要是挑选出更适合运行pod的节点，然后将pod的资源配置单发送到node节点上的kubelet组件上。</li>\n<li>Kubelet根据scheduler发来的资源配置单运行pod，运行成功后，将pod的运行信息返回给scheduler，scheduler将返回的pod运行状况的信息存储到etcd数据中心。</li>\n</ul>\n<h3 id=\"17-删除一个Pod的流程是如何的？\"><a href=\"#17-删除一个Pod的流程是如何的？\" class=\"headerlink\" title=\"17.删除一个Pod的流程是如何的？\"></a>17.删除一个Pod的流程是如何的？</h3><p>Kube-apiserver会接受到用户的删除指令，默认有30秒时间等待优雅退出，超过30秒会被标记为死亡状态，此时Pod的状态Terminating，kubelet看到pod标记为Terminating就开始了关闭Pod的工作；</p>\n<p>关闭流程如下：</p>\n<ul>\n<li>pod从service的endpoint列表中被移除；</li>\n<li>如果该pod定义了一个停止前的钩子，其会在pod内部被调用，停止钩子一般定义了如何优雅的结束进程；</li>\n<li>进程被发送TERM信号（kill -14）</li>\n<li>当超过优雅退出的时间后，Pod中的所有进程都会被发送SIGKILL信号（kill -9）。</li>\n</ul>\n<h3 id=\"18-K8s的service是什么？\"><a href=\"#18-K8s的service是什么？\" class=\"headerlink\" title=\"18.K8s的service是什么？\"></a>18.K8s的service是什么？</h3><p>Pod每次重启或者重新部署，其IP地址都会产生变化，这使得pod间通信和pod与外部通信变得困难，这时候，就需要Service为pod提供一个固定的入口。</p>\n<p>Service的Endpoint列表通常绑定了一组相同配置的pod，通过负载均衡的方式把外界请求分配到多个pod上。</p>\n<h3 id=\"19-k8s如何进服务注册？\"><a href=\"#19-k8s如何进服务注册？\" class=\"headerlink\" title=\"19.k8s如何进服务注册？\"></a>19.k8s如何进服务注册？</h3><p>Pod启动后会加载当前环境所有Service信息，以便不同Pod根据Service名进行通信。</p>\n<h3 id=\"20-K8s数据持久化的方式有哪些？\"><a href=\"#20-K8s数据持久化的方式有哪些？\" class=\"headerlink\" title=\"20.K8s数据持久化的方式有哪些？\"></a>20.K8s数据持久化的方式有哪些？</h3><p>​    <code>emptyDir:</code>emptyDir是最基础的Volume类型，用于存储临时数据的简单空目录。如果Pod设置了emptyDir类型Volume，Pod被分配到Node上时候，会创建emptyDir，只要Pod运行在Node上，emptyDir都会存在（容器挂掉不会导致emptyDir丢失数据），但是如果Pod从Node上被删除（Pod被删除，或者Pod发生迁移），emptyDir也会被删除，并且永久丢失。</p>\n<p>​    <code>Hostpath:</code>将宿主机上已存在的目录或文件挂载到容器内部。类似于docker中的bind mount挂载方式。这种数据持久化方式，运用场景不多，因为它增加了pod与节点之间的耦合。</p>\n<p>​    <code>PersistentVolume:</code> PersistentVolume(持久卷， 简称 PV)和Persistent VolumeClaim(持久卷声明，简称 PVC)使得K8s集群具备了存储的逻辑抽象能力，使得在配置Pod的逻辑里可以忽略对实际后台存储技术的配置，而把这项配置的工作交给PV的配置者，即集群的管理者。存储的PV和PVC的这种关系，跟计算的Node和Pod的关系是非常类似的；PV和Node是资源的提供者，根据集群的基础设施变化而变化，由K8s集群管理员配置；而PVC和Pod是资源的使用者，根据业务服务的需求变化而变化，由K8s集群的使用者即服务的管理员来配置。</p>\n<hr>\n<center>END</center>\n\n<hr>"},{"title":"kubeadm部署k8s","date":"2021-06-20T06:32:58.000Z","_content":"\n\n\n\n\nkubeadm是官方社区推出的一个用于快速部署kubernetes集群的工具。\n<!-- more -->\n这个工具能通过两条指令完成一个kubernetes集群的部署：\n\n```shell\n# 创建一个 Master 节点\n$ kubeadm init\n\n# 将一个 Node 节点加入到当前集群中\n$ kubeadm join <Master节点的IP和端口 >\n```\n\n## 1. 安装要求\n\n在开始之前，部署Kubernetes集群机器需要满足以下几个条件：\n\n- 一台或多台机器，操作系统 CentOS7.x-86_x64\n- 硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多\n- 集群中所有机器之间网络互通\n- 可以访问外网，需要拉取镜像\n- 禁止swap分区\n\n## 2. 准备环境\n\n\n\n| 角色       | IP            |\n| ---------- | ------------- |\n| k8s-master | 192.168.81.57 |\n| k8s-node1  | 192.168.81.58 |\n| k8s-node2  | 192.168.81.59 |\n\n```shell\n# 关闭防火墙：\nsystemctl stop firewalld\nsystemctl disable firewalld\n\n# 关闭selinux：\nsed -i 's/enforcing/disabled/' /etc/selinux/config  # 永久\nsetenforce 0  # 临时\n\n# 关闭swap：\nswapoff -a  # 临时\nvim /etc/fstab  # 永久\nswapoff /dev/mapper/centos-swap\nfree -h\n# 设置主机名：\nhostnamectl set-hostname <hostname>\n\n# 在master添加hosts：\ncat >> /etc/hosts << EOF\n192.168.81.57 k8s-master\n192.168.81.58 k8s-node1\n192.168.81.59 k8s-node2\nEOF\n\n# 将桥接的IPv4流量传递到iptables的链：\ncat > /etc/sysctl.d/k8s.conf << EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsysctl --system  # 生效\n\n# 时间同步：\nyum install ntpdate -y\nntpdate time.windows.com\n```\n\n## 3. 安装Docker/kubeadm/kubelet【所有节点】\n\nKubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。\n\n### 3.1 安装Docker\n\n```sh\nwget http://mirrors.aliyun.com/repo/Centos-7.repo\nwget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo\nyum -y install docker-ce\nsystemctl enable docker && systemctl start docker\n\n# 查看docker版本\n[root@localhost ~]# docker version\nClient: Docker Engine - Community\n Version:           20.10.5\n API version:       1.41\n Go version:        go1.13.15\n Git commit:        55c4c88\n Built:             Tue Mar  2 20:33:55 2021\n OS/Arch:           linux/amd64\n Context:           default\n Experimental:      true\n\nServer: Docker Engine - Community\n Engine:\n  Version:          20.10.5\n  API version:      1.41 (minimum version 1.12)\n  Go version:       go1.13.15\n  Git commit:       363e9a8\n  Built:            Tue Mar  2 20:32:17 2021\n  OS/Arch:          linux/amd64\n  Experimental:     false\n containerd:\n  Version:          1.4.4\n  GitCommit:        05f951a3781f4f2c1911b05e61c160e9c30eaa8e\n runc:\n  Version:          1.0.0-rc93\n  GitCommit:        12644e614e25b05da6fd08a38ffa0cfe1903fdec\n docker-init:\n  Version:          0.19.0\n  GitCommit:        de40ad0\n\n```\n\n配置镜像下载加速器：\n\n```shell\ncat > /etc/docker/daemon.json << EOF\n{\n  \"registry-mirrors\": [\"https://b9pmyelo.mirror.aliyuncs.com\"]\n}\nEOF\n\nsystemctl restart docker\ndocker info\n```\n\n### 3.2 添加阿里云YUM软件源\n\n```shell\ncat > /etc/yum.repos.d/kubernetes.repo << EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\n```\n\n### 3.2.1 常用管理命令\n\n```shell\n# 命令格式：docker image COMMAND\n\n# 指令 描述\n# ls\t\t\t//列出镜像\n# build\t\t\t//构建镜像来自Dockerfile\n# history\t\t//查看镜像历史\n# inspect\t\t//显示一个或多个镜像详细信息\n# pull\t\t\t//从镜像仓库拉取镜像\n# push\t\t\t//推送一个镜像到镜像仓库\n# rm\t\t\t//移除一个或多个镜像\n# prune\t\t\t//移除没有被标记或者没有被任何容器引用的镜像\n# tag\t\t\t//创建一个引用源镜像标记目标镜像\n# save\t\t\t//保存一个或多个镜像到一个tar归档文件\n# load\t\t\t//加载镜像来自tar归档或标准输入\n```\n\n> docker save load使用\n\n```shell\n# 将有网络的镜像打包为tar文件 81.57操作\n[root@localhost ~]# docker save nginx -o nginx.tar\n[root@localhost ~]# ls\nanaconda-ks.cfg  nginx.tar\n[root@localhost ~]# du -sh nginx.tar \n131M\tnginx.tar\n\n# 查看tar包内容\n[root@localhost ~]# tar tvf nginx.tar \n-rw-r--r-- 0/0            7731 2021-03-11 08:21 018aec2b4f302b08b4c7274b72bede1fe56ee1f2bcaa06492e3f464e05f1a9a8.json\ndrwxr-xr-x 0/0               0 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/\n-rw-r--r-- 0/0               3 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/VERSION\n-rw-r--r-- 0/0             482 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/json\n-rw-r--r-- 0/0            4096 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/layer.tar\ndrwxr-xr-x 0/0               0 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/\n-rw-r--r-- 0/0               3 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/VERSION\n-rw-r--r-- 0/0            1682 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/json\n-rw-r--r-- 0/0            7168 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/layer.tar\ndrwxr-xr-x 0/0               0 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/\n-rw-r--r-- 0/0               3 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/VERSION\n-rw-r--r-- 0/0             482 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/json\n-rw-r--r-- 0/0            3584 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/layer.tar\ndrwxr-xr-x 0/0               0 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/\n-rw-r--r-- 0/0               3 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/VERSION\n-rw-r--r-- 0/0             482 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/json\n-rw-r--r-- 0/0            3072 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/layer.tar\ndrwxr-xr-x 0/0               0 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/\n-rw-r--r-- 0/0               3 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/VERSION\n-rw-r--r-- 0/0             482 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/json\n-rw-r--r-- 0/0        64807936 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/layer.tar\ndrwxr-xr-x 0/0               0 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/\n-rw-r--r-- 0/0               3 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/VERSION\n-rw-r--r-- 0/0             406 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/json\n-rw-r--r-- 0/0        72491008 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/layer.tar\n-rw-r--r-- 0/0             586 1970-01-01 08:00 manifest.json\n-rw-r--r-- 0/0              88 1970-01-01 08:00 repositories\n\n# 传到没有网络的主机\n[root@localhost ~]# scp nginx.tar 192.168.81.58:/root\n\n# 81.58操作导入tar包到本地镜像\n[root@localhost ~]# docker load -i  nginx.tar \n\n[root@localhost ~]# docker images \nREPOSITORY   TAG       IMAGE ID       CREATED        SIZE\nnginx        latest    018aec2b4f30   26 hours ago   133MB\n\n```\n\n\n\n```shell\n# 启动nginx镜像映射IP\n[root@localhost ~]# docker run -d -p 8080:80 nginx\n38f999f57ffa1c1ab6799eab45323152564a943c00081a3f98838f5ef29fca21\n\n```\n\n\n\n### 3.3 安装kubeadm，kubelet和kubectl\n\n由于版本更新频繁，这里指定版本号部署：\n\n```shell\n# 所有节点操作\nyum install -y kubelet-1.20.0 kubeadm-1.20.0 kubectl-1.20.0\nsystemctl enable kubelet\n```\n\n## 4. 部署Kubernetes Master\n\nhttps://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file \n\nhttps://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node \n\n在192.168.81.57（Master）执行。\n\n```shell\nkubeadm init \\\n  --apiserver-advertise-address=192.168.81.57 \\\n  --image-repository registry.aliyuncs.com/google_containers \\\n  --kubernetes-version v1.20.0 \\\n  --service-cidr=10.96.0.0/12 \\\n  --pod-network-cidr=10.244.0.0/16 \\\n  --ignore-preflight-errors=all\n```\n\n- --apiserver-advertise-address 集群通告地址\n- --image-repository  由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址\n- --kubernetes-version K8s版本，与上面安装的一致\n- --service-cidr 集群内部虚拟网络，Pod统一访问入口\n- --pod-network-cidr Pod网络，，与下面部署的CNI网络组件yaml中保持一致\n\n或者使用配置文件引导：\n\n```shell\nvi kubeadm.conf\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\nkubernetesVersion: v1.20.0\nimageRepository: registry.aliyuncs.com/google_containers \nnetworking:\n  podSubnet: 10.244.0.0/16 \n  serviceSubnet: 10.96.0.0/12 \n\nkubeadm init --config kubeadm.conf --ignore-preflight-errors=all  \n```\n\n\n\n拷贝kubectl使用的连接k8s认证文件到默认路径：\n\n```bash\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n[root@k8s-master ~]# ll .kube/config \n-rw------- 1 root root 5569 3月  12 11:58 .kube/config\n\n```\n\n```shell\nkubectl get nodes\nNAME               STATUS     ROLES            AGE   VERSION\nlocalhost.localdomain   NotReady   control-plane,master   20s   v1.20.0\n```\n\n\n\n## 5. 加入Kubernetes Node\n\n在192.168.81.58/59（Node）执行。\n\n向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：\n\n```sh\nkubeadm join 192.168.81.57:6443 --token tqxl1u.8vwoeza99jxzgoi0 \\\n    --discovery-token-ca-cert-hash sha256:48321ed1651b239cee9dd3b482a24e9deee1e48c7ca3b34cfa429524538275ba \n```\n\n默认token有效期为24小时，当过期之后，该token就不可用了。这时就需要重新创建token，可以直接使用命令快捷生成：\n\n```shell\nkubeadm token create --print-join-command\n```\n\n<https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/>\n\n## 6. 部署容器网络（CNI）\n\nhttps://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network \n\n注意：只需要部署下面其中一个，推荐Calico。\n\nCalico是一个纯三层的数据中心网络方案，Calico支持广泛的平台，包括Kubernetes、OpenStack等。\n\nCalico 在每一个计算节点利用 Linux Kernel 实现了一个高效的虚拟路由器（ vRouter） 来负责数据转发，而每个 vRouter 通过 BGP 协议负责把自己上运行的 workload 的路由信息向整个 Calico 网络内传播。\n\n此外，Calico  项目还实现了 Kubernetes 网络策略，提供ACL功能。\n\n https://docs.projectcalico.org/getting-started/kubernetes/quickstart \n\n```shell\nwget https://docs.projectcalico.org/manifests/calico.yaml\n\n# 修改yaml以下内容 IP地址段与上述init地址段保持一致\n[root@k8s-master ~]# vim calico.yaml\n            - name: CALICO_IPV4POOL_CIDR\n              value: \"10.244.0.0/16\"\n\n```\n\n下载完后还需要修改里面定义Pod网络（CALICO_IPV4POOL_CIDR），与前面kubeadm init指定的一样\n\n修改完后应用清单：\n\n```shell\nkubectl apply -f calico.yaml\nkubectl get pods -n kube-system\n```\n\n## 7. 测试kubernetes集群\n\n- 验证Pod工作\n- 验证Pod网络通信\n- 验证DNS解析\n\n在Kubernetes集群中创建一个pod，验证是否正常运行：\n\n```shell\nkubectl create deployment nginx --image=nginx\nkubectl expose deployment nginx --port=80 --type=NodePort\n[root@k8s-master ~]# kubectl expose deployment web --port=80 --target-port=80 --type=NodePort\n\nkubectl get pod,svc\n\n\n# 查看 master 组件状态\n[root@k8s-master ~]# kubectl get cs\nWarning: v1 ComponentStatus is deprecated in v1.19+\nNAME                 STATUS      MESSAGE                                                                                       ERROR\nscheduler            Unhealthy   Get \"http://127.0.0.1:10251/healthz\": dial tcp 127.0.0.1:10251: connect: connection refused   \ncontroller-manager   Unhealthy   Get \"http://127.0.0.1:10252/healthz\": dial tcp 127.0.0.1:10252: connect: connection refused   \netcd-0               Healthy     {\"health\":\"true\"}  \n\n查看 master 组件不健康，估计版本小bug，不影响使用，如果要修复：\n打开两个文件：\n/etc/kubernetes/manifests/kube-controller-manager.yaml\n/etc/kubernetes/manifests/kube-scheduler.yaml\n#注释掉 --port=0，开启本地非安全端口，然后systemctl restart kubelet\n```\n\n访问地址：http://NodeIP:Port  \n\n## 8. 部署 Dashboard\n\n```shell\nwget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml\n```\n\n默认Dashboard只能集群内部访问，修改Service为NodePort类型，暴露到外部：\n\n```shell\nvi recommended.yaml\n...\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  ports:\n    - port: 443\n      targetPort: 8443\n      nodePort: 30001\n  selector:\n    k8s-app: kubernetes-dashboard\n  type: NodePort\n...\n\nkubectl apply -f recommended.yaml\nkubectl get pods -n kubernetes-dashboard\nNAME                                         READY   STATUS    RESTARTS   AGE\ndashboard-metrics-scraper-6b4884c9d5-gl8nr   1/1     Running   0          13m\nkubernetes-dashboard-7f99b75bf4-89cds        1/1     Running   0          13m$ vi recommended.yaml...kind: ServiceapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  ports:    - port: 443      targetPort: 8443      nodePort: 30001  selector:    k8s-app: kubernetes-dashboard  type: NodePort...$ kubectl apply -f recommended.yaml$ kubectl get pods -n kubernetes-dashboardNAME                                         READY   STATUS    RESTARTS   AGEdashboard-metrics-scraper-6b4884c9d5-gl8nr   1/1     Running   0          13mkubernetes-dashboard-7f99b75bf4-89cds        1/1     Running   0          13m\n```\n\n访问地址：https://NodeIP:30001\n\n创建service account并绑定默认cluster-admin管理员集群角色：\n\n```shell\n# 创建用户\n$ kubectl create serviceaccount dashboard-admin -n kube-system\n# 用户授权\n$ kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin\n# 获取用户Token\n$ kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk '/dashboard-admin/{print $1}')\n```\n\n使用输出的token登录Dashboard。\n\n## 9. 切换容器引擎为Containerd\n\nhttps://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd\n\n1、配置先决条件\n\n```shell\ncat <<EOF | sudo tee /etc/modules-load.d/containerd.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# 设置必需的 sysctl 参数，这些参数在重新启动后仍然存在。\ncat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nEOF\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n```\n\n2、安装containerd\n\n```shell\n# 安装 containerd\n## 设置仓库\n### 安装所需包\nyum install -y yum-utils device-mapper-persistent-data lvm2\n\n# 添加 docker 仓库\nyum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n\n# 添加 contoinerd\nyum update -y && sudo yum install -y containerd.io\n\n# 配置 contoinerd\nmkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# 重启 contoinerd\nsystemctl restart containerd\n```\n\n3、修改配置文件\n\n```shell\nvi /etc/containerd/config.toml\n   [plugins.\"io.containerd.grpc.v1.cri\"]\n      sandbox_image = \"registry.aliyuncs.com/google_containers/pause:3.2\"  \n         ...\t\t\t# 改为国内地址\n         [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n             SystemdCgroup = true\n             ...\t\t# Cgroup驱动\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]\n          endpoint = [\"https://b9pmyelo.mirror.aliyuncs.com\"]\n          # 改为阿里云加速器\n\n```\n\n4、配置kubelet使用containerd\n\n```shell\nvi /etc/sysconfig/kubelet \nKUBELET_EXTRA_ARGS=--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock --cgroup-driver=systemd\n\nsystemctl stop docker\nsystemctl restart kubelet\njournalctl -u kubelet \n```\n\n\n\n5、验证\n\n```shell\nkubectl get node -o wide\n\nk8s-node1  xxx  containerd://1.4.4\n```\n\n\n\n","source":"_posts/kubeadm部署k8s.md","raw":"---\ntitle: kubeadm部署k8s\ndate: 2021-06-20 14:32:58\ntags: \n  - k8s\ncategories: \n  - k8s\n---\n\n\n\n\n\nkubeadm是官方社区推出的一个用于快速部署kubernetes集群的工具。\n<!-- more -->\n这个工具能通过两条指令完成一个kubernetes集群的部署：\n\n```shell\n# 创建一个 Master 节点\n$ kubeadm init\n\n# 将一个 Node 节点加入到当前集群中\n$ kubeadm join <Master节点的IP和端口 >\n```\n\n## 1. 安装要求\n\n在开始之前，部署Kubernetes集群机器需要满足以下几个条件：\n\n- 一台或多台机器，操作系统 CentOS7.x-86_x64\n- 硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多\n- 集群中所有机器之间网络互通\n- 可以访问外网，需要拉取镜像\n- 禁止swap分区\n\n## 2. 准备环境\n\n\n\n| 角色       | IP            |\n| ---------- | ------------- |\n| k8s-master | 192.168.81.57 |\n| k8s-node1  | 192.168.81.58 |\n| k8s-node2  | 192.168.81.59 |\n\n```shell\n# 关闭防火墙：\nsystemctl stop firewalld\nsystemctl disable firewalld\n\n# 关闭selinux：\nsed -i 's/enforcing/disabled/' /etc/selinux/config  # 永久\nsetenforce 0  # 临时\n\n# 关闭swap：\nswapoff -a  # 临时\nvim /etc/fstab  # 永久\nswapoff /dev/mapper/centos-swap\nfree -h\n# 设置主机名：\nhostnamectl set-hostname <hostname>\n\n# 在master添加hosts：\ncat >> /etc/hosts << EOF\n192.168.81.57 k8s-master\n192.168.81.58 k8s-node1\n192.168.81.59 k8s-node2\nEOF\n\n# 将桥接的IPv4流量传递到iptables的链：\ncat > /etc/sysctl.d/k8s.conf << EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsysctl --system  # 生效\n\n# 时间同步：\nyum install ntpdate -y\nntpdate time.windows.com\n```\n\n## 3. 安装Docker/kubeadm/kubelet【所有节点】\n\nKubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。\n\n### 3.1 安装Docker\n\n```sh\nwget http://mirrors.aliyun.com/repo/Centos-7.repo\nwget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo\nyum -y install docker-ce\nsystemctl enable docker && systemctl start docker\n\n# 查看docker版本\n[root@localhost ~]# docker version\nClient: Docker Engine - Community\n Version:           20.10.5\n API version:       1.41\n Go version:        go1.13.15\n Git commit:        55c4c88\n Built:             Tue Mar  2 20:33:55 2021\n OS/Arch:           linux/amd64\n Context:           default\n Experimental:      true\n\nServer: Docker Engine - Community\n Engine:\n  Version:          20.10.5\n  API version:      1.41 (minimum version 1.12)\n  Go version:       go1.13.15\n  Git commit:       363e9a8\n  Built:            Tue Mar  2 20:32:17 2021\n  OS/Arch:          linux/amd64\n  Experimental:     false\n containerd:\n  Version:          1.4.4\n  GitCommit:        05f951a3781f4f2c1911b05e61c160e9c30eaa8e\n runc:\n  Version:          1.0.0-rc93\n  GitCommit:        12644e614e25b05da6fd08a38ffa0cfe1903fdec\n docker-init:\n  Version:          0.19.0\n  GitCommit:        de40ad0\n\n```\n\n配置镜像下载加速器：\n\n```shell\ncat > /etc/docker/daemon.json << EOF\n{\n  \"registry-mirrors\": [\"https://b9pmyelo.mirror.aliyuncs.com\"]\n}\nEOF\n\nsystemctl restart docker\ndocker info\n```\n\n### 3.2 添加阿里云YUM软件源\n\n```shell\ncat > /etc/yum.repos.d/kubernetes.repo << EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\n```\n\n### 3.2.1 常用管理命令\n\n```shell\n# 命令格式：docker image COMMAND\n\n# 指令 描述\n# ls\t\t\t//列出镜像\n# build\t\t\t//构建镜像来自Dockerfile\n# history\t\t//查看镜像历史\n# inspect\t\t//显示一个或多个镜像详细信息\n# pull\t\t\t//从镜像仓库拉取镜像\n# push\t\t\t//推送一个镜像到镜像仓库\n# rm\t\t\t//移除一个或多个镜像\n# prune\t\t\t//移除没有被标记或者没有被任何容器引用的镜像\n# tag\t\t\t//创建一个引用源镜像标记目标镜像\n# save\t\t\t//保存一个或多个镜像到一个tar归档文件\n# load\t\t\t//加载镜像来自tar归档或标准输入\n```\n\n> docker save load使用\n\n```shell\n# 将有网络的镜像打包为tar文件 81.57操作\n[root@localhost ~]# docker save nginx -o nginx.tar\n[root@localhost ~]# ls\nanaconda-ks.cfg  nginx.tar\n[root@localhost ~]# du -sh nginx.tar \n131M\tnginx.tar\n\n# 查看tar包内容\n[root@localhost ~]# tar tvf nginx.tar \n-rw-r--r-- 0/0            7731 2021-03-11 08:21 018aec2b4f302b08b4c7274b72bede1fe56ee1f2bcaa06492e3f464e05f1a9a8.json\ndrwxr-xr-x 0/0               0 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/\n-rw-r--r-- 0/0               3 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/VERSION\n-rw-r--r-- 0/0             482 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/json\n-rw-r--r-- 0/0            4096 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/layer.tar\ndrwxr-xr-x 0/0               0 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/\n-rw-r--r-- 0/0               3 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/VERSION\n-rw-r--r-- 0/0            1682 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/json\n-rw-r--r-- 0/0            7168 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/layer.tar\ndrwxr-xr-x 0/0               0 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/\n-rw-r--r-- 0/0               3 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/VERSION\n-rw-r--r-- 0/0             482 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/json\n-rw-r--r-- 0/0            3584 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/layer.tar\ndrwxr-xr-x 0/0               0 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/\n-rw-r--r-- 0/0               3 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/VERSION\n-rw-r--r-- 0/0             482 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/json\n-rw-r--r-- 0/0            3072 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/layer.tar\ndrwxr-xr-x 0/0               0 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/\n-rw-r--r-- 0/0               3 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/VERSION\n-rw-r--r-- 0/0             482 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/json\n-rw-r--r-- 0/0        64807936 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/layer.tar\ndrwxr-xr-x 0/0               0 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/\n-rw-r--r-- 0/0               3 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/VERSION\n-rw-r--r-- 0/0             406 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/json\n-rw-r--r-- 0/0        72491008 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/layer.tar\n-rw-r--r-- 0/0             586 1970-01-01 08:00 manifest.json\n-rw-r--r-- 0/0              88 1970-01-01 08:00 repositories\n\n# 传到没有网络的主机\n[root@localhost ~]# scp nginx.tar 192.168.81.58:/root\n\n# 81.58操作导入tar包到本地镜像\n[root@localhost ~]# docker load -i  nginx.tar \n\n[root@localhost ~]# docker images \nREPOSITORY   TAG       IMAGE ID       CREATED        SIZE\nnginx        latest    018aec2b4f30   26 hours ago   133MB\n\n```\n\n\n\n```shell\n# 启动nginx镜像映射IP\n[root@localhost ~]# docker run -d -p 8080:80 nginx\n38f999f57ffa1c1ab6799eab45323152564a943c00081a3f98838f5ef29fca21\n\n```\n\n\n\n### 3.3 安装kubeadm，kubelet和kubectl\n\n由于版本更新频繁，这里指定版本号部署：\n\n```shell\n# 所有节点操作\nyum install -y kubelet-1.20.0 kubeadm-1.20.0 kubectl-1.20.0\nsystemctl enable kubelet\n```\n\n## 4. 部署Kubernetes Master\n\nhttps://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file \n\nhttps://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node \n\n在192.168.81.57（Master）执行。\n\n```shell\nkubeadm init \\\n  --apiserver-advertise-address=192.168.81.57 \\\n  --image-repository registry.aliyuncs.com/google_containers \\\n  --kubernetes-version v1.20.0 \\\n  --service-cidr=10.96.0.0/12 \\\n  --pod-network-cidr=10.244.0.0/16 \\\n  --ignore-preflight-errors=all\n```\n\n- --apiserver-advertise-address 集群通告地址\n- --image-repository  由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址\n- --kubernetes-version K8s版本，与上面安装的一致\n- --service-cidr 集群内部虚拟网络，Pod统一访问入口\n- --pod-network-cidr Pod网络，，与下面部署的CNI网络组件yaml中保持一致\n\n或者使用配置文件引导：\n\n```shell\nvi kubeadm.conf\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\nkubernetesVersion: v1.20.0\nimageRepository: registry.aliyuncs.com/google_containers \nnetworking:\n  podSubnet: 10.244.0.0/16 \n  serviceSubnet: 10.96.0.0/12 \n\nkubeadm init --config kubeadm.conf --ignore-preflight-errors=all  \n```\n\n\n\n拷贝kubectl使用的连接k8s认证文件到默认路径：\n\n```bash\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n[root@k8s-master ~]# ll .kube/config \n-rw------- 1 root root 5569 3月  12 11:58 .kube/config\n\n```\n\n```shell\nkubectl get nodes\nNAME               STATUS     ROLES            AGE   VERSION\nlocalhost.localdomain   NotReady   control-plane,master   20s   v1.20.0\n```\n\n\n\n## 5. 加入Kubernetes Node\n\n在192.168.81.58/59（Node）执行。\n\n向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：\n\n```sh\nkubeadm join 192.168.81.57:6443 --token tqxl1u.8vwoeza99jxzgoi0 \\\n    --discovery-token-ca-cert-hash sha256:48321ed1651b239cee9dd3b482a24e9deee1e48c7ca3b34cfa429524538275ba \n```\n\n默认token有效期为24小时，当过期之后，该token就不可用了。这时就需要重新创建token，可以直接使用命令快捷生成：\n\n```shell\nkubeadm token create --print-join-command\n```\n\n<https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/>\n\n## 6. 部署容器网络（CNI）\n\nhttps://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network \n\n注意：只需要部署下面其中一个，推荐Calico。\n\nCalico是一个纯三层的数据中心网络方案，Calico支持广泛的平台，包括Kubernetes、OpenStack等。\n\nCalico 在每一个计算节点利用 Linux Kernel 实现了一个高效的虚拟路由器（ vRouter） 来负责数据转发，而每个 vRouter 通过 BGP 协议负责把自己上运行的 workload 的路由信息向整个 Calico 网络内传播。\n\n此外，Calico  项目还实现了 Kubernetes 网络策略，提供ACL功能。\n\n https://docs.projectcalico.org/getting-started/kubernetes/quickstart \n\n```shell\nwget https://docs.projectcalico.org/manifests/calico.yaml\n\n# 修改yaml以下内容 IP地址段与上述init地址段保持一致\n[root@k8s-master ~]# vim calico.yaml\n            - name: CALICO_IPV4POOL_CIDR\n              value: \"10.244.0.0/16\"\n\n```\n\n下载完后还需要修改里面定义Pod网络（CALICO_IPV4POOL_CIDR），与前面kubeadm init指定的一样\n\n修改完后应用清单：\n\n```shell\nkubectl apply -f calico.yaml\nkubectl get pods -n kube-system\n```\n\n## 7. 测试kubernetes集群\n\n- 验证Pod工作\n- 验证Pod网络通信\n- 验证DNS解析\n\n在Kubernetes集群中创建一个pod，验证是否正常运行：\n\n```shell\nkubectl create deployment nginx --image=nginx\nkubectl expose deployment nginx --port=80 --type=NodePort\n[root@k8s-master ~]# kubectl expose deployment web --port=80 --target-port=80 --type=NodePort\n\nkubectl get pod,svc\n\n\n# 查看 master 组件状态\n[root@k8s-master ~]# kubectl get cs\nWarning: v1 ComponentStatus is deprecated in v1.19+\nNAME                 STATUS      MESSAGE                                                                                       ERROR\nscheduler            Unhealthy   Get \"http://127.0.0.1:10251/healthz\": dial tcp 127.0.0.1:10251: connect: connection refused   \ncontroller-manager   Unhealthy   Get \"http://127.0.0.1:10252/healthz\": dial tcp 127.0.0.1:10252: connect: connection refused   \netcd-0               Healthy     {\"health\":\"true\"}  \n\n查看 master 组件不健康，估计版本小bug，不影响使用，如果要修复：\n打开两个文件：\n/etc/kubernetes/manifests/kube-controller-manager.yaml\n/etc/kubernetes/manifests/kube-scheduler.yaml\n#注释掉 --port=0，开启本地非安全端口，然后systemctl restart kubelet\n```\n\n访问地址：http://NodeIP:Port  \n\n## 8. 部署 Dashboard\n\n```shell\nwget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml\n```\n\n默认Dashboard只能集群内部访问，修改Service为NodePort类型，暴露到外部：\n\n```shell\nvi recommended.yaml\n...\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  ports:\n    - port: 443\n      targetPort: 8443\n      nodePort: 30001\n  selector:\n    k8s-app: kubernetes-dashboard\n  type: NodePort\n...\n\nkubectl apply -f recommended.yaml\nkubectl get pods -n kubernetes-dashboard\nNAME                                         READY   STATUS    RESTARTS   AGE\ndashboard-metrics-scraper-6b4884c9d5-gl8nr   1/1     Running   0          13m\nkubernetes-dashboard-7f99b75bf4-89cds        1/1     Running   0          13m$ vi recommended.yaml...kind: ServiceapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  ports:    - port: 443      targetPort: 8443      nodePort: 30001  selector:    k8s-app: kubernetes-dashboard  type: NodePort...$ kubectl apply -f recommended.yaml$ kubectl get pods -n kubernetes-dashboardNAME                                         READY   STATUS    RESTARTS   AGEdashboard-metrics-scraper-6b4884c9d5-gl8nr   1/1     Running   0          13mkubernetes-dashboard-7f99b75bf4-89cds        1/1     Running   0          13m\n```\n\n访问地址：https://NodeIP:30001\n\n创建service account并绑定默认cluster-admin管理员集群角色：\n\n```shell\n# 创建用户\n$ kubectl create serviceaccount dashboard-admin -n kube-system\n# 用户授权\n$ kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin\n# 获取用户Token\n$ kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk '/dashboard-admin/{print $1}')\n```\n\n使用输出的token登录Dashboard。\n\n## 9. 切换容器引擎为Containerd\n\nhttps://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd\n\n1、配置先决条件\n\n```shell\ncat <<EOF | sudo tee /etc/modules-load.d/containerd.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# 设置必需的 sysctl 参数，这些参数在重新启动后仍然存在。\ncat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nEOF\n\n# Apply sysctl params without reboot\nsudo sysctl --system\n```\n\n2、安装containerd\n\n```shell\n# 安装 containerd\n## 设置仓库\n### 安装所需包\nyum install -y yum-utils device-mapper-persistent-data lvm2\n\n# 添加 docker 仓库\nyum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n\n# 添加 contoinerd\nyum update -y && sudo yum install -y containerd.io\n\n# 配置 contoinerd\nmkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# 重启 contoinerd\nsystemctl restart containerd\n```\n\n3、修改配置文件\n\n```shell\nvi /etc/containerd/config.toml\n   [plugins.\"io.containerd.grpc.v1.cri\"]\n      sandbox_image = \"registry.aliyuncs.com/google_containers/pause:3.2\"  \n         ...\t\t\t# 改为国内地址\n         [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n             SystemdCgroup = true\n             ...\t\t# Cgroup驱动\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]\n          endpoint = [\"https://b9pmyelo.mirror.aliyuncs.com\"]\n          # 改为阿里云加速器\n\n```\n\n4、配置kubelet使用containerd\n\n```shell\nvi /etc/sysconfig/kubelet \nKUBELET_EXTRA_ARGS=--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock --cgroup-driver=systemd\n\nsystemctl stop docker\nsystemctl restart kubelet\njournalctl -u kubelet \n```\n\n\n\n5、验证\n\n```shell\nkubectl get node -o wide\n\nk8s-node1  xxx  containerd://1.4.4\n```\n\n\n\n","slug":"kubeadm部署k8s","published":1,"updated":"2021-12-21T02:27:06.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxjvzroo00190gu6gzi53h9c","content":"<p>kubeadm是官方社区推出的一个用于快速部署kubernetes集群的工具。</p>\n<span id=\"more\"></span>\n<p>这个工具能通过两条指令完成一个kubernetes集群的部署：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建一个 Master 节点</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubeadm init</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将一个 Node 节点加入到当前集群中</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubeadm join &lt;Master节点的IP和端口 &gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-安装要求\"><a href=\"#1-安装要求\" class=\"headerlink\" title=\"1. 安装要求\"></a>1. 安装要求</h2><p>在开始之前，部署Kubernetes集群机器需要满足以下几个条件：</p>\n<ul>\n<li>一台或多台机器，操作系统 CentOS7.x-86_x64</li>\n<li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多</li>\n<li>集群中所有机器之间网络互通</li>\n<li>可以访问外网，需要拉取镜像</li>\n<li>禁止swap分区</li>\n</ul>\n<h2 id=\"2-准备环境\"><a href=\"#2-准备环境\" class=\"headerlink\" title=\"2. 准备环境\"></a>2. 准备环境</h2><table>\n<thead>\n<tr>\n<th>角色</th>\n<th>IP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>k8s-master</td>\n<td>192.168.81.57</td>\n</tr>\n<tr>\n<td>k8s-node1</td>\n<td>192.168.81.58</td>\n</tr>\n<tr>\n<td>k8s-node2</td>\n<td>192.168.81.59</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭防火墙：</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭selinux：</span></span><br><span class=\"line\">sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config  # 永久</span><br><span class=\"line\">setenforce 0  # 临时</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭swap：</span></span><br><span class=\"line\">swapoff -a  # 临时</span><br><span class=\"line\">vim /etc/fstab  # 永久</span><br><span class=\"line\">swapoff /dev/mapper/centos-swap</span><br><span class=\"line\">free -h</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置主机名：</span></span><br><span class=\"line\">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在master添加hosts：</span></span><br><span class=\"line\">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class=\"line\">192.168.81.57 k8s-master</span><br><span class=\"line\">192.168.81.58 k8s-node1</span><br><span class=\"line\">192.168.81.59 k8s-node2</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将桥接的IPv4流量传递到iptables的链：</span></span><br><span class=\"line\">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sysctl --system  # 生效</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 时间同步：</span></span><br><span class=\"line\">yum install ntpdate -y</span><br><span class=\"line\">ntpdate time.windows.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-安装Docker-kubeadm-kubelet【所有节点】\"><a href=\"#3-安装Docker-kubeadm-kubelet【所有节点】\" class=\"headerlink\" title=\"3. 安装Docker/kubeadm/kubelet【所有节点】\"></a>3. 安装Docker/kubeadm/kubelet【所有节点】</h2><p>Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p>\n<h3 id=\"3-1-安装Docker\"><a href=\"#3-1-安装Docker\" class=\"headerlink\" title=\"3.1 安装Docker\"></a>3.1 安装Docker</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\">yum -y install docker-ce</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看docker版本</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker version</span></span><br><span class=\"line\">Client: Docker Engine - Community</span><br><span class=\"line\"> Version:           20.10.5</span><br><span class=\"line\"> API version:       1.41</span><br><span class=\"line\"> Go version:        go1.13.15</span><br><span class=\"line\"> Git commit:        55c4c88</span><br><span class=\"line\"> Built:             Tue Mar  2 20:33:55 2021</span><br><span class=\"line\"> OS/Arch:           linux/amd64</span><br><span class=\"line\"> Context:           default</span><br><span class=\"line\"> Experimental:      <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">Server: Docker Engine - Community</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:          20.10.5</span><br><span class=\"line\">  API version:      1.41 (minimum version 1.12)</span><br><span class=\"line\">  Go version:       go1.13.15</span><br><span class=\"line\">  Git commit:       363e9a8</span><br><span class=\"line\">  Built:            Tue Mar  2 20:32:17 2021</span><br><span class=\"line\">  OS/Arch:          linux/amd64</span><br><span class=\"line\">  Experimental:     <span class=\"literal\">false</span></span><br><span class=\"line\"> containerd:</span><br><span class=\"line\">  Version:          1.4.4</span><br><span class=\"line\">  GitCommit:        05f951a3781f4f2c1911b05e61c160e9c30eaa8e</span><br><span class=\"line\"> runc:</span><br><span class=\"line\">  Version:          1.0.0-rc93</span><br><span class=\"line\">  GitCommit:        12644e614e25b05da6fd08a38ffa0cfe1903fdec</span><br><span class=\"line\"> docker-init:</span><br><span class=\"line\">  Version:          0.19.0</span><br><span class=\"line\">  GitCommit:        de40ad0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>配置镜像下载加速器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\">docker info</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-添加阿里云YUM软件源\"><a href=\"#3-2-添加阿里云YUM软件源\" class=\"headerlink\" title=\"3.2 添加阿里云YUM软件源\"></a>3.2 添加阿里云YUM软件源</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">repo_gpgcheck=0</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-1-常用管理命令\"><a href=\"#3-2-1-常用管理命令\" class=\"headerlink\" title=\"3.2.1 常用管理命令\"></a>3.2.1 常用管理命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 命令格式：docker image COMMAND</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 指令 描述</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls\t\t\t//列出镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> build\t\t\t//构建镜像来自Dockerfile</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">history</span>\t\t//查看镜像历史</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> inspect\t\t//显示一个或多个镜像详细信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pull\t\t\t//从镜像仓库拉取镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> push\t\t\t//推送一个镜像到镜像仓库</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rm\t\t\t//移除一个或多个镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> prune\t\t\t//移除没有被标记或者没有被任何容器引用的镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tag\t\t\t//创建一个引用源镜像标记目标镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> save\t\t\t//保存一个或多个镜像到一个tar归档文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> load\t\t\t//加载镜像来自tar归档或标准输入</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>docker save load使用</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将有网络的镜像打包为tar文件 81.57操作</span></span><br><span class=\"line\">[root@localhost ~]# docker save nginx -o nginx.tar</span><br><span class=\"line\">[root@localhost ~]# ls</span><br><span class=\"line\">anaconda-ks.cfg  nginx.tar</span><br><span class=\"line\">[root@localhost ~]# du -sh nginx.tar </span><br><span class=\"line\">131M\tnginx.tar</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看tar包内容</span></span><br><span class=\"line\">[root@localhost ~]# tar tvf nginx.tar </span><br><span class=\"line\">-rw-r--r-- 0/0            7731 2021-03-11 08:21 018aec2b4f302b08b4c7274b72bede1fe56ee1f2bcaa06492e3f464e05f1a9a8.json</span><br><span class=\"line\">drwxr-xr-x 0/0               0 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/</span><br><span class=\"line\">-rw-r--r-- 0/0               3 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/VERSION</span><br><span class=\"line\">-rw-r--r-- 0/0             482 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/json</span><br><span class=\"line\">-rw-r--r-- 0/0            4096 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/layer.tar</span><br><span class=\"line\">drwxr-xr-x 0/0               0 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/</span><br><span class=\"line\">-rw-r--r-- 0/0               3 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/VERSION</span><br><span class=\"line\">-rw-r--r-- 0/0            1682 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/json</span><br><span class=\"line\">-rw-r--r-- 0/0            7168 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/layer.tar</span><br><span class=\"line\">drwxr-xr-x 0/0               0 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/</span><br><span class=\"line\">-rw-r--r-- 0/0               3 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/VERSION</span><br><span class=\"line\">-rw-r--r-- 0/0             482 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/json</span><br><span class=\"line\">-rw-r--r-- 0/0            3584 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/layer.tar</span><br><span class=\"line\">drwxr-xr-x 0/0               0 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/</span><br><span class=\"line\">-rw-r--r-- 0/0               3 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/VERSION</span><br><span class=\"line\">-rw-r--r-- 0/0             482 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/json</span><br><span class=\"line\">-rw-r--r-- 0/0            3072 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/layer.tar</span><br><span class=\"line\">drwxr-xr-x 0/0               0 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/</span><br><span class=\"line\">-rw-r--r-- 0/0               3 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/VERSION</span><br><span class=\"line\">-rw-r--r-- 0/0             482 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/json</span><br><span class=\"line\">-rw-r--r-- 0/0        64807936 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/layer.tar</span><br><span class=\"line\">drwxr-xr-x 0/0               0 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/</span><br><span class=\"line\">-rw-r--r-- 0/0               3 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/VERSION</span><br><span class=\"line\">-rw-r--r-- 0/0             406 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/json</span><br><span class=\"line\">-rw-r--r-- 0/0        72491008 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/layer.tar</span><br><span class=\"line\">-rw-r--r-- 0/0             586 1970-01-01 08:00 manifest.json</span><br><span class=\"line\">-rw-r--r-- 0/0              88 1970-01-01 08:00 repositories</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 传到没有网络的主机</span></span><br><span class=\"line\">[root@localhost ~]# scp nginx.tar 192.168.81.58:/root</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 81.58操作导入tar包到本地镜像</span></span><br><span class=\"line\">[root@localhost ~]# docker load -i  nginx.tar </span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# docker images </span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">nginx        latest    018aec2b4f30   26 hours ago   133MB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动nginx镜像映射IP</span></span><br><span class=\"line\">[root@localhost ~]# docker run -d -p 8080:80 nginx</span><br><span class=\"line\">38f999f57ffa1c1ab6799eab45323152564a943c00081a3f98838f5ef29fca21</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-3-安装kubeadm，kubelet和kubectl\"><a href=\"#3-3-安装kubeadm，kubelet和kubectl\" class=\"headerlink\" title=\"3.3 安装kubeadm，kubelet和kubectl\"></a>3.3 安装kubeadm，kubelet和kubectl</h3><p>由于版本更新频繁，这里指定版本号部署：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 所有节点操作</span></span><br><span class=\"line\">yum install -y kubelet-1.20.0 kubeadm-1.20.0 kubectl-1.20.0</span><br><span class=\"line\">systemctl enable kubelet</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-部署Kubernetes-Master\"><a href=\"#4-部署Kubernetes-Master\" class=\"headerlink\" title=\"4. 部署Kubernetes Master\"></a>4. 部署Kubernetes Master</h2><p><a href=\"https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file\">https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file</a> </p>\n<p><a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node\">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node</a> </p>\n<p>在192.168.81.57（Master）执行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init \\</span><br><span class=\"line\">  --apiserver-advertise-address=192.168.81.57 \\</span><br><span class=\"line\">  --image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">  --kubernetes-version v1.20.0 \\</span><br><span class=\"line\">  --service-cidr=10.96.0.0/12 \\</span><br><span class=\"line\">  --pod-network-cidr=10.244.0.0/16 \\</span><br><span class=\"line\">  --ignore-preflight-errors=all</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–apiserver-advertise-address 集群通告地址</li>\n<li>–image-repository  由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址</li>\n<li>–kubernetes-version K8s版本，与上面安装的一致</li>\n<li>–service-cidr 集群内部虚拟网络，Pod统一访问入口</li>\n<li>–pod-network-cidr Pod网络，，与下面部署的CNI网络组件yaml中保持一致</li>\n</ul>\n<p>或者使用配置文件引导：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi kubeadm.conf</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: v1.20.0</span><br><span class=\"line\">imageRepository: registry.aliyuncs.com/google_containers </span><br><span class=\"line\">networking:</span><br><span class=\"line\">  podSubnet: 10.244.0.0/16 </span><br><span class=\"line\">  serviceSubnet: 10.96.0.0/12 </span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm init --config kubeadm.conf --ignore-preflight-errors=all  </span><br></pre></td></tr></table></figure>\n\n\n\n<p>拷贝kubectl使用的连接k8s认证文件到默认路径：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># ll .kube/config </span></span><br><span class=\"line\">-rw------- 1 root root 5569 3月  12 11:58 .kube/config</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get nodes</span><br><span class=\"line\">NAME               STATUS     ROLES            AGE   VERSION</span><br><span class=\"line\">localhost.localdomain   NotReady   control-plane,master   20s   v1.20.0</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-加入Kubernetes-Node\"><a href=\"#5-加入Kubernetes-Node\" class=\"headerlink\" title=\"5. 加入Kubernetes Node\"></a>5. 加入Kubernetes Node</h2><p>在192.168.81.58/59（Node）执行。</p>\n<p>向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 192.168.81.57:6443 --token tqxl1u.8vwoeza99jxzgoi0 \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:48321ed1651b239cee9dd3b482a24e9deee1e48c7ca3b34cfa429524538275ba </span><br></pre></td></tr></table></figure>\n\n<p>默认token有效期为24小时，当过期之后，该token就不可用了。这时就需要重新创建token，可以直接使用命令快捷生成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/\">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/</a></p>\n<h2 id=\"6-部署容器网络（CNI）\"><a href=\"#6-部署容器网络（CNI）\" class=\"headerlink\" title=\"6. 部署容器网络（CNI）\"></a>6. 部署容器网络（CNI）</h2><p><a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network\">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network</a> </p>\n<p>注意：只需要部署下面其中一个，推荐Calico。</p>\n<p>Calico是一个纯三层的数据中心网络方案，Calico支持广泛的平台，包括Kubernetes、OpenStack等。</p>\n<p>Calico 在每一个计算节点利用 Linux Kernel 实现了一个高效的虚拟路由器（ vRouter） 来负责数据转发，而每个 vRouter 通过 BGP 协议负责把自己上运行的 workload 的路由信息向整个 Calico 网络内传播。</p>\n<p>此外，Calico  项目还实现了 Kubernetes 网络策略，提供ACL功能。</p>\n<p> <a href=\"https://docs.projectcalico.org/getting-started/kubernetes/quickstart\">https://docs.projectcalico.org/getting-started/kubernetes/quickstart</a> </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://docs.projectcalico.org/manifests/calico.yaml</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改yaml以下内容 IP地址段与上述init地址段保持一致</span></span><br><span class=\"line\">[root@k8s-master ~]# vim calico.yaml</span><br><span class=\"line\">            - name: CALICO_IPV4POOL_CIDR</span><br><span class=\"line\">              value: &quot;10.244.0.0/16&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>下载完后还需要修改里面定义Pod网络（CALICO_IPV4POOL_CIDR），与前面kubeadm init指定的一样</p>\n<p>修改完后应用清单：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f calico.yaml</span><br><span class=\"line\">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-测试kubernetes集群\"><a href=\"#7-测试kubernetes集群\" class=\"headerlink\" title=\"7. 测试kubernetes集群\"></a>7. 测试kubernetes集群</h2><ul>\n<li>验证Pod工作</li>\n<li>验证Pod网络通信</li>\n<li>验证DNS解析</li>\n</ul>\n<p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create deployment nginx --image=nginx</span><br><span class=\"line\">kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class=\"line\">[root@k8s-master ~]# kubectl expose deployment web --port=80 --target-port=80 --type=NodePort</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pod,svc</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 master 组件状态</span></span><br><span class=\"line\">[root@k8s-master ~]# kubectl get cs</span><br><span class=\"line\">Warning: v1 ComponentStatus is deprecated in v1.19+</span><br><span class=\"line\">NAME                 STATUS      MESSAGE                                                                                       ERROR</span><br><span class=\"line\">scheduler            Unhealthy   Get &quot;http://127.0.0.1:10251/healthz&quot;: dial tcp 127.0.0.1:10251: connect: connection refused   </span><br><span class=\"line\">controller-manager   Unhealthy   Get &quot;http://127.0.0.1:10252/healthz&quot;: dial tcp 127.0.0.1:10252: connect: connection refused   </span><br><span class=\"line\">etcd-0               Healthy     &#123;&quot;health&quot;:&quot;true&quot;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">查看 master 组件不健康，估计版本小bug，不影响使用，如果要修复：</span><br><span class=\"line\">打开两个文件：</span><br><span class=\"line\">/etc/kubernetes/manifests/kube-controller-manager.yaml</span><br><span class=\"line\">/etc/kubernetes/manifests/kube-scheduler.yaml</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注释掉 --port=0，开启本地非安全端口，然后systemctl restart kubelet</span></span><br></pre></td></tr></table></figure>\n\n<p>访问地址：<a href=\"http://NodeIP:Port\">http://NodeIP:Port</a>  </p>\n<h2 id=\"8-部署-Dashboard\"><a href=\"#8-部署-Dashboard\" class=\"headerlink\" title=\"8. 部署 Dashboard\"></a>8. 部署 Dashboard</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>\n\n<p>默认Dashboard只能集群内部访问，修改Service为NodePort类型，暴露到外部：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi recommended.yaml</span><br><span class=\"line\">...</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\">  name: kubernetes-dashboard</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: 443</span><br><span class=\"line\">      targetPort: 8443</span><br><span class=\"line\">      nodePort: 30001</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f recommended.yaml</span><br><span class=\"line\">kubectl get pods -n kubernetes-dashboard</span><br><span class=\"line\">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">dashboard-metrics-scraper-6b4884c9d5-gl8nr   1/1     Running   0          13m</span><br><span class=\"line\">kubernetes-dashboard-7f99b75bf4-89cds        1/1     Running   0          13m$ vi recommended.yaml...kind: ServiceapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  ports:    - port: 443      targetPort: 8443      nodePort: 30001  selector:    k8s-app: kubernetes-dashboard  type: NodePort...$ kubectl apply -f recommended.yaml$ kubectl get pods -n kubernetes-dashboardNAME                                         READY   STATUS    RESTARTS   AGEdashboard-metrics-scraper-6b4884c9d5-gl8nr   1/1     Running   0          13mkubernetes-dashboard-7f99b75bf4-89cds        1/1     Running   0          13m</span><br></pre></td></tr></table></figure>\n\n<p>访问地址：<a href=\"https://nodeip:30001/\">https://NodeIP:30001</a></p>\n<p>创建service account并绑定默认cluster-admin管理员集群角色：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建用户</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl create serviceaccount dashboard-admin -n kube-system</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用户授权</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取用户Token</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk <span class=\"string\">&#x27;/dashboard-admin/&#123;print $1&#125;&#x27;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p>使用输出的token登录Dashboard。</p>\n<h2 id=\"9-切换容器引擎为Containerd\"><a href=\"#9-切换容器引擎为Containerd\" class=\"headerlink\" title=\"9. 切换容器引擎为Containerd\"></a>9. 切换容器引擎为Containerd</h2><p><a href=\"https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd\">https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd</a></p>\n<p>1、配置先决条件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/containerd.conf</span><br><span class=\"line\">overlay</span><br><span class=\"line\">br_netfilter</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo modprobe overlay</span><br><span class=\"line\">sudo modprobe br_netfilter</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置必需的 sysctl 参数，这些参数在重新启动后仍然存在。</span></span><br><span class=\"line\">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class=\"line\">net.ipv4.ip_forward                 = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Apply sysctl params without reboot</span></span><br><span class=\"line\">sudo sysctl --system</span><br></pre></td></tr></table></figure>\n\n<p>2、安装containerd</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装 containerd</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 设置仓库</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## 安装所需包</span></span></span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加 docker 仓库</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加 contoinerd</span></span><br><span class=\"line\">yum update -y &amp;&amp; sudo yum install -y containerd.io</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置 contoinerd</span></span><br><span class=\"line\">mkdir -p /etc/containerd</span><br><span class=\"line\">containerd config default | sudo tee /etc/containerd/config.toml</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启 contoinerd</span></span><br><span class=\"line\">systemctl restart containerd</span><br></pre></td></tr></table></figure>\n\n<p>3、修改配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/containerd/config.toml</span><br><span class=\"line\">   [plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span><br><span class=\"line\">      sandbox_image = &quot;registry.aliyuncs.com/google_containers/pause:3.2&quot;  </span><br><span class=\"line\">         ...\t\t\t# 改为国内地址</span><br><span class=\"line\">         [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</span><br><span class=\"line\">             SystemdCgroup = true</span><br><span class=\"line\">             ...\t\t# Cgroup驱动</span><br><span class=\"line\">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]</span><br><span class=\"line\">          endpoint = [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">          # 改为阿里云加速器</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>4、配置kubelet使用containerd</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/kubelet </span><br><span class=\"line\">KUBELET_EXTRA_ARGS=--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock --cgroup-driver=systemd</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\">systemctl restart kubelet</span><br><span class=\"line\">journalctl -u kubelet </span><br></pre></td></tr></table></figure>\n\n\n\n<p>5、验证</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get node -o wide</span><br><span class=\"line\"></span><br><span class=\"line\">k8s-node1  xxx  containerd://1.4.4</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"post-body-end":"<div>\n    \n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    \n</div>\n","styles":"body {\n  background: url(\"/images/06.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.site-brand-container {\n  background: linear-gradient(200deg, #f58220, #f58220);\n}\n.main-inner {\n  background: #fff;\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n","variables":""}},"length":12678,"excerpt":"<p>kubeadm是官方社区推出的一个用于快速部署kubernetes集群的工具。</p>","more":"<p>这个工具能通过两条指令完成一个kubernetes集群的部署：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建一个 Master 节点</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubeadm init</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将一个 Node 节点加入到当前集群中</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubeadm join &lt;Master节点的IP和端口 &gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-安装要求\"><a href=\"#1-安装要求\" class=\"headerlink\" title=\"1. 安装要求\"></a>1. 安装要求</h2><p>在开始之前，部署Kubernetes集群机器需要满足以下几个条件：</p>\n<ul>\n<li>一台或多台机器，操作系统 CentOS7.x-86_x64</li>\n<li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多</li>\n<li>集群中所有机器之间网络互通</li>\n<li>可以访问外网，需要拉取镜像</li>\n<li>禁止swap分区</li>\n</ul>\n<h2 id=\"2-准备环境\"><a href=\"#2-准备环境\" class=\"headerlink\" title=\"2. 准备环境\"></a>2. 准备环境</h2><table>\n<thead>\n<tr>\n<th>角色</th>\n<th>IP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>k8s-master</td>\n<td>192.168.81.57</td>\n</tr>\n<tr>\n<td>k8s-node1</td>\n<td>192.168.81.58</td>\n</tr>\n<tr>\n<td>k8s-node2</td>\n<td>192.168.81.59</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭防火墙：</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭selinux：</span></span><br><span class=\"line\">sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config  # 永久</span><br><span class=\"line\">setenforce 0  # 临时</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭swap：</span></span><br><span class=\"line\">swapoff -a  # 临时</span><br><span class=\"line\">vim /etc/fstab  # 永久</span><br><span class=\"line\">swapoff /dev/mapper/centos-swap</span><br><span class=\"line\">free -h</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置主机名：</span></span><br><span class=\"line\">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在master添加hosts：</span></span><br><span class=\"line\">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class=\"line\">192.168.81.57 k8s-master</span><br><span class=\"line\">192.168.81.58 k8s-node1</span><br><span class=\"line\">192.168.81.59 k8s-node2</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将桥接的IPv4流量传递到iptables的链：</span></span><br><span class=\"line\">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sysctl --system  # 生效</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 时间同步：</span></span><br><span class=\"line\">yum install ntpdate -y</span><br><span class=\"line\">ntpdate time.windows.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-安装Docker-kubeadm-kubelet【所有节点】\"><a href=\"#3-安装Docker-kubeadm-kubelet【所有节点】\" class=\"headerlink\" title=\"3. 安装Docker/kubeadm/kubelet【所有节点】\"></a>3. 安装Docker/kubeadm/kubelet【所有节点】</h2><p>Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p>\n<h3 id=\"3-1-安装Docker\"><a href=\"#3-1-安装Docker\" class=\"headerlink\" title=\"3.1 安装Docker\"></a>3.1 安装Docker</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\">yum -y install docker-ce</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看docker版本</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker version</span></span><br><span class=\"line\">Client: Docker Engine - Community</span><br><span class=\"line\"> Version:           20.10.5</span><br><span class=\"line\"> API version:       1.41</span><br><span class=\"line\"> Go version:        go1.13.15</span><br><span class=\"line\"> Git commit:        55c4c88</span><br><span class=\"line\"> Built:             Tue Mar  2 20:33:55 2021</span><br><span class=\"line\"> OS/Arch:           linux/amd64</span><br><span class=\"line\"> Context:           default</span><br><span class=\"line\"> Experimental:      <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">Server: Docker Engine - Community</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:          20.10.5</span><br><span class=\"line\">  API version:      1.41 (minimum version 1.12)</span><br><span class=\"line\">  Go version:       go1.13.15</span><br><span class=\"line\">  Git commit:       363e9a8</span><br><span class=\"line\">  Built:            Tue Mar  2 20:32:17 2021</span><br><span class=\"line\">  OS/Arch:          linux/amd64</span><br><span class=\"line\">  Experimental:     <span class=\"literal\">false</span></span><br><span class=\"line\"> containerd:</span><br><span class=\"line\">  Version:          1.4.4</span><br><span class=\"line\">  GitCommit:        05f951a3781f4f2c1911b05e61c160e9c30eaa8e</span><br><span class=\"line\"> runc:</span><br><span class=\"line\">  Version:          1.0.0-rc93</span><br><span class=\"line\">  GitCommit:        12644e614e25b05da6fd08a38ffa0cfe1903fdec</span><br><span class=\"line\"> docker-init:</span><br><span class=\"line\">  Version:          0.19.0</span><br><span class=\"line\">  GitCommit:        de40ad0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>配置镜像下载加速器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\">docker info</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-添加阿里云YUM软件源\"><a href=\"#3-2-添加阿里云YUM软件源\" class=\"headerlink\" title=\"3.2 添加阿里云YUM软件源\"></a>3.2 添加阿里云YUM软件源</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">repo_gpgcheck=0</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-1-常用管理命令\"><a href=\"#3-2-1-常用管理命令\" class=\"headerlink\" title=\"3.2.1 常用管理命令\"></a>3.2.1 常用管理命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 命令格式：docker image COMMAND</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 指令 描述</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls\t\t\t//列出镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> build\t\t\t//构建镜像来自Dockerfile</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">history</span>\t\t//查看镜像历史</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> inspect\t\t//显示一个或多个镜像详细信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pull\t\t\t//从镜像仓库拉取镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> push\t\t\t//推送一个镜像到镜像仓库</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rm\t\t\t//移除一个或多个镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> prune\t\t\t//移除没有被标记或者没有被任何容器引用的镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tag\t\t\t//创建一个引用源镜像标记目标镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> save\t\t\t//保存一个或多个镜像到一个tar归档文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> load\t\t\t//加载镜像来自tar归档或标准输入</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>docker save load使用</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将有网络的镜像打包为tar文件 81.57操作</span></span><br><span class=\"line\">[root@localhost ~]# docker save nginx -o nginx.tar</span><br><span class=\"line\">[root@localhost ~]# ls</span><br><span class=\"line\">anaconda-ks.cfg  nginx.tar</span><br><span class=\"line\">[root@localhost ~]# du -sh nginx.tar </span><br><span class=\"line\">131M\tnginx.tar</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看tar包内容</span></span><br><span class=\"line\">[root@localhost ~]# tar tvf nginx.tar </span><br><span class=\"line\">-rw-r--r-- 0/0            7731 2021-03-11 08:21 018aec2b4f302b08b4c7274b72bede1fe56ee1f2bcaa06492e3f464e05f1a9a8.json</span><br><span class=\"line\">drwxr-xr-x 0/0               0 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/</span><br><span class=\"line\">-rw-r--r-- 0/0               3 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/VERSION</span><br><span class=\"line\">-rw-r--r-- 0/0             482 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/json</span><br><span class=\"line\">-rw-r--r-- 0/0            4096 2021-03-11 08:21 1f1a90348f908c579d0340f4bac7680918de1fa2f4c4fd2c2145a663d6178064/layer.tar</span><br><span class=\"line\">drwxr-xr-x 0/0               0 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/</span><br><span class=\"line\">-rw-r--r-- 0/0               3 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/VERSION</span><br><span class=\"line\">-rw-r--r-- 0/0            1682 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/json</span><br><span class=\"line\">-rw-r--r-- 0/0            7168 2021-03-11 08:21 3ed7719d733be9ef3895d3b6435ba67c07087b06aaef54a4d63ea59ca1ca5c32/layer.tar</span><br><span class=\"line\">drwxr-xr-x 0/0               0 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/</span><br><span class=\"line\">-rw-r--r-- 0/0               3 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/VERSION</span><br><span class=\"line\">-rw-r--r-- 0/0             482 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/json</span><br><span class=\"line\">-rw-r--r-- 0/0            3584 2021-03-11 08:21 4fc81aabdfa5c3ae98c390eccf8414520a26d6c3aa8974d5fccccf61d889aa04/layer.tar</span><br><span class=\"line\">drwxr-xr-x 0/0               0 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/</span><br><span class=\"line\">-rw-r--r-- 0/0               3 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/VERSION</span><br><span class=\"line\">-rw-r--r-- 0/0             482 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/json</span><br><span class=\"line\">-rw-r--r-- 0/0            3072 2021-03-11 08:21 7822202c2b2274fafc6cf0d948baca257fe26ccb6858084a19ec635e81b210f3/layer.tar</span><br><span class=\"line\">drwxr-xr-x 0/0               0 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/</span><br><span class=\"line\">-rw-r--r-- 0/0               3 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/VERSION</span><br><span class=\"line\">-rw-r--r-- 0/0             482 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/json</span><br><span class=\"line\">-rw-r--r-- 0/0        64807936 2021-03-11 08:21 8b9e24c9de24a93a1a2da83ab6830ba2ac2914fb5c3af42bc3a8c198640e1299/layer.tar</span><br><span class=\"line\">drwxr-xr-x 0/0               0 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/</span><br><span class=\"line\">-rw-r--r-- 0/0               3 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/VERSION</span><br><span class=\"line\">-rw-r--r-- 0/0             406 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/json</span><br><span class=\"line\">-rw-r--r-- 0/0        72491008 2021-03-11 08:21 e86c0242e63168af8ce7e8640b4f884c500a003fed9ccfedd98f682c5026daf4/layer.tar</span><br><span class=\"line\">-rw-r--r-- 0/0             586 1970-01-01 08:00 manifest.json</span><br><span class=\"line\">-rw-r--r-- 0/0              88 1970-01-01 08:00 repositories</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 传到没有网络的主机</span></span><br><span class=\"line\">[root@localhost ~]# scp nginx.tar 192.168.81.58:/root</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 81.58操作导入tar包到本地镜像</span></span><br><span class=\"line\">[root@localhost ~]# docker load -i  nginx.tar </span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# docker images </span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">nginx        latest    018aec2b4f30   26 hours ago   133MB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动nginx镜像映射IP</span></span><br><span class=\"line\">[root@localhost ~]# docker run -d -p 8080:80 nginx</span><br><span class=\"line\">38f999f57ffa1c1ab6799eab45323152564a943c00081a3f98838f5ef29fca21</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-3-安装kubeadm，kubelet和kubectl\"><a href=\"#3-3-安装kubeadm，kubelet和kubectl\" class=\"headerlink\" title=\"3.3 安装kubeadm，kubelet和kubectl\"></a>3.3 安装kubeadm，kubelet和kubectl</h3><p>由于版本更新频繁，这里指定版本号部署：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 所有节点操作</span></span><br><span class=\"line\">yum install -y kubelet-1.20.0 kubeadm-1.20.0 kubectl-1.20.0</span><br><span class=\"line\">systemctl enable kubelet</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-部署Kubernetes-Master\"><a href=\"#4-部署Kubernetes-Master\" class=\"headerlink\" title=\"4. 部署Kubernetes Master\"></a>4. 部署Kubernetes Master</h2><p><a href=\"https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file\">https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file</a> </p>\n<p><a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node\">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node</a> </p>\n<p>在192.168.81.57（Master）执行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init \\</span><br><span class=\"line\">  --apiserver-advertise-address=192.168.81.57 \\</span><br><span class=\"line\">  --image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">  --kubernetes-version v1.20.0 \\</span><br><span class=\"line\">  --service-cidr=10.96.0.0/12 \\</span><br><span class=\"line\">  --pod-network-cidr=10.244.0.0/16 \\</span><br><span class=\"line\">  --ignore-preflight-errors=all</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–apiserver-advertise-address 集群通告地址</li>\n<li>–image-repository  由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址</li>\n<li>–kubernetes-version K8s版本，与上面安装的一致</li>\n<li>–service-cidr 集群内部虚拟网络，Pod统一访问入口</li>\n<li>–pod-network-cidr Pod网络，，与下面部署的CNI网络组件yaml中保持一致</li>\n</ul>\n<p>或者使用配置文件引导：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi kubeadm.conf</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: v1.20.0</span><br><span class=\"line\">imageRepository: registry.aliyuncs.com/google_containers </span><br><span class=\"line\">networking:</span><br><span class=\"line\">  podSubnet: 10.244.0.0/16 </span><br><span class=\"line\">  serviceSubnet: 10.96.0.0/12 </span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm init --config kubeadm.conf --ignore-preflight-errors=all  </span><br></pre></td></tr></table></figure>\n\n\n\n<p>拷贝kubectl使用的连接k8s认证文件到默认路径：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># ll .kube/config </span></span><br><span class=\"line\">-rw------- 1 root root 5569 3月  12 11:58 .kube/config</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get nodes</span><br><span class=\"line\">NAME               STATUS     ROLES            AGE   VERSION</span><br><span class=\"line\">localhost.localdomain   NotReady   control-plane,master   20s   v1.20.0</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-加入Kubernetes-Node\"><a href=\"#5-加入Kubernetes-Node\" class=\"headerlink\" title=\"5. 加入Kubernetes Node\"></a>5. 加入Kubernetes Node</h2><p>在192.168.81.58/59（Node）执行。</p>\n<p>向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 192.168.81.57:6443 --token tqxl1u.8vwoeza99jxzgoi0 \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:48321ed1651b239cee9dd3b482a24e9deee1e48c7ca3b34cfa429524538275ba </span><br></pre></td></tr></table></figure>\n\n<p>默认token有效期为24小时，当过期之后，该token就不可用了。这时就需要重新创建token，可以直接使用命令快捷生成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/\">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/</a></p>\n<h2 id=\"6-部署容器网络（CNI）\"><a href=\"#6-部署容器网络（CNI）\" class=\"headerlink\" title=\"6. 部署容器网络（CNI）\"></a>6. 部署容器网络（CNI）</h2><p><a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network\">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network</a> </p>\n<p>注意：只需要部署下面其中一个，推荐Calico。</p>\n<p>Calico是一个纯三层的数据中心网络方案，Calico支持广泛的平台，包括Kubernetes、OpenStack等。</p>\n<p>Calico 在每一个计算节点利用 Linux Kernel 实现了一个高效的虚拟路由器（ vRouter） 来负责数据转发，而每个 vRouter 通过 BGP 协议负责把自己上运行的 workload 的路由信息向整个 Calico 网络内传播。</p>\n<p>此外，Calico  项目还实现了 Kubernetes 网络策略，提供ACL功能。</p>\n<p> <a href=\"https://docs.projectcalico.org/getting-started/kubernetes/quickstart\">https://docs.projectcalico.org/getting-started/kubernetes/quickstart</a> </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://docs.projectcalico.org/manifests/calico.yaml</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改yaml以下内容 IP地址段与上述init地址段保持一致</span></span><br><span class=\"line\">[root@k8s-master ~]# vim calico.yaml</span><br><span class=\"line\">            - name: CALICO_IPV4POOL_CIDR</span><br><span class=\"line\">              value: &quot;10.244.0.0/16&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>下载完后还需要修改里面定义Pod网络（CALICO_IPV4POOL_CIDR），与前面kubeadm init指定的一样</p>\n<p>修改完后应用清单：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f calico.yaml</span><br><span class=\"line\">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-测试kubernetes集群\"><a href=\"#7-测试kubernetes集群\" class=\"headerlink\" title=\"7. 测试kubernetes集群\"></a>7. 测试kubernetes集群</h2><ul>\n<li>验证Pod工作</li>\n<li>验证Pod网络通信</li>\n<li>验证DNS解析</li>\n</ul>\n<p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create deployment nginx --image=nginx</span><br><span class=\"line\">kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class=\"line\">[root@k8s-master ~]# kubectl expose deployment web --port=80 --target-port=80 --type=NodePort</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pod,svc</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 master 组件状态</span></span><br><span class=\"line\">[root@k8s-master ~]# kubectl get cs</span><br><span class=\"line\">Warning: v1 ComponentStatus is deprecated in v1.19+</span><br><span class=\"line\">NAME                 STATUS      MESSAGE                                                                                       ERROR</span><br><span class=\"line\">scheduler            Unhealthy   Get &quot;http://127.0.0.1:10251/healthz&quot;: dial tcp 127.0.0.1:10251: connect: connection refused   </span><br><span class=\"line\">controller-manager   Unhealthy   Get &quot;http://127.0.0.1:10252/healthz&quot;: dial tcp 127.0.0.1:10252: connect: connection refused   </span><br><span class=\"line\">etcd-0               Healthy     &#123;&quot;health&quot;:&quot;true&quot;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">查看 master 组件不健康，估计版本小bug，不影响使用，如果要修复：</span><br><span class=\"line\">打开两个文件：</span><br><span class=\"line\">/etc/kubernetes/manifests/kube-controller-manager.yaml</span><br><span class=\"line\">/etc/kubernetes/manifests/kube-scheduler.yaml</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注释掉 --port=0，开启本地非安全端口，然后systemctl restart kubelet</span></span><br></pre></td></tr></table></figure>\n\n<p>访问地址：<a href=\"http://NodeIP:Port\">http://NodeIP:Port</a>  </p>\n<h2 id=\"8-部署-Dashboard\"><a href=\"#8-部署-Dashboard\" class=\"headerlink\" title=\"8. 部署 Dashboard\"></a>8. 部署 Dashboard</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>\n\n<p>默认Dashboard只能集群内部访问，修改Service为NodePort类型，暴露到外部：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi recommended.yaml</span><br><span class=\"line\">...</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\">  name: kubernetes-dashboard</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: 443</span><br><span class=\"line\">      targetPort: 8443</span><br><span class=\"line\">      nodePort: 30001</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f recommended.yaml</span><br><span class=\"line\">kubectl get pods -n kubernetes-dashboard</span><br><span class=\"line\">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">dashboard-metrics-scraper-6b4884c9d5-gl8nr   1/1     Running   0          13m</span><br><span class=\"line\">kubernetes-dashboard-7f99b75bf4-89cds        1/1     Running   0          13m$ vi recommended.yaml...kind: ServiceapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  ports:    - port: 443      targetPort: 8443      nodePort: 30001  selector:    k8s-app: kubernetes-dashboard  type: NodePort...$ kubectl apply -f recommended.yaml$ kubectl get pods -n kubernetes-dashboardNAME                                         READY   STATUS    RESTARTS   AGEdashboard-metrics-scraper-6b4884c9d5-gl8nr   1/1     Running   0          13mkubernetes-dashboard-7f99b75bf4-89cds        1/1     Running   0          13m</span><br></pre></td></tr></table></figure>\n\n<p>访问地址：<a href=\"https://nodeip:30001/\">https://NodeIP:30001</a></p>\n<p>创建service account并绑定默认cluster-admin管理员集群角色：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建用户</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl create serviceaccount dashboard-admin -n kube-system</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用户授权</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取用户Token</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk <span class=\"string\">&#x27;/dashboard-admin/&#123;print $1&#125;&#x27;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p>使用输出的token登录Dashboard。</p>\n<h2 id=\"9-切换容器引擎为Containerd\"><a href=\"#9-切换容器引擎为Containerd\" class=\"headerlink\" title=\"9. 切换容器引擎为Containerd\"></a>9. 切换容器引擎为Containerd</h2><p><a href=\"https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd\">https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd</a></p>\n<p>1、配置先决条件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/containerd.conf</span><br><span class=\"line\">overlay</span><br><span class=\"line\">br_netfilter</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo modprobe overlay</span><br><span class=\"line\">sudo modprobe br_netfilter</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置必需的 sysctl 参数，这些参数在重新启动后仍然存在。</span></span><br><span class=\"line\">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class=\"line\">net.ipv4.ip_forward                 = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Apply sysctl params without reboot</span></span><br><span class=\"line\">sudo sysctl --system</span><br></pre></td></tr></table></figure>\n\n<p>2、安装containerd</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装 containerd</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 设置仓库</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## 安装所需包</span></span></span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加 docker 仓库</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加 contoinerd</span></span><br><span class=\"line\">yum update -y &amp;&amp; sudo yum install -y containerd.io</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置 contoinerd</span></span><br><span class=\"line\">mkdir -p /etc/containerd</span><br><span class=\"line\">containerd config default | sudo tee /etc/containerd/config.toml</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启 contoinerd</span></span><br><span class=\"line\">systemctl restart containerd</span><br></pre></td></tr></table></figure>\n\n<p>3、修改配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/containerd/config.toml</span><br><span class=\"line\">   [plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span><br><span class=\"line\">      sandbox_image = &quot;registry.aliyuncs.com/google_containers/pause:3.2&quot;  </span><br><span class=\"line\">         ...\t\t\t# 改为国内地址</span><br><span class=\"line\">         [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</span><br><span class=\"line\">             SystemdCgroup = true</span><br><span class=\"line\">             ...\t\t# Cgroup驱动</span><br><span class=\"line\">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]</span><br><span class=\"line\">          endpoint = [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">          # 改为阿里云加速器</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>4、配置kubelet使用containerd</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/kubelet </span><br><span class=\"line\">KUBELET_EXTRA_ARGS=--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock --cgroup-driver=systemd</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\">systemctl restart kubelet</span><br><span class=\"line\">journalctl -u kubelet </span><br></pre></td></tr></table></figure>\n\n\n\n<p>5、验证</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get node -o wide</span><br><span class=\"line\"></span><br><span class=\"line\">k8s-node1  xxx  containerd://1.4.4</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxjvzrn000010gu62cmm7lqz","category_id":"ckxjvzrn800040gu61mbdflp2","_id":"ckxjvzrni000g0gu64vxics7y"},{"post_id":"ckxjvzrn400030gu6eqzb74gl","category_id":"ckxjvzrn800040gu61mbdflp2","_id":"ckxjvzrnl000k0gu67efm5fqe"},{"post_id":"ckxjvzrnb00070gu611nqbsgh","category_id":"ckxjvzrni000f0gu6gm9parhe","_id":"ckxjvzrnn000o0gu62atwhn4u"},{"post_id":"ckxjvzrne00090gu6heurd8yu","category_id":"ckxjvzrni000f0gu6gm9parhe","_id":"ckxjvzrno000r0gu6fgwi6c6a"},{"post_id":"ckxjvzrng000d0gu66r0tfzfc","category_id":"ckxjvzrnn000n0gu64qpict9i","_id":"ckxjvzrnp000w0gu682ycglzf"},{"post_id":"ckxjvzrnh000e0gu6ht3076zh","category_id":"ckxjvzrno000t0gu6f3hzg2a7","_id":"ckxjvzrnq00100gu6566a76ns"},{"post_id":"ckxjvzrnj000j0gu66c395z5o","category_id":"ckxjvzrno000t0gu6f3hzg2a7","_id":"ckxjvzrnr00130gu6d93n78mc"},{"post_id":"ckxjvzrok00160gu62hsx06wl","category_id":"ckxjvzrno000t0gu6f3hzg2a7","_id":"ckxjvzrop001b0gu6cpc67vy1"},{"post_id":"ckxjvzrom00170gu68rggcjex","category_id":"ckxjvzrno000t0gu6f3hzg2a7","_id":"ckxjvzroq001d0gu6du7wdyy8"},{"post_id":"ckxjvzroo00190gu6gzi53h9c","category_id":"ckxjvzrno000t0gu6f3hzg2a7","_id":"ckxjvzroq001e0gu659sf9cjw"}],"PostTag":[{"post_id":"ckxjvzrn000010gu62cmm7lqz","tag_id":"ckxjvzrna00050gu6276zb2ju","_id":"ckxjvzrng000c0gu6413ufrm3"},{"post_id":"ckxjvzrn400030gu6eqzb74gl","tag_id":"ckxjvzrna00050gu6276zb2ju","_id":"ckxjvzrnj000i0gu63fr36mkp"},{"post_id":"ckxjvzrnb00070gu611nqbsgh","tag_id":"ckxjvzrni000h0gu6dj4nddsy","_id":"ckxjvzrno000q0gu64qs233w4"},{"post_id":"ckxjvzrnb00070gu611nqbsgh","tag_id":"ckxjvzrnm000m0gu69rgzaa2d","_id":"ckxjvzrno000s0gu65671dfev"},{"post_id":"ckxjvzrne00090gu6heurd8yu","tag_id":"ckxjvzrni000h0gu6dj4nddsy","_id":"ckxjvzrnp000v0gu62sbp9xb1"},{"post_id":"ckxjvzrng000d0gu66r0tfzfc","tag_id":"ckxjvzrno000u0gu6ez620dp5","_id":"ckxjvzrnq000z0gu6g3gwdygf"},{"post_id":"ckxjvzrnh000e0gu6ht3076zh","tag_id":"ckxjvzrnp000y0gu63e422zkj","_id":"ckxjvzrnr00120gu62ew27p57"},{"post_id":"ckxjvzrnj000j0gu66c395z5o","tag_id":"ckxjvzrni000h0gu6dj4nddsy","_id":"ckxjvzrnr00140gu635e010ao"},{"post_id":"ckxjvzrnj000j0gu66c395z5o","tag_id":"ckxjvzrnp000y0gu63e422zkj","_id":"ckxjvzrnr00150gu6dm7j7ome"},{"post_id":"ckxjvzrok00160gu62hsx06wl","tag_id":"ckxjvzrnp000y0gu63e422zkj","_id":"ckxjvzron00180gu625zlfkil"},{"post_id":"ckxjvzrom00170gu68rggcjex","tag_id":"ckxjvzrnp000y0gu63e422zkj","_id":"ckxjvzrop001a0gu60okn458i"},{"post_id":"ckxjvzroo00190gu6gzi53h9c","tag_id":"ckxjvzrnp000y0gu63e422zkj","_id":"ckxjvzroq001c0gu615xjhsgz"}],"Tag":[{"name":"NEXT","_id":"ckxjvzrna00050gu6276zb2ju"},{"name":"Linux","_id":"ckxjvzrni000h0gu6dj4nddsy"},{"name":"activemq","_id":"ckxjvzrnm000m0gu69rgzaa2d"},{"name":"hexo","_id":"ckxjvzrno000u0gu6ez620dp5"},{"name":"k8s","_id":"ckxjvzrnp000y0gu63e422zkj"}]}}